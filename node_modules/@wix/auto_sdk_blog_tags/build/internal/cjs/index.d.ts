import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { CreateTagOptions, CreateTagResponse, GetTagByLabelOptions, GetTagByLabelResponse, GetTagOptions, BlogTag, GetTagBySlugOptions, GetTagBySlugResponse, QueryTagsOptions, TagsQueryBuilder, TagCreatedEnvelope, TagDeletedEnvelope, TagUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkCreateTagsRequest, BulkCreateTagsResponse, BulkDeleteTagRequest, BulkDeleteTagResponse, BulkTagResult, CommonCursorPaging, CommonPaging, CreateTagRequest, CursorPaging, Cursors, DeleteTagRequest, DeleteTagResponse, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, Field, GetOrCreateTagRequest, GetOrCreateTagResponse, GetTagByLabelRequest, GetTagBySlugRequest, GetTagRequest, GetTagResponse, GetTagsCountByLanguageRequest, GetTagsCountByLanguageResponse, IdentificationData, IdentificationDataIdOneOf, InitialTagsCopied, ItemMetadata, Keyword, ListTagsRequest, ListTagsRequestPagingMethodOneOf, ListTagsResponse, MessageEnvelope, MetaData, Paging, PagingMetadataV2, PlatformQuery, PlatformQueryPagingMethodOneOf, QueryTagsRequest, QueryTagsResponse, RestoreInfo, SeoSchema, Settings, SortOrder, Sorting, Tag, TagLanguageCount, TagsQueryResult, UpdateTagRequest, UpdateTagResponse, WebhookIdentityType } from './index.typings.js';

type TagNonNullablePaths = `_id` | `label` | `slug` | `postCount` | `publishedPostCount`;
declare function createTag$1(httpClient: HttpClient): CreateTagSignature;
interface CreateTagSignature {
    /**
     * Creates a new tag with the provided label if a tag with the same label doesn't already exist.
     * @param - Tag label. The label for each tag in a blog must be unique.
     */
    (label: string, options?: CreateTagOptions): Promise<NonNullablePaths<CreateTagResponse, {
        [P in TagNonNullablePaths]: `tag.${P}`;
    }[TagNonNullablePaths]>>;
}
declare function getTagByLabel$1(httpClient: HttpClient): GetTagByLabelSignature;
interface GetTagByLabelSignature {
    /**
     * Retrieves a tag by the provided label.
     *
     * Sub-labels can also be specified using a `/`. For example, you can have `'dessert/icecream'` and `'dessert/pie'` as two different tag labels.
     *
     * > **Note:** The full URL path following `labels/` is counted as 1 label. Adding a `/` to a label does _not_ create multiple labels. This means that `'dessert/icecream'` is a single label.
     * @param - Tag label.
     * @param - Options specifying which additional fields to return.
     */
    (label: string, options?: GetTagByLabelOptions): Promise<NonNullablePaths<GetTagByLabelResponse, {
        [P in TagNonNullablePaths]: `tag.${P}`;
    }[TagNonNullablePaths]>>;
}
declare function getTag$1(httpClient: HttpClient): GetTagSignature;
interface GetTagSignature {
    /**
     * Retrieves a tag with the provided ID.
     * @param - ID of tag to retrieve.
     * @param - Options specifying which additional fields to return.
     * @returns Retrieved tag.
     */
    (tagId: string, options?: GetTagOptions): Promise<NonNullablePaths<BlogTag, TagNonNullablePaths>>;
}
declare function getTagBySlug$1(httpClient: HttpClient): GetTagBySlugSignature;
interface GetTagBySlugSignature {
    /**
     * Retrieves a tag with the provided slug.
     *
     * The `slug` is the end of a tag's URL that refers to a specific tag.
     * For example, if a tag's URL is `https://example.com/blog/tag/{my-tag-slug}`,
     * the slug is `my-tag-slug`. The `slug` is case-sensitive and derived from the tag's `label`.
     * @param - Slug of the tag to retrieve.
     * @param - Options specifying which additional fields to return.
     */
    (slug: string, options?: GetTagBySlugOptions): Promise<NonNullablePaths<GetTagBySlugResponse, {
        [P in TagNonNullablePaths]: `tag.${P}`;
    }[TagNonNullablePaths]>>;
}
declare function queryTags$1(httpClient: HttpClient): QueryTagsSignature;
interface QueryTagsSignature {
    /**
     * Creates a query to retrieve a list of tags.
     *
     *
     * The `queryTags()` function builds a query to retrieve a list of up to 4,000 tags per language, and returns a `TagsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `TagsQueryBuilder` functions onto the query. `TagsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTags()` returns.
     *
     * `queryTags()` runs with these `TagsQueryBuilder` defaults that can be overridden:
     * - `limit(50)`
     * - `ascending('_id')`
     *
     * The following `TagsQueryBuilder` functions are supported for `queryTags()`. For a full description of the Tags object, see the object returned for the `items` property in `TagsQueryResult`.
     * @param - Options specifying which fields to return.
     */
    (options?: QueryTagsOptions): TagsQueryBuilder;
}
declare function deleteTag$1(httpClient: HttpClient): DeleteTagSignature;
interface DeleteTagSignature {
    /**
     * Deletes a tag. Deleting a tag removes that tag from all blog posts that contain it.
     * @param - Tag ID.
     */
    (tagId: string): Promise<void>;
}
declare const onTagCreated$1: EventDefinition<TagCreatedEnvelope, "wix.blog.v3.tag_created">;
declare const onTagDeleted$1: EventDefinition<TagDeletedEnvelope, "wix.blog.v3.tag_deleted">;
declare const onTagUpdated$1: EventDefinition<TagUpdatedEnvelope, "wix.blog.v3.tag_updated">;

declare const createTag: MaybeContext<BuildRESTFunction<typeof createTag$1> & typeof createTag$1>;
declare const getTagByLabel: MaybeContext<BuildRESTFunction<typeof getTagByLabel$1> & typeof getTagByLabel$1>;
declare const getTag: MaybeContext<BuildRESTFunction<typeof getTag$1> & typeof getTag$1>;
declare const getTagBySlug: MaybeContext<BuildRESTFunction<typeof getTagBySlug$1> & typeof getTagBySlug$1>;
declare const queryTags: MaybeContext<BuildRESTFunction<typeof queryTags$1> & typeof queryTags$1>;
declare const deleteTag: MaybeContext<BuildRESTFunction<typeof deleteTag$1> & typeof deleteTag$1>;
/**
 * Triggered when a tag is created.
 */
declare const onTagCreated: BuildEventDefinition<typeof onTagCreated$1>;
/**
 * Triggered when a tag is deleted.
 */
declare const onTagDeleted: BuildEventDefinition<typeof onTagDeleted$1>;
/**
 * Triggered when a tag is updated.
 */
declare const onTagUpdated: BuildEventDefinition<typeof onTagUpdated$1>;

export { BlogTag, CreateTagOptions, CreateTagResponse, GetTagByLabelOptions, GetTagByLabelResponse, GetTagBySlugOptions, GetTagBySlugResponse, GetTagOptions, QueryTagsOptions, TagCreatedEnvelope, TagDeletedEnvelope, TagUpdatedEnvelope, TagsQueryBuilder, createTag, deleteTag, getTag, getTagByLabel, getTagBySlug, onTagCreated, onTagDeleted, onTagUpdated, queryTags };
