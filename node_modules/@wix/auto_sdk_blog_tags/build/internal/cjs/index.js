"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  Field: () => Field,
  SortOrder: () => SortOrder,
  WebhookIdentityType: () => WebhookIdentityType,
  createTag: () => createTag4,
  deleteTag: () => deleteTag4,
  getTag: () => getTag4,
  getTagByLabel: () => getTagByLabel4,
  getTagBySlug: () => getTagBySlug4,
  onTagCreated: () => onTagCreated2,
  onTagDeleted: () => onTagDeleted2,
  onTagUpdated: () => onTagUpdated2,
  queryTags: () => queryTags4
});
module.exports = __toCommonJS(index_exports);

// src/blog-v3-tag-tags.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_page_url2 = require("@wix/sdk-runtime/transformations/page-url");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths3 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/blog-v3-tag-tags.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/blog-v3-tag-tags.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl(opts) {
  const domainToMappings = {
    _: [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "apps._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/v3/tags",
        destPath: "/v3/tags"
      },
      {
        srcPath: "/blog/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v2/tags",
        destPath: "/v2/tags"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/bulk/tag",
        destPath: "/v3/bulk/tag"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/bulk/tags",
        destPath: "/v3/bulk/tags"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ],
    "social-blog._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/tags",
        destPath: "/v3/tags"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_blog_tags";
function createTag(payload) {
  function __createTag({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.tag",
      method: "POST",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.TagService.CreateTag",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({
        protoPath: "/v3/tags",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "tag.createdDate" }, { path: "tag.updatedDate" }]
        }
      ])
    };
    return metadata;
  }
  return __createTag;
}
function getTagByLabel(payload) {
  function __getTagByLabel({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.tag",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.TagService.GetTagByLabel",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({
        protoPath: "/v3/tags/labels/{label}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "tag.createdDate" }, { path: "tag.updatedDate" }]
        }
      ])
    };
    return metadata;
  }
  return __getTagByLabel;
}
function getTag(payload) {
  function __getTag({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.tag",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.TagService.GetTag",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({
        protoPath: "/v3/tags/{tagId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "tag.createdDate" }, { path: "tag.updatedDate" }]
        }
      ])
    };
    return metadata;
  }
  return __getTag;
}
function getTagBySlug(payload) {
  function __getTagBySlug({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.tag",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.TagService.GetTagBySlug",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({
        protoPath: "/v3/tags/slugs/{slug}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "tag.createdDate" }, { path: "tag.updatedDate" }]
        }
      ])
    };
    return metadata;
  }
  return __getTagBySlug;
}
function queryTags(payload) {
  function __queryTags({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.tag",
      method: "POST",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.TagService.QueryTags",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({
        protoPath: "/v3/tags/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp.transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "tags.createdDate" }, { path: "tags.updatedDate" }]
        }
      ])
    };
    return metadata;
  }
  return __queryTags;
}
function deleteTag(payload) {
  function __deleteTag({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.tag",
      method: "DELETE",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.TagService.DeleteTag",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({
        protoPath: "/v3/tags/{tagId}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteTag;
}

// src/blog-v3-tag-tags.universal.ts
var import_page_url = require("@wix/sdk-runtime/transformations/page-url");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var Field = /* @__PURE__ */ ((Field2) => {
  Field2["UNKNOWN"] = "UNKNOWN";
  Field2["URL"] = "URL";
  return Field2;
})(Field || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createTag2(label, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    label,
    language: options?.language,
    slug: options?.slug,
    fieldsets: options?.fieldsets
  });
  const reqOpts = createTag(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url.transformRESTPageURLToSDKPageURL,
          paths: [{ path: "tag.url" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          label: "$[0]",
          language: "$[1].language",
          slug: "$[1].slug",
          fieldsets: "$[1].fieldsets"
        },
        singleArgumentUnchanged: false
      },
      ["label", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTagByLabel2(label, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    label,
    language: options?.language,
    fieldsets: options?.fieldsets
  });
  const reqOpts = getTagByLabel(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url.transformRESTPageURLToSDKPageURL,
          paths: [{ path: "tag.url" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          label: "$[0]",
          language: "$[1].language",
          fieldsets: "$[1].fieldsets"
        },
        singleArgumentUnchanged: false
      },
      ["label", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTag2(tagId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    tagId,
    fieldsets: options?.fieldsets
  });
  const reqOpts = getTag(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url.transformRESTPageURLToSDKPageURL,
          paths: [{ path: "tag.url" }]
        }
      ])
    )?.tag;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          tagId: "$[0]",
          fieldsets: "$[1].fieldsets"
        },
        singleArgumentUnchanged: false
      },
      ["tagId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTagBySlug2(slug, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    slug,
    fieldsets: options?.fieldsets,
    language: options?.language
  });
  const reqOpts = getTagBySlug(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url.transformRESTPageURLToSDKPageURL,
          paths: [{ path: "tag.url" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          slug: "$[0]",
          fieldsets: "$[1].fieldsets",
          language: "$[1].language"
        },
        singleArgumentUnchanged: false
      },
      ["slug", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryTags2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryTags({
        ...payload,
        ...options ?? {}
      });
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [
          {
            transformFn: import_page_url.transformRESTPageURLToSDKPageURL,
            paths: [{ path: "tags.url" }]
          }
        ])
      );
      return {
        items: transformedData?.tags,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "OFFSET",
    transformationPaths: {}
  });
}
async function deleteTag2(tagId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ tagId });
  const reqOpts = deleteTag(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { tagId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["tagId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/blog-v3-tag-tags.public.ts
function createTag3(httpClient) {
  return (label, options) => createTag2(
    label,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getTagByLabel3(httpClient) {
  return (label, options) => getTagByLabel2(
    label,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getTag3(httpClient) {
  return (tagId, options) => getTag2(
    tagId,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getTagBySlug3(httpClient) {
  return (slug, options) => getTagBySlug2(
    slug,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryTags3(httpClient) {
  return (options) => queryTags2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteTag3(httpClient) {
  return (tagId) => deleteTag2(
    tagId,
    // @ts-ignore
    { httpClient }
  );
}
var onTagCreated = (0, import_sdk_types.EventDefinition)(
  "wix.blog.v3.tag_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
        paths: [{ path: "entity.url" }]
      }
    ])
  )
)();
var onTagDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.blog.v3.tag_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
        paths: [{ path: "undefined.url" }]
      }
    ])
  )
)();
var onTagUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.blog.v3.tag_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths3.transformPaths)(event, [
      {
        transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      },
      {
        transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
        paths: [{ path: "entity.url" }]
      }
    ])
  )
)();

// src/blog-v3-tag-tags.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var createTag4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createTag3);
var getTagByLabel4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getTagByLabel3);
var getTag4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getTag3);
var getTagBySlug4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getTagBySlug3);
var queryTags4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryTags3);
var deleteTag4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteTag3);
var onTagCreated2 = (0, import_event_definition_modules.createEventModule)(onTagCreated);
var onTagDeleted2 = (0, import_event_definition_modules.createEventModule)(onTagDeleted);
var onTagUpdated2 = (0, import_event_definition_modules.createEventModule)(onTagUpdated);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Field,
  SortOrder,
  WebhookIdentityType,
  createTag,
  deleteTag,
  getTag,
  getTagByLabel,
  getTagBySlug,
  onTagCreated,
  onTagDeleted,
  onTagUpdated,
  queryTags
});
//# sourceMappingURL=index.js.map