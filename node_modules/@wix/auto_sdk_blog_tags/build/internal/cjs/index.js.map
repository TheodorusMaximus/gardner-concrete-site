{"version":3,"sources":["../../../index.ts","../../../src/blog-v3-tag-tags.public.ts","../../../src/blog-v3-tag-tags.universal.ts","../../../src/blog-v3-tag-tags.http.ts","../../../src/blog-v3-tag-tags.context.ts"],"sourcesContent":["export * from './src/blog-v3-tag-tags.context.js';\n","import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { transformRESTPageURLToSDKPageURL } from '@wix/sdk-runtime/transformations/page-url';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { EventDefinition, HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport {\n  BlogTag,\n  CreateTagOptions,\n  CreateTagResponse,\n  GetTagByLabelOptions,\n  GetTagByLabelResponse,\n  GetTagBySlugOptions,\n  GetTagBySlugResponse,\n  GetTagOptions,\n  QueryTagsOptions,\n  TagCreatedEnvelope,\n  TagDeletedEnvelope,\n  TagUpdatedEnvelope,\n  TagsQueryBuilder,\n  createTag as universalCreateTag,\n  deleteTag as universalDeleteTag,\n  getTag as universalGetTag,\n  getTagByLabel as universalGetTagByLabel,\n  getTagBySlug as universalGetTagBySlug,\n  queryTags as universalQueryTags,\n} from './blog-v3-tag-tags.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/blog' };\n\ntype TagNonNullablePaths =\n  | `_id`\n  | `label`\n  | `slug`\n  | `postCount`\n  | `publishedPostCount`;\n\nexport function createTag(httpClient: HttpClient): CreateTagSignature {\n  return (label: string, options?: CreateTagOptions) =>\n    universalCreateTag(\n      label,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface CreateTagSignature {\n  /**\n   * Creates a new tag with the provided label if a tag with the same label doesn't already exist.\n   * @param - Tag label. The label for each tag in a blog must be unique.\n   */\n  (label: string, options?: CreateTagOptions): Promise<\n    NonNullablePaths<\n      CreateTagResponse,\n      { [P in TagNonNullablePaths]: `tag.${P}` }[TagNonNullablePaths]\n    >\n  >;\n}\n\nexport function getTagByLabel(httpClient: HttpClient): GetTagByLabelSignature {\n  return (label: string, options?: GetTagByLabelOptions) =>\n    universalGetTagByLabel(\n      label,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetTagByLabelSignature {\n  /**\n   * Retrieves a tag by the provided label.\n   *\n   * Sub-labels can also be specified using a `/`. For example, you can have `'dessert/icecream'` and `'dessert/pie'` as two different tag labels.\n   *\n   * > **Note:** The full URL path following `labels/` is counted as 1 label. Adding a `/` to a label does _not_ create multiple labels. This means that `'dessert/icecream'` is a single label.\n   * @param - Tag label.\n   * @param - Options specifying which additional fields to return.\n   */\n  (label: string, options?: GetTagByLabelOptions): Promise<\n    NonNullablePaths<\n      GetTagByLabelResponse,\n      { [P in TagNonNullablePaths]: `tag.${P}` }[TagNonNullablePaths]\n    >\n  >;\n}\n\nexport function getTag(httpClient: HttpClient): GetTagSignature {\n  return (tagId: string, options?: GetTagOptions) =>\n    universalGetTag(\n      tagId,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetTagSignature {\n  /**\n   * Retrieves a tag with the provided ID.\n   * @param - ID of tag to retrieve.\n   * @param - Options specifying which additional fields to return.\n   * @returns Retrieved tag.\n   */\n  (tagId: string, options?: GetTagOptions): Promise<\n    NonNullablePaths<BlogTag, TagNonNullablePaths>\n  >;\n}\n\nexport function getTagBySlug(httpClient: HttpClient): GetTagBySlugSignature {\n  return (slug: string, options?: GetTagBySlugOptions) =>\n    universalGetTagBySlug(\n      slug,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetTagBySlugSignature {\n  /**\n   * Retrieves a tag with the provided slug.\n   *\n   * The `slug` is the end of a tag's URL that refers to a specific tag.\n   * For example, if a tag's URL is `https://example.com/blog/tag/{my-tag-slug}`,\n   * the slug is `my-tag-slug`. The `slug` is case-sensitive and derived from the tag's `label`.\n   * @param - Slug of the tag to retrieve.\n   * @param - Options specifying which additional fields to return.\n   */\n  (slug: string, options?: GetTagBySlugOptions): Promise<\n    NonNullablePaths<\n      GetTagBySlugResponse,\n      { [P in TagNonNullablePaths]: `tag.${P}` }[TagNonNullablePaths]\n    >\n  >;\n}\n\nexport function queryTags(httpClient: HttpClient): QueryTagsSignature {\n  return (options?: QueryTagsOptions) =>\n    universalQueryTags(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface QueryTagsSignature {\n  /**\n   * Creates a query to retrieve a list of tags.\n   *\n   *\n   * The `queryTags()` function builds a query to retrieve a list of up to 4,000 tags per language, and returns a `TagsQueryBuilder` object.\n   *\n   * The returned object contains the query definition, which is typically used to run the query using the `find()` function.\n   *\n   * You can refine the query by chaining `TagsQueryBuilder` functions onto the query. `TagsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTags()` returns.\n   *\n   * `queryTags()` runs with these `TagsQueryBuilder` defaults that can be overridden:\n   * - `limit(50)`\n   * - `ascending('_id')`\n   *\n   * The following `TagsQueryBuilder` functions are supported for `queryTags()`. For a full description of the Tags object, see the object returned for the `items` property in `TagsQueryResult`.\n   * @param - Options specifying which fields to return.\n   */\n  (options?: QueryTagsOptions): TagsQueryBuilder;\n}\n\nexport function deleteTag(httpClient: HttpClient): DeleteTagSignature {\n  return (tagId: string) =>\n    universalDeleteTag(\n      tagId,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteTagSignature {\n  /**\n   * Deletes a tag. Deleting a tag removes that tag from all blog posts that contain it.\n   * @param - Tag ID.\n   */\n  (tagId: string): Promise<void>;\n}\n\nexport const onTagCreated = EventDefinition(\n  'wix.blog.v3.tag_created',\n  true,\n  (event: TagCreatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.createdDate' },\n            { path: 'entity.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'entity.url' }],\n        },\n      ])\n    )\n)<TagCreatedEnvelope>();\nexport const onTagDeleted = EventDefinition(\n  'wix.blog.v3.tag_deleted',\n  true,\n  (event: TagDeletedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'undefined.createdDate' },\n            { path: 'undefined.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'undefined.url' }],\n        },\n      ])\n    )\n)<TagDeletedEnvelope>();\nexport const onTagUpdated = EventDefinition(\n  'wix.blog.v3.tag_updated',\n  true,\n  (event: TagUpdatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.createdDate' },\n            { path: 'entity.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'entity.url' }],\n        },\n      ])\n    )\n)<TagUpdatedEnvelope>();\n\nexport {\n  ActionEvent,\n  ApplicationError,\n  BaseEventMetadata,\n  BlogTag,\n  BulkActionMetadata,\n  BulkCreateTagsRequest,\n  BulkCreateTagsResponse,\n  BulkDeleteTagRequest,\n  BulkDeleteTagResponse,\n  BulkTagResult,\n  CommonCursorPaging,\n  CommonPaging,\n  CreateTagOptions,\n  CreateTagRequest,\n  CreateTagResponse,\n  CursorPaging,\n  Cursors,\n  DeleteTagRequest,\n  DeleteTagResponse,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  EntityDeletedEvent,\n  EntityUpdatedEvent,\n  EventMetadata,\n  Field,\n  GetOrCreateTagRequest,\n  GetOrCreateTagResponse,\n  GetTagByLabelOptions,\n  GetTagByLabelRequest,\n  GetTagByLabelResponse,\n  GetTagBySlugOptions,\n  GetTagBySlugRequest,\n  GetTagBySlugResponse,\n  GetTagOptions,\n  GetTagRequest,\n  GetTagResponse,\n  GetTagsCountByLanguageRequest,\n  GetTagsCountByLanguageResponse,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  InitialTagsCopied,\n  ItemMetadata,\n  Keyword,\n  ListTagsRequest,\n  ListTagsRequestPagingMethodOneOf,\n  ListTagsResponse,\n  MessageEnvelope,\n  MetaData,\n  Paging,\n  PagingMetadataV2,\n  PlatformQuery,\n  PlatformQueryPagingMethodOneOf,\n  QueryTagsOptions,\n  QueryTagsRequest,\n  QueryTagsResponse,\n  RestoreInfo,\n  SeoSchema,\n  Settings,\n  SortOrder,\n  Sorting,\n  Tag,\n  TagCreatedEnvelope,\n  TagDeletedEnvelope,\n  TagLanguageCount,\n  TagUpdatedEnvelope,\n  TagsQueryBuilder,\n  TagsQueryResult,\n  UpdateTagRequest,\n  UpdateTagResponse,\n  WebhookIdentityType,\n} from './blog-v3-tag-tags.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport { queryBuilder } from '@wix/sdk-runtime/query-builder';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, HttpResponse, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixBlogV3Tag from './blog-v3-tag-tags.http.js';\n// @ts-ignore\nimport { transformRESTPageURLToSDKPageURL } from '@wix/sdk-runtime/transformations/page-url';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\n\nexport interface BlogTag {\n  /**\n   * Tag ID.\n   * @readonly\n   * @format GUID\n   */\n  _id?: string;\n  /**\n   * Tag label.\n   *\n   * A blog can't have two tags with the same label.\n   * @maxLength 100\n   */\n  label?: string;\n  /**\n   * Part of a tag's URL that refers to a specific tag.\n   *\n   * For example, `'https:/example.com/tags/{my-tag-slug}'`\n   * @maxLength 100\n   */\n  slug?: string;\n  /**\n   * Date the tag was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date the tag was last updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Number of posts with this tag. Includes unpublished draft posts.\n   * @readonly\n   */\n  postCount?: number;\n  /**\n   * Tag URL.\n   *\n   * The `url` directs you to a page that lists every post with the specified tag.\n   * @readonly\n   */\n  url?: string;\n  /**\n   * Number of published posts with this tag.\n   * @readonly\n   */\n  publishedPostCount?: number;\n  /**\n   * ID of the tag's translations when [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-translating-your-blog) is installed on a site.\n   *\n   * All translations of a single tag share the same `translationId`.\n   * @readonly\n   * @format GUID\n   */\n  translationId?: string | null;\n  /**\n   * Tag language.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * @immutable\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n}\n\n/**\n * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.\n * The search engines use this information for ranking purposes, or to display snippets in the search results.\n * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.\n */\nexport interface SeoSchema {\n  /** SEO tag information. */\n  tags?: Tag[];\n  /** SEO general settings. */\n  settings?: Settings;\n}\n\nexport interface Keyword {\n  /** Keyword value. */\n  term?: string;\n  /** Whether the keyword is the main focus keyword. */\n  isMain?: boolean;\n  /**\n   * The source that added the keyword terms to the SEO settings.\n   * @maxLength 1000\n   */\n  origin?: string | null;\n}\n\nexport interface Tag {\n  /**\n   * SEO tag type.\n   *\n   *\n   * Supported values: `title`, `meta`, `script`, `link`.\n   */\n  type?: string;\n  /**\n   * A `{\"key\": \"value\"}` pair object where each SEO tag property (`\"name\"`, `\"content\"`, `\"rel\"`, `\"href\"`) contains a value.\n   * For example: `{\"name\": \"description\", \"content\": \"the description itself\"}`.\n   */\n  props?: Record<string, any> | null;\n  /** SEO tag meta data. For example, `{\"height\": 300, \"width\": 240}`. */\n  meta?: Record<string, any> | null;\n  /** SEO tag inner content. For example, `<title> inner content </title>`. */\n  children?: string;\n  /** Whether the tag is a custom tag. */\n  custom?: boolean;\n  /** Whether the tag is disabled. */\n  disabled?: boolean;\n}\n\nexport interface Settings {\n  /**\n   * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.\n   *\n   *\n   * Default: `false` (Auto Redirect is enabled.)\n   */\n  preventAutoRedirect?: boolean;\n  /**\n   * User-selected keyword terms for a specific page.\n   * @maxSize 5\n   */\n  keywords?: Keyword[];\n}\n\nexport interface InitialTagsCopied {\n  /** Number of tags copied. */\n  count?: number;\n}\n\nexport interface GetOrCreateTagRequest {\n  /**\n   * Tag name. Unique per blog.\n   * @minLength 1\n   * @maxLength 100\n   */\n  label?: string;\n  /**\n   * Tag language.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n  /**\n   * List of tag fields to be included if entities are present in the response.\n   * Base fieldset, which is default, will return all core tag properties.\n   * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport enum Field {\n  UNKNOWN = 'UNKNOWN',\n  /** Includes Tag URL when present. */\n  URL = 'URL',\n}\n\n/** @enumType */\nexport type FieldWithLiterals = Field | 'UNKNOWN' | 'URL';\n\nexport interface GetOrCreateTagResponse {\n  /** Tag info. */\n  tag?: BlogTag;\n}\n\nexport interface CreateTagRequest {\n  /**\n   * Tag label. The label for each tag in a blog must be unique.\n   * @minLength 1\n   * @maxLength 200\n   */\n  label: string;\n  /**\n   * Tag language.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n  /**\n   * Preferred tag slug. For example, `'tag-slug'`.\n   * @maxLength 100\n   */\n  slug?: string | null;\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface CreateTagResponse {\n  /** Created tag. */\n  tag?: BlogTag;\n}\n\nexport interface UpdateTagRequest {\n  /** Tag info to update. */\n  tag?: BlogTag;\n  /**\n   * List of tag fields to be included if entities are present in the response.\n   * Base fieldset, which is default, will return all core tag properties.\n   * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface UpdateTagResponse {\n  /** Updated tag. */\n  tag?: BlogTag;\n}\n\nexport interface BulkCreateTagsRequest {\n  /**\n   * Tags to create.\n   * @minSize 1\n   * @maxSize 50\n   */\n  tags?: BlogTag[];\n  /** Whether to return the full created tag entities in the response. */\n  returnFullEntity?: boolean;\n  /**\n   * List of tag fields to be included if entities are present in the response.\n   * Base fieldset, which is default, will return all core tag properties.\n   * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface BulkCreateTagsResponse {\n  /** Tags created by bulk action. */\n  results?: BulkTagResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkTagResult {\n  /** Bulk actions metadata for tag. */\n  itemMetadata?: ItemMetadata;\n  /** Optional created tag. */\n  item?: BlogTag;\n}\n\nexport interface ItemMetadata {\n  /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */\n  _id?: string | null;\n  /** Index of the item within the request array. Allows for correlation between request and response items. */\n  originalIndex?: number;\n  /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */\n  success?: boolean;\n  /** Details about the error in case of failure. */\n  error?: ApplicationError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\nexport interface BulkActionMetadata {\n  /** Number of items that were successfully processed. */\n  totalSuccesses?: number;\n  /** Number of items that couldn't be processed. */\n  totalFailures?: number;\n  /** Number of failures without details because detailed failure threshold was exceeded. */\n  undetailedFailures?: number;\n}\n\nexport interface GetTagsCountByLanguageRequest {}\n\nexport interface GetTagsCountByLanguageResponse {\n  /** The language and it's count. */\n  tagsLanguageCount?: TagLanguageCount[];\n}\n\nexport interface TagLanguageCount {\n  /**\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * @format LANGUAGE_TAG\n   */\n  languageCode?: string | null;\n  /** The amount of tags for the language. */\n  tagCount?: number | null;\n}\n\nexport interface GetTagByLabelRequest {\n  /**\n   * Tag label.\n   * @minLength 1\n   * @maxLength 100\n   */\n  label: string;\n  /**\n   * Tag language.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * If omitted, tags in all languages are returned.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface GetTagByLabelResponse {\n  /** Retrieved tag. */\n  tag?: BlogTag;\n}\n\nexport interface GetTagRequest {\n  /**\n   * ID of tag to retrieve.\n   * @minLength 1\n   * @maxLength 38\n   */\n  tagId: string;\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface GetTagResponse {\n  /** Retrieved tag. */\n  tag?: BlogTag;\n}\n\nexport interface GetTagBySlugRequest {\n  /**\n   * Slug of the tag to retrieve.\n   * @minLength 1\n   * @maxLength 100\n   */\n  slug: string;\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n  /**\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * Language of the tag to retrieve.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n}\n\nexport interface GetTagBySlugResponse {\n  /** Retrieved tag. */\n  tag?: BlogTag;\n}\n\nexport interface QueryTagsRequest {\n  /** Query options. */\n  query?: PlatformQuery;\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface PlatformQuery extends PlatformQueryPagingMethodOneOf {\n  /** Paging options to limit and skip the number of items. */\n  paging?: CommonPaging;\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CommonCursorPaging;\n  /**\n   * Filter object in the following format:\n   * `\"filter\" : {\n   * \"fieldName1\": \"value1\",\n   * \"fieldName2\":{\"$operator\":\"value2\"}\n   * }`\n   * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`\n   */\n  filter?: Record<string, any> | null;\n  /**\n   * Sort object in the following format:\n   * `[{\"fieldName\":\"sortField1\",\"order\":\"ASC\"},{\"fieldName\":\"sortField2\",\"order\":\"DESC\"}]`\n   * @maxSize 3\n   */\n  sort?: Sorting[];\n}\n\n/** @oneof */\nexport interface PlatformQueryPagingMethodOneOf {\n  /** Paging options to limit and skip the number of items. */\n  paging?: CommonPaging;\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CommonCursorPaging;\n}\n\nexport interface Sorting {\n  /**\n   * Name of the field to sort by.\n   * @maxLength 512\n   */\n  fieldName?: string;\n  /** Sort order. */\n  order?: SortOrderWithLiterals;\n}\n\nexport enum SortOrder {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\n/** @enumType */\nexport type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';\n\nexport interface CommonPaging {\n  /**\n   * Number of items to load.\n   * @max 100\n   */\n  limit?: number | null;\n  /** Number of items to skip in the current sort order. */\n  offset?: number | null;\n}\n\nexport interface CommonCursorPaging {\n  /**\n   * Number of items to load.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * You can get the relevant cursor token\n   * from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 2000\n   */\n  cursor?: string | null;\n}\n\nexport interface QueryTagsResponse {\n  /** List of tags. */\n  tags?: BlogTag[];\n  /** Details on the paged set of results returned. */\n  pagingMetadata?: PagingMetadataV2;\n}\n\nexport interface PagingMetadataV2 {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Offset that was requested. */\n  offset?: number | null;\n  /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */\n  total?: number | null;\n  /** Flag that indicates the server failed to calculate the `total` field. */\n  tooManyToCount?: boolean | null;\n  /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */\n  cursors?: Cursors;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor pointing to next page in the list of results.\n   * @maxLength 2000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to previous page in the list of results.\n   * @maxLength 2000\n   */\n  prev?: string | null;\n}\n\nexport interface ListTagsRequest extends ListTagsRequestPagingMethodOneOf {\n  /** Paging options to limit and skip the number of items. */\n  paging?: Paging;\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `sort`. */\n  cursorPaging?: CursorPaging;\n  /**\n   * Sorting options. For a list of sortable fields, see [Field Support for Filtering and Sorting](https://dev.wix.com/api/rest/community/blog/filter-and-sort).\n   * @maxSize 3\n   */\n  sort?: Sorting[];\n  /**\n   * List of tag fields to be included if entities are present in the response.\n   * Base fieldset, which is default, will return all core tag properties.\n   * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\n/** @oneof */\nexport interface ListTagsRequestPagingMethodOneOf {\n  /** Paging options to limit and skip the number of items. */\n  paging?: Paging;\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `sort`. */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface Paging {\n  /**\n   * Number of items to load.\n   * @max 100\n   */\n  limit?: number | null;\n  /** Number of items to skip in the current sort order. */\n  offset?: number | null;\n}\n\nexport interface CursorPaging {\n  /**\n   * Number of items to load.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * You can get the relevant cursor token\n   * from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 2000\n   */\n  cursor?: string | null;\n}\n\nexport interface ListTagsResponse {\n  /** List of tags. */\n  tags?: BlogTag[];\n  /** Details on the paged set of results returned. */\n  metaData?: MetaData;\n}\n\nexport interface MetaData {\n  /** Number of items returned in this response. */\n  count?: number;\n  /** Requested offset. */\n  offset?: number;\n  /** Total number of items that match the query. */\n  total?: number;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   * @maxLength 2000\n   */\n  cursor?: string | null;\n}\n\nexport interface BulkDeleteTagRequest {\n  /**\n   * Tag IDs.\n   * @minSize 1\n   * @maxSize 100\n   * @maxLength 38\n   */\n  tagIds?: string[];\n  /** Should delete bypassing the trash-bin. */\n  permanent?: boolean;\n}\n\nexport interface BulkDeleteTagResponse {}\n\nexport interface DeleteTagRequest {\n  /**\n   * Tag ID.\n   * @maxLength 38\n   */\n  tagId: string;\n}\n\nexport interface DeleteTagResponse {}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type WebhookIdentityTypeWithLiterals =\n  | WebhookIdentityType\n  | 'UNKNOWN'\n  | 'ANONYMOUS_VISITOR'\n  | 'MEMBER'\n  | 'WIX_USER'\n  | 'APP';\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface TagCreatedEnvelope {\n  entity: BlogTag;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a tag is created.\n * @permissionScope Read Blog\n * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG\n * @permissionScope Read Draft Blog Posts\n * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS\n * @permissionId BLOG.READ_TAG\n * @webhook\n * @eventType wix.blog.v3.tag_created\n * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.TagService\n * @slug created\n */\nexport declare function onTagCreated(\n  handler: (event: TagCreatedEnvelope) => void | Promise<void>\n): void;\n\nexport interface TagDeletedEnvelope {\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a tag is deleted.\n * @permissionScope Read Blog\n * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG\n * @permissionScope Read Draft Blog Posts\n * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS\n * @permissionId BLOG.READ_TAG\n * @webhook\n * @eventType wix.blog.v3.tag_deleted\n * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.TagService\n * @slug deleted\n */\nexport declare function onTagDeleted(\n  handler: (event: TagDeletedEnvelope) => void | Promise<void>\n): void;\n\nexport interface TagUpdatedEnvelope {\n  entity: BlogTag;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a tag is updated.\n * @permissionScope Read Blog\n * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG\n * @permissionScope Read Draft Blog Posts\n * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS\n * @permissionId BLOG.READ_TAG\n * @webhook\n * @eventType wix.blog.v3.tag_updated\n * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.TagService\n * @slug updated\n */\nexport declare function onTagUpdated(\n  handler: (event: TagUpdatedEnvelope) => void | Promise<void>\n): void;\n\ntype TagNonNullablePaths =\n  | `_id`\n  | `label`\n  | `slug`\n  | `postCount`\n  | `publishedPostCount`;\n\n/**\n * Creates a new tag with the provided label if a tag with the same label doesn't already exist.\n * @param label - Tag label. The label for each tag in a blog must be unique.\n * @public\n * @requiredField label\n * @permissionId BLOG.CREATE-TAG\n * @applicableIdentity APP\n * @fqn com.wixpress.npm.communities.platformized.blog.TagService.CreateTag\n */\nexport async function createTag(\n  label: string,\n  options?: CreateTagOptions\n): Promise<\n  NonNullablePaths<\n    CreateTagResponse,\n    { [P in TagNonNullablePaths]: `tag.${P}` }[TagNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    label: label,\n    language: options?.language,\n    slug: options?.slug,\n    fieldsets: options?.fieldsets,\n  });\n\n  const reqOpts = ambassadorWixBlogV3Tag.createTag(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'tag.url' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          label: '$[0]',\n          language: '$[1].language',\n          slug: '$[1].slug',\n          fieldsets: '$[1].fieldsets',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['label', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface CreateTagOptions {\n  /**\n   * Tag language.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n  /**\n   * Preferred tag slug. For example, `'tag-slug'`.\n   * @maxLength 100\n   */\n  slug?: string | null;\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\n/**\n * Retrieves a tag by the provided label.\n *\n * Sub-labels can also be specified using a `/`. For example, you can have `'dessert/icecream'` and `'dessert/pie'` as two different tag labels.\n *\n * > **Note:** The full URL path following `labels/` is counted as 1 label. Adding a `/` to a label does _not_ create multiple labels. This means that `'dessert/icecream'` is a single label.\n * @param label - Tag label.\n * @public\n * @requiredField label\n * @param options - Options specifying which additional fields to return.\n * @permissionId BLOG.READ_TAG\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTagByLabel\n */\nexport async function getTagByLabel(\n  label: string,\n  options?: GetTagByLabelOptions\n): Promise<\n  NonNullablePaths<\n    GetTagByLabelResponse,\n    { [P in TagNonNullablePaths]: `tag.${P}` }[TagNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    label: label,\n    language: options?.language,\n    fieldsets: options?.fieldsets,\n  });\n\n  const reqOpts = ambassadorWixBlogV3Tag.getTagByLabel(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'tag.url' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          label: '$[0]',\n          language: '$[1].language',\n          fieldsets: '$[1].fieldsets',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['label', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetTagByLabelOptions {\n  /**\n   * Tag language.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * If omitted, tags in all languages are returned.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\n/**\n * Retrieves a tag with the provided ID.\n * @param tagId - ID of tag to retrieve.\n * @public\n * @requiredField tagId\n * @param options - Options specifying which additional fields to return.\n * @permissionId BLOG.READ_TAG\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @returns Retrieved tag.\n * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTag\n */\nexport async function getTag(\n  tagId: string,\n  options?: GetTagOptions\n): Promise<NonNullablePaths<BlogTag, TagNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    tagId: tagId,\n    fieldsets: options?.fieldsets,\n  });\n\n  const reqOpts = ambassadorWixBlogV3Tag.getTag(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'tag.url' }],\n        },\n      ])\n    )?.tag!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          tagId: '$[0]',\n          fieldsets: '$[1].fieldsets',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['tagId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetTagOptions {\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\n/**\n * Retrieves a tag with the provided slug.\n *\n * The `slug` is the end of a tag's URL that refers to a specific tag.\n * For example, if a tag's URL is `https://example.com/blog/tag/{my-tag-slug}`,\n * the slug is `my-tag-slug`. The `slug` is case-sensitive and derived from the tag's `label`.\n * @param slug - Slug of the tag to retrieve.\n * @public\n * @requiredField slug\n * @param options - Options specifying which additional fields to return.\n * @permissionId BLOG.READ_TAG\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTagBySlug\n */\nexport async function getTagBySlug(\n  slug: string,\n  options?: GetTagBySlugOptions\n): Promise<\n  NonNullablePaths<\n    GetTagBySlugResponse,\n    { [P in TagNonNullablePaths]: `tag.${P}` }[TagNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    slug: slug,\n    fieldsets: options?.fieldsets,\n    language: options?.language,\n  });\n\n  const reqOpts = ambassadorWixBlogV3Tag.getTagBySlug(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'tag.url' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          slug: '$[0]',\n          fieldsets: '$[1].fieldsets',\n          language: '$[1].language',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['slug', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetTagBySlugOptions {\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n  /**\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * Language of the tag to retrieve.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n}\n\n/**\n * Creates a query to retrieve a list of tags.\n *\n *\n * The `queryTags()` function builds a query to retrieve a list of up to 4,000 tags per language, and returns a `TagsQueryBuilder` object.\n *\n * The returned object contains the query definition, which is typically used to run the query using the `find()` function.\n *\n * You can refine the query by chaining `TagsQueryBuilder` functions onto the query. `TagsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTags()` returns.\n *\n * `queryTags()` runs with these `TagsQueryBuilder` defaults that can be overridden:\n * - `limit(50)`\n * - `ascending('_id')`\n *\n * The following `TagsQueryBuilder` functions are supported for `queryTags()`. For a full description of the Tags object, see the object returned for the `items` property in `TagsQueryResult`.\n * @public\n * @param options - Options specifying which fields to return.\n * @permissionId BLOG.READ_TAG\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.npm.communities.platformized.blog.TagService.QueryTags\n */\nexport function queryTags(options?: QueryTagsOptions): TagsQueryBuilder {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  return queryBuilder<BlogTag, 'OFFSET', QueryTagsRequest, QueryTagsResponse>({\n    func: async (payload: QueryTagsRequest) => {\n      const reqOpts = ambassadorWixBlogV3Tag.queryTags({\n        ...payload,\n        ...(options ?? {}),\n      });\n\n      sideEffects?.onSiteCall?.();\n      try {\n        const result = await httpClient.request(reqOpts);\n        sideEffects?.onSuccess?.(result);\n        return result;\n      } catch (err) {\n        sideEffects?.onError?.(err);\n        throw err;\n      }\n    },\n    requestTransformer: (query: QueryTagsRequest['query']) => {\n      const args = [query, options] as [\n        QueryTagsRequest['query'],\n        QueryTagsOptions\n      ];\n      return renameKeysFromSDKRequestToRESTRequest({\n        ...args?.[1],\n        query: args?.[0],\n      });\n    },\n    responseTransformer: ({ data }: HttpResponse<QueryTagsResponse>) => {\n      const transformedData = renameKeysFromRESTResponseToSDKResponse(\n        transformPaths(data, [\n          {\n            transformFn: transformRESTPageURLToSDKPageURL,\n            paths: [{ path: 'tags.url' }],\n          },\n        ])\n      );\n\n      return {\n        items: transformedData?.tags,\n        pagingMetadata: transformedData?.pagingMetadata,\n      };\n    },\n    errorTransformer: (err: unknown) => {\n      const transformedError = sdkTransformError(err, {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { query: '$[0]' },\n        singleArgumentUnchanged: false,\n      });\n\n      throw transformedError;\n    },\n    pagingMethod: 'OFFSET',\n    transformationPaths: {},\n  });\n}\n\nexport interface QueryTagsOptions {\n  /**\n   * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in\n   * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default\n   * only the tag's base fields are returned.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[] | undefined;\n}\n\ninterface QueryOffsetResult {\n  currentPage: number | undefined;\n  totalPages: number | undefined;\n  totalCount: number | undefined;\n  hasNext: () => boolean;\n  hasPrev: () => boolean;\n  length: number;\n  pageSize: number;\n}\n\nexport interface TagsQueryResult extends QueryOffsetResult {\n  items: BlogTag[];\n  query: TagsQueryBuilder;\n  next: () => Promise<TagsQueryResult>;\n  prev: () => Promise<TagsQueryResult>;\n}\n\nexport interface TagsQueryBuilder {\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  eq: (\n    propertyName:\n      | '_id'\n      | 'label'\n      | 'slug'\n      | 'postCount'\n      | 'publishedPostCount'\n      | 'translationId'\n      | 'language',\n    value: any\n  ) => TagsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  ne: (\n    propertyName:\n      | '_id'\n      | 'label'\n      | 'slug'\n      | 'postCount'\n      | 'publishedPostCount'\n      | 'translationId'\n      | 'language',\n    value: any\n  ) => TagsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  ge: (\n    propertyName: 'label' | 'slug' | 'postCount' | 'publishedPostCount',\n    value: any\n  ) => TagsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  gt: (\n    propertyName: 'label' | 'slug' | 'postCount' | 'publishedPostCount',\n    value: any\n  ) => TagsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  le: (\n    propertyName: 'label' | 'slug' | 'postCount' | 'publishedPostCount',\n    value: any\n  ) => TagsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  lt: (\n    propertyName: 'label' | 'slug' | 'postCount' | 'publishedPostCount',\n    value: any\n  ) => TagsQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `string`.\n   * @param string - String to compare against. Case-insensitive.\n   */\n  startsWith: (\n    propertyName: 'label' | 'slug',\n    value: string\n  ) => TagsQueryBuilder;\n  in: (\n    propertyName:\n      | '_id'\n      | 'label'\n      | 'slug'\n      | 'postCount'\n      | 'publishedPostCount'\n      | 'translationId'\n      | 'language',\n    value: any\n  ) => TagsQueryBuilder;\n  exists: (\n    propertyName: 'label' | 'slug' | 'translationId' | 'language',\n    value: boolean\n  ) => TagsQueryBuilder;\n  /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */\n  ascending: (\n    ...propertyNames: Array<\n      '_id' | 'label' | 'slug' | 'postCount' | 'publishedPostCount' | 'language'\n    >\n  ) => TagsQueryBuilder;\n  /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */\n  descending: (\n    ...propertyNames: Array<\n      '_id' | 'label' | 'slug' | 'postCount' | 'publishedPostCount' | 'language'\n    >\n  ) => TagsQueryBuilder;\n  /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */\n  limit: (limit: number) => TagsQueryBuilder;\n  /** @param skip - Number of items to skip in the query results before returning the results. */\n  skip: (skip: number) => TagsQueryBuilder;\n  find: () => Promise<TagsQueryResult>;\n}\n\n/**\n * Deletes a tag. Deleting a tag removes that tag from all blog posts that contain it.\n * @param tagId - Tag ID.\n * @public\n * @requiredField tagId\n * @permissionId BLOG.DELETE_TAG\n * @applicableIdentity APP\n * @fqn com.wixpress.npm.communities.platformized.blog.TagService.DeleteTag\n */\nexport async function deleteTag(tagId: string): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ tagId: tagId });\n\n  const reqOpts = ambassadorWixBlogV3Tag.deleteTag(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { tagId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['tagId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    _: [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'apps._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/v3/tags',\n        destPath: '/v3/tags',\n      },\n      {\n        srcPath: '/blog/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v2/tags',\n        destPath: '/v2/tags',\n      },\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/bulk/tag',\n        destPath: '/v3/bulk/tag',\n      },\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/bulk/tags',\n        destPath: '/v3/bulk/tags',\n      },\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'bo._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'wixbo.ai': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'wix-bo.com': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'editor._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'blocks._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'create.editorx': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'editor.wixapps.net': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n    'social-blog._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/tags',\n        destPath: '/v3/tags',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_blog_tags';\n\n/** Creates a new tag with the provided label if a tag with the same label doesn't already exist. */\nexport function createTag(payload: object): RequestOptionsFactory<any> {\n  function __createTag({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.tag',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.TagService.CreateTag',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({\n        protoPath: '/v3/tags',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'tag.createdDate' }, { path: 'tag.updatedDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createTag;\n}\n\n/**\n * Retrieves a tag by the provided label.\n *\n * Sub-labels can also be specified using a `/`. For example, you can have `'dessert/icecream'` and `'dessert/pie'` as two different tag labels.\n *\n * > **Note:** The full URL path following `labels/` is counted as 1 label. Adding a `/` to a label does _not_ create multiple labels. This means that `'dessert/icecream'` is a single label.\n */\nexport function getTagByLabel(payload: object): RequestOptionsFactory<any> {\n  function __getTagByLabel({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.tag',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.TagService.GetTagByLabel',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({\n        protoPath: '/v3/tags/labels/{label}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'tag.createdDate' }, { path: 'tag.updatedDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getTagByLabel;\n}\n\n/** Retrieves a tag with the provided ID. */\nexport function getTag(payload: object): RequestOptionsFactory<any> {\n  function __getTag({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.tag',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.TagService.GetTag',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({\n        protoPath: '/v3/tags/{tagId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'tag.createdDate' }, { path: 'tag.updatedDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getTag;\n}\n\n/**\n * Retrieves a tag with the provided slug.\n *\n * The `slug` is the end of a tag's URL that refers to a specific tag.\n * For example, if a tag's URL is `https://example.com/blog/tag/{my-tag-slug}`,\n * the slug is `my-tag-slug`. The `slug` is case-sensitive and derived from the tag's `label`.\n */\nexport function getTagBySlug(payload: object): RequestOptionsFactory<any> {\n  function __getTagBySlug({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.tag',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.TagService.GetTagBySlug',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({\n        protoPath: '/v3/tags/slugs/{slug}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'tag.createdDate' }, { path: 'tag.updatedDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getTagBySlug;\n}\n\n/**\n * Creates a query to retrieve a list of tags.\n *\n *\n * The `queryTags()` function builds a query to retrieve a list of up to 4,000 tags per language, and returns a `TagsQueryBuilder` object.\n *\n * The returned object contains the query definition, which is typically used to run the query using the `find()` function.\n *\n * You can refine the query by chaining `TagsQueryBuilder` functions onto the query. `TagsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTags()` returns.\n *\n * `queryTags()` runs with these `TagsQueryBuilder` defaults that can be overridden:\n * - `limit(50)`\n * - `ascending('_id')`\n *\n * The following `TagsQueryBuilder` functions are supported for `queryTags()`. For a full description of the Tags object, see the object returned for the `items` property in `TagsQueryResult`.\n */\nexport function queryTags(payload: object): RequestOptionsFactory<any> {\n  function __queryTags({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.tag',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.TagService.QueryTags',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({\n        protoPath: '/v3/tags/query',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [{ path: 'tags.createdDate' }, { path: 'tags.updatedDate' }],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __queryTags;\n}\n\n/** Deletes a tag. Deleting a tag removes that tag from all blog posts that contain it. */\nexport function deleteTag(payload: object): RequestOptionsFactory<any> {\n  function __deleteTag({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.tag',\n      method: 'DELETE' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.TagService.DeleteTag',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogTagServiceUrl({\n        protoPath: '/v3/tags/{tagId}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteTag;\n}\n","import {\n  createTag as publicCreateTag,\n  getTagByLabel as publicGetTagByLabel,\n  getTag as publicGetTag,\n  getTagBySlug as publicGetTagBySlug,\n  queryTags as publicQueryTags,\n  deleteTag as publicDeleteTag,\n} from './blog-v3-tag-tags.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { createEventModule } from '@wix/sdk-runtime/event-definition-modules';\nimport {\n  BuildRESTFunction,\n  MaybeContext,\n  BuildEventDefinition,\n} from '@wix/sdk-types';\nimport { onTagCreated as publicOnTagCreated } from './blog-v3-tag-tags.public.js';\nimport { onTagDeleted as publicOnTagDeleted } from './blog-v3-tag-tags.public.js';\nimport { onTagUpdated as publicOnTagUpdated } from './blog-v3-tag-tags.public.js';\n\nexport const createTag: MaybeContext<\n  BuildRESTFunction<typeof publicCreateTag> & typeof publicCreateTag\n> = /*#__PURE__*/ createRESTModule(publicCreateTag);\nexport const getTagByLabel: MaybeContext<\n  BuildRESTFunction<typeof publicGetTagByLabel> & typeof publicGetTagByLabel\n> = /*#__PURE__*/ createRESTModule(publicGetTagByLabel);\nexport const getTag: MaybeContext<\n  BuildRESTFunction<typeof publicGetTag> & typeof publicGetTag\n> = /*#__PURE__*/ createRESTModule(publicGetTag);\nexport const getTagBySlug: MaybeContext<\n  BuildRESTFunction<typeof publicGetTagBySlug> & typeof publicGetTagBySlug\n> = /*#__PURE__*/ createRESTModule(publicGetTagBySlug);\nexport const queryTags: MaybeContext<\n  BuildRESTFunction<typeof publicQueryTags> & typeof publicQueryTags\n> = /*#__PURE__*/ createRESTModule(publicQueryTags);\nexport const deleteTag: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteTag> & typeof publicDeleteTag\n> = /*#__PURE__*/ createRESTModule(publicDeleteTag);\n/**\n * Triggered when a tag is created.\n */\nexport const onTagCreated: BuildEventDefinition<typeof publicOnTagCreated> =\n  createEventModule(publicOnTagCreated);\n/**\n * Triggered when a tag is deleted.\n */\nexport const onTagDeleted: BuildEventDefinition<typeof publicOnTagDeleted> =\n  createEventModule(publicOnTagDeleted);\n/**\n * Triggered when a tag is updated.\n */\nexport const onTagUpdated: BuildEventDefinition<typeof publicOnTagUpdated> =\n  createEventModule(publicOnTagUpdated);\n\nexport {\n  Field,\n  SortOrder,\n  WebhookIdentityType,\n} from './blog-v3-tag-tags.universal.js';\nexport {\n  BlogTag,\n  SeoSchema,\n  Keyword,\n  Tag,\n  Settings,\n  InitialTagsCopied,\n  GetOrCreateTagRequest,\n  GetOrCreateTagResponse,\n  CreateTagRequest,\n  CreateTagResponse,\n  UpdateTagRequest,\n  UpdateTagResponse,\n  BulkCreateTagsRequest,\n  BulkCreateTagsResponse,\n  BulkTagResult,\n  ItemMetadata,\n  ApplicationError,\n  BulkActionMetadata,\n  GetTagsCountByLanguageRequest,\n  GetTagsCountByLanguageResponse,\n  TagLanguageCount,\n  GetTagByLabelRequest,\n  GetTagByLabelResponse,\n  GetTagRequest,\n  GetTagResponse,\n  GetTagBySlugRequest,\n  GetTagBySlugResponse,\n  QueryTagsRequest,\n  PlatformQuery,\n  PlatformQueryPagingMethodOneOf,\n  Sorting,\n  CommonPaging,\n  CommonCursorPaging,\n  QueryTagsResponse,\n  PagingMetadataV2,\n  Cursors,\n  ListTagsRequest,\n  ListTagsRequestPagingMethodOneOf,\n  Paging,\n  CursorPaging,\n  ListTagsResponse,\n  MetaData,\n  BulkDeleteTagRequest,\n  BulkDeleteTagResponse,\n  DeleteTagRequest,\n  DeleteTagResponse,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  RestoreInfo,\n  EntityUpdatedEvent,\n  EntityDeletedEvent,\n  ActionEvent,\n  MessageEnvelope,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  BaseEventMetadata,\n  EventMetadata,\n  TagCreatedEnvelope,\n  TagDeletedEnvelope,\n  TagUpdatedEnvelope,\n  CreateTagOptions,\n  GetTagByLabelOptions,\n  GetTagOptions,\n  GetTagBySlugOptions,\n  QueryTagsOptions,\n  TagsQueryResult,\n  TagsQueryBuilder,\n} from './blog-v3-tag-tags.universal.js';\n"],"mappings":"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","names":["createTag","deleteTag","getTag","getTagByLabel","getTagBySlug","onTagCreated","onTagDeleted","onTagUpdated","queryTags","import_rename_all_nested_keys","import_page_url","import_timestamp","import_transform_paths","import_rest_modules","payload","import_transform_paths","Field","SortOrder","WebhookIdentityType","createTag","sdkTransformError","getTagByLabel","getTag","getTagBySlug","queryTags","deleteTag","createTag","getTagByLabel","getTag","getTagBySlug","queryTags","deleteTag","import_rest_modules","createTag","getTagByLabel","getTag","getTagBySlug","queryTags","deleteTag","onTagCreated","onTagDeleted","onTagUpdated"]}