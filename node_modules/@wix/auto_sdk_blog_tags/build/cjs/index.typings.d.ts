import { NonNullablePaths } from '@wix/sdk-types';

interface BlogTag {
    /**
     * Tag ID.
     * @readonly
     * @format GUID
     */
    _id?: string;
    /**
     * Tag label.
     *
     * A blog can't have two tags with the same label.
     * @maxLength 100
     */
    label?: string;
    /**
     * Part of a tag's URL that refers to a specific tag.
     *
     * For example, `'https:/example.com/tags/{my-tag-slug}'`
     * @maxLength 100
     */
    slug?: string;
    /**
     * Date the tag was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date the tag was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Number of posts with this tag. Includes unpublished draft posts.
     * @readonly
     */
    postCount?: number;
    /**
     * Tag URL.
     *
     * The `url` directs you to a page that lists every post with the specified tag.
     * @readonly
     */
    url?: string;
    /**
     * Number of published posts with this tag.
     * @readonly
     */
    publishedPostCount?: number;
    /**
     * ID of the tag's translations when [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-translating-your-blog) is installed on a site.
     *
     * All translations of a single tag share the same `translationId`.
     * @readonly
     * @format GUID
     */
    translationId?: string | null;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * @immutable
     * @format LANGUAGE_TAG
     */
    language?: string | null;
}
/**
 * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.
 * The search engines use this information for ranking purposes, or to display snippets in the search results.
 * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.
 */
interface SeoSchema {
    /** SEO tag information. */
    tags?: Tag[];
    /** SEO general settings. */
    settings?: Settings;
}
interface Keyword {
    /** Keyword value. */
    term?: string;
    /** Whether the keyword is the main focus keyword. */
    isMain?: boolean;
    /**
     * The source that added the keyword terms to the SEO settings.
     * @maxLength 1000
     */
    origin?: string | null;
}
interface Tag {
    /**
     * SEO tag type.
     *
     *
     * Supported values: `title`, `meta`, `script`, `link`.
     */
    type?: string;
    /**
     * A `{"key": "value"}` pair object where each SEO tag property (`"name"`, `"content"`, `"rel"`, `"href"`) contains a value.
     * For example: `{"name": "description", "content": "the description itself"}`.
     */
    props?: Record<string, any> | null;
    /** SEO tag meta data. For example, `{"height": 300, "width": 240}`. */
    meta?: Record<string, any> | null;
    /** SEO tag inner content. For example, `<title> inner content </title>`. */
    children?: string;
    /** Whether the tag is a custom tag. */
    custom?: boolean;
    /** Whether the tag is disabled. */
    disabled?: boolean;
}
interface Settings {
    /**
     * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.
     *
     *
     * Default: `false` (Auto Redirect is enabled.)
     */
    preventAutoRedirect?: boolean;
    /**
     * User-selected keyword terms for a specific page.
     * @maxSize 5
     */
    keywords?: Keyword[];
}
interface InitialTagsCopied {
    /** Number of tags copied. */
    count?: number;
}
interface GetOrCreateTagRequest {
    /**
     * Tag name. Unique per blog.
     * @minLength 1
     * @maxLength 100
     */
    label?: string;
    /**
     * Tag language.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
    /**
     * List of tag fields to be included if entities are present in the response.
     * Base fieldset, which is default, will return all core tag properties.
     * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
declare enum Field {
    UNKNOWN = "UNKNOWN",
    /** Includes Tag URL when present. */
    URL = "URL"
}
/** @enumType */
type FieldWithLiterals = Field | 'UNKNOWN' | 'URL';
interface GetOrCreateTagResponse {
    /** Tag info. */
    tag?: BlogTag;
}
interface CreateTagRequest {
    /**
     * Tag label. The label for each tag in a blog must be unique.
     * @minLength 1
     * @maxLength 200
     */
    label: string;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
    /**
     * Preferred tag slug. For example, `'tag-slug'`.
     * @maxLength 100
     */
    slug?: string | null;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface CreateTagResponse {
    /** Created tag. */
    tag?: BlogTag;
}
interface UpdateTagRequest {
    /** Tag info to update. */
    tag?: BlogTag;
    /**
     * List of tag fields to be included if entities are present in the response.
     * Base fieldset, which is default, will return all core tag properties.
     * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface UpdateTagResponse {
    /** Updated tag. */
    tag?: BlogTag;
}
interface BulkCreateTagsRequest {
    /**
     * Tags to create.
     * @minSize 1
     * @maxSize 50
     */
    tags?: BlogTag[];
    /** Whether to return the full created tag entities in the response. */
    returnFullEntity?: boolean;
    /**
     * List of tag fields to be included if entities are present in the response.
     * Base fieldset, which is default, will return all core tag properties.
     * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface BulkCreateTagsResponse {
    /** Tags created by bulk action. */
    results?: BulkTagResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface BulkTagResult {
    /** Bulk actions metadata for tag. */
    itemMetadata?: ItemMetadata;
    /** Optional created tag. */
    item?: BlogTag;
}
interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface GetTagsCountByLanguageRequest {
}
interface GetTagsCountByLanguageResponse {
    /** The language and it's count. */
    tagsLanguageCount?: TagLanguageCount[];
}
interface TagLanguageCount {
    /**
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * @format LANGUAGE_TAG
     */
    languageCode?: string | null;
    /** The amount of tags for the language. */
    tagCount?: number | null;
}
interface GetTagByLabelRequest {
    /**
     * Tag label.
     * @minLength 1
     * @maxLength 100
     */
    label: string;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * If omitted, tags in all languages are returned.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface GetTagByLabelResponse {
    /** Retrieved tag. */
    tag?: BlogTag;
}
interface GetTagRequest {
    /**
     * ID of tag to retrieve.
     * @minLength 1
     * @maxLength 38
     */
    tagId: string;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface GetTagResponse {
    /** Retrieved tag. */
    tag?: BlogTag;
}
interface GetTagBySlugRequest {
    /**
     * Slug of the tag to retrieve.
     * @minLength 1
     * @maxLength 100
     */
    slug: string;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
    /**
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * Language of the tag to retrieve.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
}
interface GetTagBySlugResponse {
    /** Retrieved tag. */
    tag?: BlogTag;
}
interface QueryTagsRequest {
    /** Query options. */
    query?: PlatformQuery;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: CommonPaging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 3
     */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: CommonPaging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CommonPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 2000
     */
    cursor?: string | null;
}
interface QueryTagsResponse {
    /** List of tags. */
    tags?: BlogTag[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor pointing to next page in the list of results.
     * @maxLength 2000
     */
    next?: string | null;
    /**
     * Cursor pointing to previous page in the list of results.
     * @maxLength 2000
     */
    prev?: string | null;
}
interface ListTagsRequest extends ListTagsRequestPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Sorting options. For a list of sortable fields, see [Field Support for Filtering and Sorting](https://dev.wix.com/api/rest/community/blog/filter-and-sort).
     * @maxSize 3
     */
    sort?: Sorting[];
    /**
     * List of tag fields to be included if entities are present in the response.
     * Base fieldset, which is default, will return all core tag properties.
     * Example: When URL fieldset is selected, returned tag will have a set of base properties and tag url.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
/** @oneof */
interface ListTagsRequestPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `sort`. */
    cursorPaging?: CursorPaging;
}
interface Paging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CursorPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 2000
     */
    cursor?: string | null;
}
interface ListTagsResponse {
    /** List of tags. */
    tags?: BlogTag[];
    /** Details on the paged set of results returned. */
    metaData?: MetaData;
}
interface MetaData {
    /** Number of items returned in this response. */
    count?: number;
    /** Requested offset. */
    offset?: number;
    /** Total number of items that match the query. */
    total?: number;
    /**
     * Pointer to the next or previous page in the list of results.
     * @maxLength 2000
     */
    cursor?: string | null;
}
interface BulkDeleteTagRequest {
    /**
     * Tag IDs.
     * @minSize 1
     * @maxSize 100
     * @maxLength 38
     */
    tagIds?: string[];
    /** Should delete bypassing the trash-bin. */
    permanent?: boolean;
}
interface BulkDeleteTagResponse {
}
interface DeleteTagRequest {
    /**
     * Tag ID.
     * @maxLength 38
     */
    tagId: string;
}
interface DeleteTagResponse {
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted. */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityTypeWithLiterals;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
/** @enumType */
type WebhookIdentityTypeWithLiterals = WebhookIdentityType | 'UNKNOWN' | 'ANONYMOUS_VISITOR' | 'MEMBER' | 'WIX_USER' | 'APP';
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /** Event ID. With this ID you can easily spot duplicated events and ignore them. */
    _id?: string;
    /**
     * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.
     * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.
     */
    entityFqdn?: string;
    /**
     * Event action name, placed at the top level to make it easier for users to dispatch messages.
     * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.
     * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.
     */
    entityEventSequence?: string | null;
}
interface TagCreatedEnvelope {
    entity: BlogTag;
    metadata: EventMetadata;
}
/**
 * Triggered when a tag is created.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ_TAG
 * @webhook
 * @eventType wix.blog.v3.tag_created
 * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.TagService
 * @slug created
 */
declare function onTagCreated(handler: (event: TagCreatedEnvelope) => void | Promise<void>): void;
interface TagDeletedEnvelope {
    metadata: EventMetadata;
}
/**
 * Triggered when a tag is deleted.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ_TAG
 * @webhook
 * @eventType wix.blog.v3.tag_deleted
 * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.TagService
 * @slug deleted
 */
declare function onTagDeleted(handler: (event: TagDeletedEnvelope) => void | Promise<void>): void;
interface TagUpdatedEnvelope {
    entity: BlogTag;
    metadata: EventMetadata;
}
/**
 * Triggered when a tag is updated.
 * @permissionScope Read Blog
 * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG
 * @permissionScope Manage Blog
 * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG
 * @permissionScope Read Draft Blog Posts
 * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS
 * @permissionId BLOG.READ_TAG
 * @webhook
 * @eventType wix.blog.v3.tag_updated
 * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.TagService
 * @slug updated
 */
declare function onTagUpdated(handler: (event: TagUpdatedEnvelope) => void | Promise<void>): void;
type TagNonNullablePaths = `_id` | `label` | `slug` | `postCount` | `publishedPostCount`;
/**
 * Creates a new tag with the provided label if a tag with the same label doesn't already exist.
 * @param label - Tag label. The label for each tag in a blog must be unique.
 * @public
 * @requiredField label
 * @permissionId BLOG.CREATE-TAG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.CreateTag
 */
declare function createTag(label: string, options?: CreateTagOptions): Promise<NonNullablePaths<CreateTagResponse, {
    [P in TagNonNullablePaths]: `tag.${P}`;
}[TagNonNullablePaths]>>;
interface CreateTagOptions {
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
    /**
     * Preferred tag slug. For example, `'tag-slug'`.
     * @maxLength 100
     */
    slug?: string | null;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
/**
 * Retrieves a tag by the provided label.
 *
 * Sub-labels can also be specified using a `/`. For example, you can have `'dessert/icecream'` and `'dessert/pie'` as two different tag labels.
 *
 * > **Note:** The full URL path following `labels/` is counted as 1 label. Adding a `/` to a label does _not_ create multiple labels. This means that `'dessert/icecream'` is a single label.
 * @param label - Tag label.
 * @public
 * @requiredField label
 * @param options - Options specifying which additional fields to return.
 * @permissionId BLOG.READ_TAG
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTagByLabel
 */
declare function getTagByLabel(label: string, options?: GetTagByLabelOptions): Promise<NonNullablePaths<GetTagByLabelResponse, {
    [P in TagNonNullablePaths]: `tag.${P}`;
}[TagNonNullablePaths]>>;
interface GetTagByLabelOptions {
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * If omitted, tags in all languages are returned.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
/**
 * Retrieves a tag with the provided ID.
 * @param tagId - ID of tag to retrieve.
 * @public
 * @requiredField tagId
 * @param options - Options specifying which additional fields to return.
 * @permissionId BLOG.READ_TAG
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved tag.
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTag
 */
declare function getTag(tagId: string, options?: GetTagOptions): Promise<NonNullablePaths<BlogTag, TagNonNullablePaths>>;
interface GetTagOptions {
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
/**
 * Retrieves a tag with the provided slug.
 *
 * The `slug` is the end of a tag's URL that refers to a specific tag.
 * For example, if a tag's URL is `https://example.com/blog/tag/{my-tag-slug}`,
 * the slug is `my-tag-slug`. The `slug` is case-sensitive and derived from the tag's `label`.
 * @param slug - Slug of the tag to retrieve.
 * @public
 * @requiredField slug
 * @param options - Options specifying which additional fields to return.
 * @permissionId BLOG.READ_TAG
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.GetTagBySlug
 */
declare function getTagBySlug(slug: string, options?: GetTagBySlugOptions): Promise<NonNullablePaths<GetTagBySlugResponse, {
    [P in TagNonNullablePaths]: `tag.${P}`;
}[TagNonNullablePaths]>>;
interface GetTagBySlugOptions {
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
    /**
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * Language of the tag to retrieve.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
}
/**
 * Creates a query to retrieve a list of tags.
 *
 *
 * The `queryTags()` function builds a query to retrieve a list of up to 4,000 tags per language, and returns a `TagsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `TagsQueryBuilder` functions onto the query. `TagsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTags()` returns.
 *
 * `queryTags()` runs with these `TagsQueryBuilder` defaults that can be overridden:
 * - `limit(50)`
 * - `ascending('_id')`
 *
 * The following `TagsQueryBuilder` functions are supported for `queryTags()`. For a full description of the Tags object, see the object returned for the `items` property in `TagsQueryResult`.
 * @public
 * @param options - Options specifying which fields to return.
 * @permissionId BLOG.READ_TAG
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.QueryTags
 */
declare function queryTags(options?: QueryTagsOptions): TagsQueryBuilder;
interface QueryTagsOptions {
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[] | undefined;
}
interface QueryOffsetResult {
    currentPage: number | undefined;
    totalPages: number | undefined;
    totalCount: number | undefined;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface TagsQueryResult extends QueryOffsetResult {
    items: BlogTag[];
    query: TagsQueryBuilder;
    next: () => Promise<TagsQueryResult>;
    prev: () => Promise<TagsQueryResult>;
}
interface TagsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | 'label' | 'slug' | 'postCount' | 'publishedPostCount' | 'translationId' | 'language', value: any) => TagsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | 'label' | 'slug' | 'postCount' | 'publishedPostCount' | 'translationId' | 'language', value: any) => TagsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: 'label' | 'slug' | 'postCount' | 'publishedPostCount', value: any) => TagsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: 'label' | 'slug' | 'postCount' | 'publishedPostCount', value: any) => TagsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: 'label' | 'slug' | 'postCount' | 'publishedPostCount', value: any) => TagsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: 'label' | 'slug' | 'postCount' | 'publishedPostCount', value: any) => TagsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: 'label' | 'slug', value: string) => TagsQueryBuilder;
    in: (propertyName: '_id' | 'label' | 'slug' | 'postCount' | 'publishedPostCount' | 'translationId' | 'language', value: any) => TagsQueryBuilder;
    exists: (propertyName: 'label' | 'slug' | 'translationId' | 'language', value: boolean) => TagsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | 'label' | 'slug' | 'postCount' | 'publishedPostCount' | 'language'>) => TagsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | 'label' | 'slug' | 'postCount' | 'publishedPostCount' | 'language'>) => TagsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => TagsQueryBuilder;
    /** @param skip - Number of items to skip in the query results before returning the results. */
    skip: (skip: number) => TagsQueryBuilder;
    find: () => Promise<TagsQueryResult>;
}
/**
 * Deletes a tag. Deleting a tag removes that tag from all blog posts that contain it.
 * @param tagId - Tag ID.
 * @public
 * @requiredField tagId
 * @permissionId BLOG.DELETE_TAG
 * @applicableIdentity APP
 * @fqn com.wixpress.npm.communities.platformized.blog.TagService.DeleteTag
 */
declare function deleteTag(tagId: string): Promise<void>;

export { type ActionEvent, type ApplicationError, type BaseEventMetadata, type BlogTag, type BulkActionMetadata, type BulkCreateTagsRequest, type BulkCreateTagsResponse, type BulkDeleteTagRequest, type BulkDeleteTagResponse, type BulkTagResult, type CommonCursorPaging, type CommonPaging, type CreateTagOptions, type CreateTagRequest, type CreateTagResponse, type CursorPaging, type Cursors, type DeleteTagRequest, type DeleteTagResponse, type DomainEvent, type DomainEventBodyOneOf, type EntityCreatedEvent, type EntityDeletedEvent, type EntityUpdatedEvent, type EventMetadata, Field, type FieldWithLiterals, type GetOrCreateTagRequest, type GetOrCreateTagResponse, type GetTagByLabelOptions, type GetTagByLabelRequest, type GetTagByLabelResponse, type GetTagBySlugOptions, type GetTagBySlugRequest, type GetTagBySlugResponse, type GetTagOptions, type GetTagRequest, type GetTagResponse, type GetTagsCountByLanguageRequest, type GetTagsCountByLanguageResponse, type IdentificationData, type IdentificationDataIdOneOf, type InitialTagsCopied, type ItemMetadata, type Keyword, type ListTagsRequest, type ListTagsRequestPagingMethodOneOf, type ListTagsResponse, type MessageEnvelope, type MetaData, type Paging, type PagingMetadataV2, type PlatformQuery, type PlatformQueryPagingMethodOneOf, type QueryTagsOptions, type QueryTagsRequest, type QueryTagsResponse, type RestoreInfo, type SeoSchema, type Settings, SortOrder, type SortOrderWithLiterals, type Sorting, type Tag, type TagCreatedEnvelope, type TagDeletedEnvelope, type TagLanguageCount, type TagUpdatedEnvelope, type TagsQueryBuilder, type TagsQueryResult, type UpdateTagRequest, type UpdateTagResponse, WebhookIdentityType, type WebhookIdentityTypeWithLiterals, createTag, deleteTag, getTag, getTagByLabel, getTagBySlug, onTagCreated, onTagDeleted, onTagUpdated, queryTags };
