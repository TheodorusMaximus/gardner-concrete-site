import { CreateTagRequest as CreateTagRequest$1, CreateTagResponse as CreateTagResponse$1, GetTagByLabelRequest as GetTagByLabelRequest$1, GetTagByLabelResponse as GetTagByLabelResponse$1, GetTagRequest as GetTagRequest$1, GetTagResponse as GetTagResponse$1, GetTagBySlugRequest as GetTagBySlugRequest$1, GetTagBySlugResponse as GetTagBySlugResponse$1, QueryTagsRequest as QueryTagsRequest$1, QueryTagsResponse as QueryTagsResponse$1, DeleteTagRequest as DeleteTagRequest$1, DeleteTagResponse as DeleteTagResponse$1 } from './index.typings.mjs';
import '@wix/sdk-types';

interface BlogTag {
    /**
     * Tag ID.
     * @readonly
     * @format GUID
     */
    id?: string;
    /**
     * Tag label.
     *
     * A blog can't have two tags with the same label.
     * @maxLength 100
     */
    label?: string;
    /**
     * Part of a tag's URL that refers to a specific tag.
     *
     * For example, `'https:/example.com/tags/{my-tag-slug}'`
     * @maxLength 100
     */
    slug?: string;
    /**
     * Date the tag was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date the tag was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Number of posts with this tag. Includes unpublished draft posts.
     * @readonly
     */
    postCount?: number;
    /**
     * Tag URL.
     *
     * The `url` directs you to a page that lists every post with the specified tag.
     * @readonly
     */
    url?: PageUrl;
    /**
     * Number of published posts with this tag.
     * @readonly
     */
    publishedPostCount?: number;
    /**
     * ID of the tag's translations when [Wix Multilingual](https://support.wix.com/en/article/wix-multilingual-translating-your-blog) is installed on a site.
     *
     * All translations of a single tag share the same `translationId`.
     * @readonly
     * @format GUID
     */
    translationId?: string | null;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * @immutable
     * @format LANGUAGE_TAG
     */
    language?: string | null;
}
interface PageUrl {
    /** The base URL. For premium sites, this is the domain. For free sites, this is the site URL. For example, `mysite.wixsite.com/mysite`. */
    base?: string;
    /** The relative path for the page within the site. For example, `/product-page/a-product`. */
    path?: string;
}
declare enum Field {
    UNKNOWN = "UNKNOWN",
    /** Includes Tag URL when present. */
    URL = "URL"
}
/** @enumType */
type FieldWithLiterals = Field | 'UNKNOWN' | 'URL';
interface CreateTagRequest {
    /**
     * Tag label. The label for each tag in a blog must be unique.
     * @minLength 1
     * @maxLength 200
     */
    label: string;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
    /**
     * Preferred tag slug. For example, `'tag-slug'`.
     * @maxLength 100
     */
    slug?: string | null;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface CreateTagResponse {
    /** Created tag. */
    tag?: BlogTag;
}
interface GetTagByLabelRequest {
    /**
     * Tag label.
     * @minLength 1
     * @maxLength 100
     */
    label: string;
    /**
     * Tag language.
     *
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * If omitted, tags in all languages are returned.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface GetTagByLabelResponse {
    /** Retrieved tag. */
    tag?: BlogTag;
}
interface GetTagRequest {
    /**
     * ID of tag to retrieve.
     * @minLength 1
     * @maxLength 38
     */
    tagId: string;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface GetTagResponse {
    /** Retrieved tag. */
    tag?: BlogTag;
}
interface GetTagBySlugRequest {
    /**
     * Slug of the tag to retrieve.
     * @minLength 1
     * @maxLength 100
     */
    slug: string;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
    /**
     * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.
     * Language of the tag to retrieve.
     * @format LANGUAGE_TAG
     */
    language?: string | null;
}
interface GetTagBySlugResponse {
    /** Retrieved tag. */
    tag?: BlogTag;
}
interface QueryTagsRequest {
    /** Query options. */
    query?: PlatformQuery;
    /**
     * List of additional tag fields to include in the response. For example, use the `URL` fieldset to retrieve the url field in
     * the response in addition to the tag's base fields. Base fields don’t include any of the supported fieldset values. By default
     * only the tag's base fields are returned.
     * @maxSize 10
     */
    fieldsets?: FieldWithLiterals[];
}
interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: CommonPaging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 3
     */
    sort?: Sorting[];
}
/** @oneof */
interface PlatformQueryPagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: CommonPaging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CommonCursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrderWithLiterals;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
/** @enumType */
type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';
interface CommonPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface CommonCursorPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 2000
     */
    cursor?: string | null;
}
interface QueryTagsResponse {
    /** List of tags. */
    tags?: BlogTag[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor pointing to next page in the list of results.
     * @maxLength 2000
     */
    next?: string | null;
    /**
     * Cursor pointing to previous page in the list of results.
     * @maxLength 2000
     */
    prev?: string | null;
}
interface DeleteTagRequest {
    /**
     * Tag ID.
     * @maxLength 38
     */
    tagId: string;
}
interface DeleteTagResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createTag(): __PublicMethodMetaInfo<'POST', {}, CreateTagRequest$1, CreateTagRequest, CreateTagResponse$1, CreateTagResponse>;
declare function getTagByLabel(): __PublicMethodMetaInfo<'GET', {
    label: string;
}, GetTagByLabelRequest$1, GetTagByLabelRequest, GetTagByLabelResponse$1, GetTagByLabelResponse>;
declare function getTag(): __PublicMethodMetaInfo<'GET', {
    tagId: string;
}, GetTagRequest$1, GetTagRequest, GetTagResponse$1, GetTagResponse>;
declare function getTagBySlug(): __PublicMethodMetaInfo<'GET', {
    slug: string;
}, GetTagBySlugRequest$1, GetTagBySlugRequest, GetTagBySlugResponse$1, GetTagBySlugResponse>;
declare function queryTags(): __PublicMethodMetaInfo<'POST', {}, QueryTagsRequest$1, QueryTagsRequest, QueryTagsResponse$1, QueryTagsResponse>;
declare function deleteTag(): __PublicMethodMetaInfo<'DELETE', {
    tagId: string;
}, DeleteTagRequest$1, DeleteTagRequest, DeleteTagResponse$1, DeleteTagResponse>;

export { type __PublicMethodMetaInfo, createTag, deleteTag, getTag, getTagByLabel, getTagBySlug, queryTags };
