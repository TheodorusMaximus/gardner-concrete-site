import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { QueryPostCountStatsOptions, QueryPostCountStatsResponse, GetTotalPostsOptions, GetTotalPostsResponse, GetPostOptions, GetPostResponse, GetPostBySlugOptions, GetPostBySlugResponse, ListPostsOptions, ListPostsResponse, QueryPostsOptions, PostsQueryBuilder, GetPostMetricsResponse, PostCreatedEnvelope, PostDeletedEnvelope, PostLikedEnvelope, PostUnlikedEnvelope, PostUpdatedEnvelope } from './index.typings.js';
export { ActionEvent, Alignment, AnchorData, AppEmbedData, AppEmbedDataAppDataOneOf, AppType, AspectRatio, AudioData, Background, BackgroundBackgroundOneOf, BackgroundType, BaseEventMetadata, BlockquoteData, BlogPaging, BookingData, Border, BorderColors, BulkGetPostMetricsRequest, BulkGetPostMetricsResponse, BulkGetPostReactionsRequest, BulkGetPostReactionsResponse, BulletedListData, ButtonData, ButtonDataType, ButtonStyles, CaptionData, CardStyles, Category, CategoryTranslation, CellStyle, CodeBlockData, CollapsibleListData, ColorData, Colors, ConvertDraftJsToRichContentRequest, ConvertDraftJsToRichContentResponse, ConvertRichContentToDraftJsRequest, ConvertRichContentToDraftJsResponse, CoverMedia, CoverMediaMediaOneOf, CreateDraftPostFromTemplateRequest, CreateDraftPostFromTemplateResponse, Crop, CursorPaging, Cursors, Decoration, DecorationDataOneOf, DecorationType, Design, Dimensions, Direction, DividerData, DividerDataAlignment, DocumentStyle, DomainEvent, DomainEventBodyOneOf, DraftPost, DraftPostTranslation, EmbedData, EmbedMedia, EmbedThumbnail, EmbedVideo, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventData, EventMetadata, Field, FileData, FileSource, FileSourceDataOneOf, FocalPoint, FontSizeData, FontType, GIF, GIFData, GIFType, GalleryData, GalleryOptions, GalleryOptionsLayout, GetPostBySlugRequest, GetPostMetricsRequest, GetPostRequest, GetPostTemplatesSort, GetPostsSort, GetTemplateRequest, GetTemplateResponse, GetTotalLikesPerMemberRequest, GetTotalLikesPerMemberResponse, GetTotalPostsRequest, GetTotalPublicationsRequest, GetTotalPublicationsResponse, Gradient, HTMLData, HTMLDataDataOneOf, HeadingData, Height, IdentificationData, IdentificationDataIdOneOf, Image, ImageData, ImageDataStyles, ImageStyles, InitialExpandedItems, InitialPostsCopied, Item, ItemDataOneOf, ItemStyle, Keyword, Layout, LayoutCellData, LayoutType, LikePostRequest, LikePostResponse, LineStyle, Link, LinkData, LinkDataOneOf, LinkPreviewData, LinkPreviewDataStyles, ListDemoPostsRequest, ListDemoPostsResponse, ListPostsArchiveRequest, ListPostsArchiveResponse, ListPostsRequest, ListTemplatesRequest, ListTemplatesResponse, ListValue, MapData, MapSettings, MapType, Media, MediaMediaOneOf, MentionData, MessageEnvelope, MetaData, Metadata, Metrics, ModerationDetails, ModerationStatusStatus, Node, NodeDataOneOf, NodeStyle, NodeType, NullValue, Oembed, OldBlogMigratedEvent, Option, OptionDesign, OptionLayout, Order, OrderedListData, Orientation, Origin, PDFSettings, Paging, PagingMetadataV2, ParagraphData, PeriodPostCount, PeriodPublicationsCount, Permissions, PinPostRequest, PinPostResponse, Placement, PlatformQuery, PlatformQueryPagingMethodOneOf, PlaybackOptions, PluginContainerData, PluginContainerDataAlignment, PluginContainerDataWidth, PluginContainerDataWidthDataOneOf, Poll, PollData, PollDataLayout, PollDesign, PollLayout, PollLayoutDirection, PollLayoutType, PollSettings, Position, Post, PostCategoriesUpdated, PostCountInfo, PostCountersUpdated, PostCountersUpdatedInitiatorOneOf, PostFieldField, PostLiked, PostLikedInitiatorOneOf, PostOwnerChanged, PostTagsUpdated, PostTranslation, PostUnliked, PostUnlikedInitiatorOneOf, PostsQueryResult, PricingData, QueryPostCountStatsRequest, QueryPostsRequest, QueryPostsResponse, QueryPublicationsCountStatsRequest, QueryPublicationsCountStatsRequestOrder, QueryPublicationsCountStatsResponse, Reactions, Rel, Resizing, RestoreInfo, RibbonStyles, RichContent, ScheduledPostPublished, SeoSchema, Settings, SortOrder, Sorting, Source, Spoiler, SpoilerData, Status, Styles, StylesBorder, StylesPosition, TableCellData, TableData, Tag, Target, TextAlignment, TextData, TextNodeStyle, TextStyle, Thumbnails, ThumbnailsAlignment, Type, UnlikePostRequest, UnlikePostResponse, UnpinPostRequest, UnpinPostResponse, V1Media, VerticalAlignment, Video, VideoData, VideoResolution, ViewMode, ViewPostRequest, ViewPostResponse, ViewRole, VoteRole, WebhookIdentityType, Width, WidthType, WixMedia } from './index.typings.js';

type PostNonNullablePaths = `_id` | `title` | `excerpt` | `slug` | `featured` | `pinned` | `categoryIds` | `coverMedia.enabled` | `coverMedia.displayed` | `coverMedia.custom` | `memberId` | `hashtags` | `commentingEnabled` | `minutesToRead` | `tagIds` | `relatedPostIds` | `pricingPlanIds` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain` | `preview` | `moderationDetails.submittedBy` | `moderationDetails.status` | `media.embedMedia.thumbnail.url` | `media.embedMedia.thumbnail.width` | `media.embedMedia.thumbnail.height` | `media.embedMedia.video.url` | `media.embedMedia.video.width` | `media.embedMedia.video.height` | `media.displayed` | `media.custom` | `hasUnpublishedChanges`;
declare function queryPostCountStats$1(httpClient: HttpClient): QueryPostCountStatsSignature;
interface QueryPostCountStatsSignature {
    /**
     * Retrieves the number of published posts per month within a specified time range.
     *
     *
     * The `queryPostCountStats()` function returns a Promise that resolves to the number of posts per month within the specified time range.
     *
     * You can set the time range using the `rangeStart` and `months` properties. The time range always starts on the 1st day of the month set in `rangeStart` and includes the number of `months` following `rangeStart`. For example, if `rangeStart` is set to `'2022-03-13'` and `months` is set to `4`, the time range will be from `'2022-03-01'` until `'2022-06-30'`. The time range ends on the last day of the month.
     *
     * >**Note:** If there are no published posts in a specific month, that month is not included in the response. For example, let's say a blog has `0` posts dated in February 2022. If `rangeStart` is set to `'2022-01-01'` and `months` is set to `3`, the response includes `postCount` values for January and March, but not February.
     * @param - Options specifying time frame, sort, and filter.
     * @returns Get Blog Post Count Stats response
     */
    (options?: QueryPostCountStatsOptions): Promise<NonNullablePaths<QueryPostCountStatsResponse, `stats` | `stats.${number}.postCount`>>;
}
declare function getTotalPosts$1(httpClient: HttpClient): GetTotalPostsSignature;
interface GetTotalPostsSignature {
    /**
     * Retrieves the total amount of published posts of the blog.
     * @param - Language Options.
     */
    (options?: GetTotalPostsOptions): Promise<NonNullablePaths<GetTotalPostsResponse, `total`>>;
}
declare function getPost$1(httpClient: HttpClient): GetPostSignature;
interface GetPostSignature {
    /**
     * Retrieves a post by the specified ID.
     * @param - Post ID.
     * @param - Options specifying which fields to return.
     */
    (postId: string, options?: GetPostOptions): Promise<NonNullablePaths<GetPostResponse, {
        [P in PostNonNullablePaths]: `post.${P}`;
    }[PostNonNullablePaths]>>;
}
declare function getPostBySlug$1(httpClient: HttpClient): GetPostBySlugSignature;
interface GetPostBySlugSignature {
    /**
     * Retrieves a post with the provided slug.
     *
     * The slug is the end of a post's URL that refers to a specific post.
     * For example, if a post's URL is `https:/example.com/blog/post/my-post-slug`,
     * the slug is `my-post-slug`. The slug is case-sensitive, and is generally derived from the post title,
     * unless specified otherwise.
     * @param - Slug of the post to retrieve.
     * @param - Options specifying which fields to return.
     */
    (slug: string, options?: GetPostBySlugOptions): Promise<NonNullablePaths<GetPostBySlugResponse, {
        [P in PostNonNullablePaths]: `post.${P}`;
    }[PostNonNullablePaths]>>;
}
declare function listPosts$1(httpClient: HttpClient): ListPostsSignature;
interface ListPostsSignature {
    /**
     * Retrieves a list of up to 100 published posts per request.
     *
     * List Posts runs with these defaults, which you can override:
     * - `firstPublishedDate` is sorted in descending order, with pinned posts first.
     * - `paging.limit` is `50`.
     * - `paging.offset` is `0`.
     * @param - Sort, filter, and paging options.
     */
    (options?: ListPostsOptions): Promise<NonNullablePaths<ListPostsResponse, {
        [P in PostNonNullablePaths]: `posts.${number}.${P}`;
    }[PostNonNullablePaths] | `metaData.count` | `metaData.offset` | `metaData.total`>>;
}
declare function queryPosts$1(httpClient: HttpClient): QueryPostsSignature;
interface QueryPostsSignature {
    /**
     * Creates a query to retrieve a list of posts.
     *
     *
     * The `queryPosts()` function builds a query to retrieve a list of up to 100 posts, and returns a `PostsQueryBuilder` object.
     *
     * The returned object contains the query definition which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `PostsQueryBuilder` functions onto the query. `PostsQueryBuilder` functions enable you to sort, filter, and control the results that `queryPosts()` returns.
     *
     * `queryPosts()` runs with these `PostsQueryBuilder` defaults that you can override:
     * + `limit(50)`
     * + `descending('firstPublishedDate')`
     *
     * Note that the default limit is `'50'`, but the max limit is `'100'`.
     *
     * To learn how to query posts, refer to the table below.
     *
     * The following `PostsQueryBuilder` functions are supported for the `queryPosts()` function. For a full description of the Posts object, see the object returned for the `items` property in `PostsQueryResult`.
     * @param - Options specifying which fields to return.
     */
    (options?: QueryPostsOptions): PostsQueryBuilder;
}
declare function getPostMetrics$1(httpClient: HttpClient): GetPostMetricsSignature;
interface GetPostMetricsSignature {
    /**
     * Retrieves a post's metrics.
     *
     * A post's metrics include the comments, likes, and views the post receives.
     * @param - Post ID to retrieve metrics for.
     */
    (postId: string): Promise<NonNullablePaths<GetPostMetricsResponse, `metrics.comments` | `metrics.likes` | `metrics.views`>>;
}
declare const onPostCreated$1: EventDefinition<PostCreatedEnvelope, "wix.blog.v3.post_created">;
declare const onPostDeleted$1: EventDefinition<PostDeletedEnvelope, "wix.blog.v3.post_deleted">;
declare const onPostLiked$1: EventDefinition<PostLikedEnvelope, "wix.blog.v3.post_liked">;
declare const onPostUnliked$1: EventDefinition<PostUnlikedEnvelope, "wix.blog.v3.post_unliked">;
declare const onPostUpdated$1: EventDefinition<PostUpdatedEnvelope, "wix.blog.v3.post_updated">;

declare const queryPostCountStats: MaybeContext<BuildRESTFunction<typeof queryPostCountStats$1> & typeof queryPostCountStats$1>;
declare const getTotalPosts: MaybeContext<BuildRESTFunction<typeof getTotalPosts$1> & typeof getTotalPosts$1>;
declare const getPost: MaybeContext<BuildRESTFunction<typeof getPost$1> & typeof getPost$1>;
declare const getPostBySlug: MaybeContext<BuildRESTFunction<typeof getPostBySlug$1> & typeof getPostBySlug$1>;
declare const listPosts: MaybeContext<BuildRESTFunction<typeof listPosts$1> & typeof listPosts$1>;
declare const queryPosts: MaybeContext<BuildRESTFunction<typeof queryPosts$1> & typeof queryPosts$1>;
declare const getPostMetrics: MaybeContext<BuildRESTFunction<typeof getPostMetrics$1> & typeof getPostMetrics$1>;
/**
 * Triggered when a post is created.
 */
declare const onPostCreated: BuildEventDefinition<typeof onPostCreated$1>;
/**
 * Triggered when a post is deleted.
 */
declare const onPostDeleted: BuildEventDefinition<typeof onPostDeleted$1>;
/**
 * Triggered when a post is liked.
 */
declare const onPostLiked: BuildEventDefinition<typeof onPostLiked$1>;
/**
 * Triggered when a post is unliked.
 */
declare const onPostUnliked: BuildEventDefinition<typeof onPostUnliked$1>;
/**
 * Triggered when a post is updated.
 */
declare const onPostUpdated: BuildEventDefinition<typeof onPostUpdated$1>;

export { GetPostBySlugOptions, GetPostBySlugResponse, GetPostMetricsResponse, GetPostOptions, GetPostResponse, GetTotalPostsOptions, GetTotalPostsResponse, ListPostsOptions, ListPostsResponse, PostCreatedEnvelope, PostDeletedEnvelope, PostLikedEnvelope, PostUnlikedEnvelope, PostUpdatedEnvelope, PostsQueryBuilder, QueryPostCountStatsOptions, QueryPostCountStatsResponse, QueryPostsOptions, getPost, getPostBySlug, getPostMetrics, getTotalPosts, listPosts, onPostCreated, onPostDeleted, onPostLiked, onPostUnliked, onPostUpdated, queryPostCountStats, queryPosts };
