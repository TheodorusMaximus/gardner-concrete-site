// src/blog-v3-post-posts.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/blog-v3-post-posts.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTBytesToSDKBytes } from "@wix/sdk-runtime/transformations/bytes";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressNpmCommunitiesPlatformizedBlogV3PostServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/communities-blog-node-api",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v2/stats",
        destPath: "/v2/stats"
      }
    ],
    "apps._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v2/stats",
        destPath: "/v2/stats"
      }
    ],
    _: [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api/_api/blogs/this",
        destPath: "/_api/blogs/this"
      },
      {
        srcPath: "/_api/communities-blog-node-api/_api/categories",
        destPath: "/_api/categories"
      },
      {
        srcPath: "/_api/communities-blog-node-api/_api/site-properties",
        destPath: "/_api/site-properties"
      },
      {
        srcPath: "/_api/communities-blog-node-api/_api/posts/content",
        destPath: "/_api/posts/content"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v2/stats",
        destPath: "/v2/stats"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "*.pub.wix-code.com": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "social-blog._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/blog/v2",
        destPath: "/v2"
      },
      {
        srcPath: "/blog/v3",
        destPath: "/v3"
      },
      {
        srcPath: "/v2/stats",
        destPath: "/v2/stats"
      },
      {
        srcPath: "/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/blog/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/blog/v2/stats",
        destPath: "/v2/stats"
      },
      {
        srcPath: "/_api/v3/posts",
        destPath: "/v3/posts"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function resolveComWixpressNpmCommunitiesPlatformizedBlogBlogStatsServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/communities-blog-node-api",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v2/stats",
        destPath: "/v2/stats"
      }
    ],
    "apps._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v2/stats",
        destPath: "/v2/stats"
      }
    ],
    _: [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api/_api/blogs/this",
        destPath: "/_api/blogs/this"
      },
      {
        srcPath: "/_api/communities-blog-node-api/_api/categories",
        destPath: "/_api/categories"
      },
      {
        srcPath: "/_api/communities-blog-node-api/_api/site-properties",
        destPath: "/_api/site-properties"
      },
      {
        srcPath: "/_api/communities-blog-node-api/_api/posts/content",
        destPath: "/_api/posts/content"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v2/stats",
        destPath: "/v2/stats"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "*.pub.wix-code.com": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      },
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "social-blog._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/blog/v2",
        destPath: "/v2"
      },
      {
        srcPath: "/blog/v3",
        destPath: "/v3"
      },
      {
        srcPath: "/v2/stats",
        destPath: "/v2/stats"
      },
      {
        srcPath: "/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/blog/v3/posts",
        destPath: "/v3/posts"
      },
      {
        srcPath: "/blog/v2/stats",
        destPath: "/v2/stats"
      },
      {
        srcPath: "/_api/v3/posts",
        destPath: "/v3/posts"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_blog_posts";
function queryPostCountStats(payload) {
  function __queryPostCountStats({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "rangeStart" }, { path: "rangeEnd" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.blog.v3.post",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.BlogStatsService.QueryPostCountStats",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogBlogStatsServiceUrl({
        protoPath: "/v2/stats/post/count",
        data: serializedData,
        host
      }),
      params: toURLSearchParams(serializedData),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "stats.periodStart" }]
        }
      ])
    };
    return metadata;
  }
  return __queryPostCountStats;
}
function getTotalPosts(payload) {
  function __getTotalPosts({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.post",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.BlogStatsService.GetTotalPosts",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogBlogStatsServiceUrl({
        protoPath: "/v2/stats/posts/total",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getTotalPosts;
}
function getPost(payload) {
  function __getPost({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.post",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPost",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3PostServiceUrl({
        protoPath: "/v3/posts/{postId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "post.firstPublishedDate" },
            { path: "post.lastPublishedDate" },
            { path: "post.coverMedia.image.urlExpirationDate" },
            { path: "post.coverMedia.video.thumbnail.urlExpirationDate" },
            { path: "post.heroImage.urlExpirationDate" },
            { path: "post.richContent.metadata.createdTimestamp" },
            { path: "post.richContent.metadata.updatedTimestamp" },
            { path: "post.moderationDetails.submittedDate" },
            { path: "post.moderationDetails.moderationDate" },
            { path: "post.media.wixMedia.image.urlExpirationDate" },
            { path: "post.media.wixMedia.videoV2.urlExpirationDate" },
            {
              path: "post.media.wixMedia.videoV2.resolutions.urlExpirationDate"
            },
            {
              path: "post.media.wixMedia.videoV2.resolutions.poster.urlExpirationDate"
            },
            { path: "post.media.wixMedia.videoV2.posters.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [{ path: "post.richContentCompressed" }]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "post.coverMedia.image.focalPoint.x" },
            { path: "post.coverMedia.image.focalPoint.y" },
            { path: "post.coverMedia.video.thumbnail.focalPoint.x" },
            { path: "post.coverMedia.video.thumbnail.focalPoint.y" },
            { path: "post.heroImage.focalPoint.x" },
            { path: "post.heroImage.focalPoint.y" },
            { path: "post.media.wixMedia.image.focalPoint.x" },
            { path: "post.media.wixMedia.image.focalPoint.y" },
            {
              path: "post.media.wixMedia.videoV2.resolutions.poster.focalPoint.x"
            },
            {
              path: "post.media.wixMedia.videoV2.resolutions.poster.focalPoint.y"
            },
            { path: "post.media.wixMedia.videoV2.posters.focalPoint.x" },
            { path: "post.media.wixMedia.videoV2.posters.focalPoint.y" },
            { path: "post.metrics.averageRating" },
            {
              path: "post.richContent.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "post.richContent.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "post.richContent.nodes.galleryData.items.video.thumbnail.duration"
            },
            { path: "post.richContent.nodes.galleryData.options.item.ratio" },
            { path: "post.richContent.nodes.imageData.image.duration" },
            { path: "post.richContent.nodes.mapData.mapSettings.lat" },
            { path: "post.richContent.nodes.mapData.mapSettings.lng" },
            { path: "post.richContent.nodes.pollData.poll.image.duration" },
            {
              path: "post.richContent.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "post.richContent.nodes.pollData.design.poll.background.image.duration"
            },
            { path: "post.richContent.nodes.appEmbedData.image.duration" },
            { path: "post.richContent.nodes.videoData.video.duration" },
            { path: "post.richContent.nodes.videoData.thumbnail.duration" },
            { path: "post.richContent.nodes.audioData.audio.duration" },
            { path: "post.richContent.nodes.audioData.coverImage.duration" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getPost;
}
function getPostBySlug(payload) {
  function __getPostBySlug({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.post",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPostBySlug",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3PostServiceUrl({
        protoPath: "/v3/posts/slugs/{slug}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "post.firstPublishedDate" },
            { path: "post.lastPublishedDate" },
            { path: "post.coverMedia.image.urlExpirationDate" },
            { path: "post.coverMedia.video.thumbnail.urlExpirationDate" },
            { path: "post.heroImage.urlExpirationDate" },
            { path: "post.richContent.metadata.createdTimestamp" },
            { path: "post.richContent.metadata.updatedTimestamp" },
            { path: "post.moderationDetails.submittedDate" },
            { path: "post.moderationDetails.moderationDate" },
            { path: "post.media.wixMedia.image.urlExpirationDate" },
            { path: "post.media.wixMedia.videoV2.urlExpirationDate" },
            {
              path: "post.media.wixMedia.videoV2.resolutions.urlExpirationDate"
            },
            {
              path: "post.media.wixMedia.videoV2.resolutions.poster.urlExpirationDate"
            },
            { path: "post.media.wixMedia.videoV2.posters.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [{ path: "post.richContentCompressed" }]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "post.coverMedia.image.focalPoint.x" },
            { path: "post.coverMedia.image.focalPoint.y" },
            { path: "post.coverMedia.video.thumbnail.focalPoint.x" },
            { path: "post.coverMedia.video.thumbnail.focalPoint.y" },
            { path: "post.heroImage.focalPoint.x" },
            { path: "post.heroImage.focalPoint.y" },
            { path: "post.media.wixMedia.image.focalPoint.x" },
            { path: "post.media.wixMedia.image.focalPoint.y" },
            {
              path: "post.media.wixMedia.videoV2.resolutions.poster.focalPoint.x"
            },
            {
              path: "post.media.wixMedia.videoV2.resolutions.poster.focalPoint.y"
            },
            { path: "post.media.wixMedia.videoV2.posters.focalPoint.x" },
            { path: "post.media.wixMedia.videoV2.posters.focalPoint.y" },
            { path: "post.metrics.averageRating" },
            {
              path: "post.richContent.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "post.richContent.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "post.richContent.nodes.galleryData.items.video.thumbnail.duration"
            },
            { path: "post.richContent.nodes.galleryData.options.item.ratio" },
            { path: "post.richContent.nodes.imageData.image.duration" },
            { path: "post.richContent.nodes.mapData.mapSettings.lat" },
            { path: "post.richContent.nodes.mapData.mapSettings.lng" },
            { path: "post.richContent.nodes.pollData.poll.image.duration" },
            {
              path: "post.richContent.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "post.richContent.nodes.pollData.design.poll.background.image.duration"
            },
            { path: "post.richContent.nodes.appEmbedData.image.duration" },
            { path: "post.richContent.nodes.videoData.video.duration" },
            { path: "post.richContent.nodes.videoData.thumbnail.duration" },
            { path: "post.richContent.nodes.audioData.audio.duration" },
            { path: "post.richContent.nodes.audioData.coverImage.duration" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getPostBySlug;
}
function listPosts(payload) {
  function __listPosts({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.post",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.PostService.ListPosts",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3PostServiceUrl({
        protoPath: "/v3/posts",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "posts.firstPublishedDate" },
            { path: "posts.lastPublishedDate" },
            { path: "posts.coverMedia.image.urlExpirationDate" },
            { path: "posts.coverMedia.video.thumbnail.urlExpirationDate" },
            { path: "posts.heroImage.urlExpirationDate" },
            { path: "posts.richContent.metadata.createdTimestamp" },
            { path: "posts.richContent.metadata.updatedTimestamp" },
            { path: "posts.moderationDetails.submittedDate" },
            { path: "posts.moderationDetails.moderationDate" },
            { path: "posts.media.wixMedia.image.urlExpirationDate" },
            { path: "posts.media.wixMedia.videoV2.urlExpirationDate" },
            {
              path: "posts.media.wixMedia.videoV2.resolutions.urlExpirationDate"
            },
            {
              path: "posts.media.wixMedia.videoV2.resolutions.poster.urlExpirationDate"
            },
            {
              path: "posts.media.wixMedia.videoV2.posters.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [{ path: "posts.richContentCompressed" }]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "posts.coverMedia.image.focalPoint.x" },
            { path: "posts.coverMedia.image.focalPoint.y" },
            { path: "posts.coverMedia.video.thumbnail.focalPoint.x" },
            { path: "posts.coverMedia.video.thumbnail.focalPoint.y" },
            { path: "posts.heroImage.focalPoint.x" },
            { path: "posts.heroImage.focalPoint.y" },
            { path: "posts.media.wixMedia.image.focalPoint.x" },
            { path: "posts.media.wixMedia.image.focalPoint.y" },
            {
              path: "posts.media.wixMedia.videoV2.resolutions.poster.focalPoint.x"
            },
            {
              path: "posts.media.wixMedia.videoV2.resolutions.poster.focalPoint.y"
            },
            { path: "posts.media.wixMedia.videoV2.posters.focalPoint.x" },
            { path: "posts.media.wixMedia.videoV2.posters.focalPoint.y" },
            { path: "posts.metrics.averageRating" },
            {
              path: "posts.richContent.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "posts.richContent.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "posts.richContent.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "posts.richContent.nodes.galleryData.options.item.ratio"
            },
            { path: "posts.richContent.nodes.imageData.image.duration" },
            { path: "posts.richContent.nodes.mapData.mapSettings.lat" },
            { path: "posts.richContent.nodes.mapData.mapSettings.lng" },
            { path: "posts.richContent.nodes.pollData.poll.image.duration" },
            {
              path: "posts.richContent.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "posts.richContent.nodes.pollData.design.poll.background.image.duration"
            },
            { path: "posts.richContent.nodes.appEmbedData.image.duration" },
            { path: "posts.richContent.nodes.videoData.video.duration" },
            { path: "posts.richContent.nodes.videoData.thumbnail.duration" },
            { path: "posts.richContent.nodes.audioData.audio.duration" },
            { path: "posts.richContent.nodes.audioData.coverImage.duration" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listPosts;
}
function queryPosts(payload) {
  function __queryPosts({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.post",
      method: "POST",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.PostService.QueryPosts",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3PostServiceUrl({
        protoPath: "/v3/posts/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "posts.firstPublishedDate" },
            { path: "posts.lastPublishedDate" },
            { path: "posts.coverMedia.image.urlExpirationDate" },
            { path: "posts.coverMedia.video.thumbnail.urlExpirationDate" },
            { path: "posts.heroImage.urlExpirationDate" },
            { path: "posts.richContent.metadata.createdTimestamp" },
            { path: "posts.richContent.metadata.updatedTimestamp" },
            { path: "posts.moderationDetails.submittedDate" },
            { path: "posts.moderationDetails.moderationDate" },
            { path: "posts.media.wixMedia.image.urlExpirationDate" },
            { path: "posts.media.wixMedia.videoV2.urlExpirationDate" },
            {
              path: "posts.media.wixMedia.videoV2.resolutions.urlExpirationDate"
            },
            {
              path: "posts.media.wixMedia.videoV2.resolutions.poster.urlExpirationDate"
            },
            {
              path: "posts.media.wixMedia.videoV2.posters.urlExpirationDate"
            }
          ]
        },
        {
          transformFn: transformRESTBytesToSDKBytes,
          paths: [{ path: "posts.richContentCompressed" }]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "posts.coverMedia.image.focalPoint.x" },
            { path: "posts.coverMedia.image.focalPoint.y" },
            { path: "posts.coverMedia.video.thumbnail.focalPoint.x" },
            { path: "posts.coverMedia.video.thumbnail.focalPoint.y" },
            { path: "posts.heroImage.focalPoint.x" },
            { path: "posts.heroImage.focalPoint.y" },
            { path: "posts.media.wixMedia.image.focalPoint.x" },
            { path: "posts.media.wixMedia.image.focalPoint.y" },
            {
              path: "posts.media.wixMedia.videoV2.resolutions.poster.focalPoint.x"
            },
            {
              path: "posts.media.wixMedia.videoV2.resolutions.poster.focalPoint.y"
            },
            { path: "posts.media.wixMedia.videoV2.posters.focalPoint.x" },
            { path: "posts.media.wixMedia.videoV2.posters.focalPoint.y" },
            { path: "posts.metrics.averageRating" },
            {
              path: "posts.richContent.nodes.galleryData.items.image.media.duration"
            },
            {
              path: "posts.richContent.nodes.galleryData.items.video.media.duration"
            },
            {
              path: "posts.richContent.nodes.galleryData.items.video.thumbnail.duration"
            },
            {
              path: "posts.richContent.nodes.galleryData.options.item.ratio"
            },
            { path: "posts.richContent.nodes.imageData.image.duration" },
            { path: "posts.richContent.nodes.mapData.mapSettings.lat" },
            { path: "posts.richContent.nodes.mapData.mapSettings.lng" },
            { path: "posts.richContent.nodes.pollData.poll.image.duration" },
            {
              path: "posts.richContent.nodes.pollData.poll.options.image.duration"
            },
            {
              path: "posts.richContent.nodes.pollData.design.poll.background.image.duration"
            },
            { path: "posts.richContent.nodes.appEmbedData.image.duration" },
            { path: "posts.richContent.nodes.videoData.video.duration" },
            { path: "posts.richContent.nodes.videoData.thumbnail.duration" },
            { path: "posts.richContent.nodes.audioData.audio.duration" },
            { path: "posts.richContent.nodes.audioData.coverImage.duration" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryPosts;
}
function getPostMetrics(payload) {
  function __getPostMetrics({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.post",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.PostService.GetPostMetrics",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3PostServiceUrl({
        protoPath: "/v3/posts/{postId}/metrics",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [{ path: "metrics.averageRating" }]
        }
      ])
    };
    return metadata;
  }
  return __getPostMetrics;
}

// src/blog-v3-post-posts.universal.ts
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformRESTVideoV2ToSDKVideoV2 } from "@wix/sdk-runtime/transformations/video-v2";
import { transformRESTVideoToSDKVideo } from "@wix/sdk-runtime/transformations/video";
import { transformRESTPageURLToSDKPageURL } from "@wix/sdk-runtime/transformations/page-url";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var NodeType = /* @__PURE__ */ ((NodeType2) => {
  NodeType2["PARAGRAPH"] = "PARAGRAPH";
  NodeType2["TEXT"] = "TEXT";
  NodeType2["HEADING"] = "HEADING";
  NodeType2["BULLETED_LIST"] = "BULLETED_LIST";
  NodeType2["ORDERED_LIST"] = "ORDERED_LIST";
  NodeType2["LIST_ITEM"] = "LIST_ITEM";
  NodeType2["BLOCKQUOTE"] = "BLOCKQUOTE";
  NodeType2["CODE_BLOCK"] = "CODE_BLOCK";
  NodeType2["VIDEO"] = "VIDEO";
  NodeType2["DIVIDER"] = "DIVIDER";
  NodeType2["FILE"] = "FILE";
  NodeType2["GALLERY"] = "GALLERY";
  NodeType2["GIF"] = "GIF";
  NodeType2["HTML"] = "HTML";
  NodeType2["IMAGE"] = "IMAGE";
  NodeType2["LINK_PREVIEW"] = "LINK_PREVIEW";
  NodeType2["MAP"] = "MAP";
  NodeType2["POLL"] = "POLL";
  NodeType2["APP_EMBED"] = "APP_EMBED";
  NodeType2["BUTTON"] = "BUTTON";
  NodeType2["COLLAPSIBLE_LIST"] = "COLLAPSIBLE_LIST";
  NodeType2["TABLE"] = "TABLE";
  NodeType2["EMBED"] = "EMBED";
  NodeType2["COLLAPSIBLE_ITEM"] = "COLLAPSIBLE_ITEM";
  NodeType2["COLLAPSIBLE_ITEM_TITLE"] = "COLLAPSIBLE_ITEM_TITLE";
  NodeType2["COLLAPSIBLE_ITEM_BODY"] = "COLLAPSIBLE_ITEM_BODY";
  NodeType2["TABLE_CELL"] = "TABLE_CELL";
  NodeType2["TABLE_ROW"] = "TABLE_ROW";
  NodeType2["EXTERNAL"] = "EXTERNAL";
  NodeType2["AUDIO"] = "AUDIO";
  NodeType2["CAPTION"] = "CAPTION";
  NodeType2["LAYOUT"] = "LAYOUT";
  NodeType2["LAYOUT_CELL"] = "LAYOUT_CELL";
  return NodeType2;
})(NodeType || {});
var WidthType = /* @__PURE__ */ ((WidthType2) => {
  WidthType2["CONTENT"] = "CONTENT";
  WidthType2["SMALL"] = "SMALL";
  WidthType2["ORIGINAL"] = "ORIGINAL";
  WidthType2["FULL_WIDTH"] = "FULL_WIDTH";
  return WidthType2;
})(WidthType || {});
var PluginContainerDataAlignment = /* @__PURE__ */ ((PluginContainerDataAlignment2) => {
  PluginContainerDataAlignment2["CENTER"] = "CENTER";
  PluginContainerDataAlignment2["LEFT"] = "LEFT";
  PluginContainerDataAlignment2["RIGHT"] = "RIGHT";
  return PluginContainerDataAlignment2;
})(PluginContainerDataAlignment || {});
var ButtonDataType = /* @__PURE__ */ ((ButtonDataType2) => {
  ButtonDataType2["LINK"] = "LINK";
  ButtonDataType2["ACTION"] = "ACTION";
  return ButtonDataType2;
})(ButtonDataType || {});
var Target = /* @__PURE__ */ ((Target2) => {
  Target2["SELF"] = "SELF";
  Target2["BLANK"] = "BLANK";
  Target2["PARENT"] = "PARENT";
  Target2["TOP"] = "TOP";
  return Target2;
})(Target || {});
var TextAlignment = /* @__PURE__ */ ((TextAlignment2) => {
  TextAlignment2["AUTO"] = "AUTO";
  TextAlignment2["LEFT"] = "LEFT";
  TextAlignment2["RIGHT"] = "RIGHT";
  TextAlignment2["CENTER"] = "CENTER";
  TextAlignment2["JUSTIFY"] = "JUSTIFY";
  return TextAlignment2;
})(TextAlignment || {});
var LineStyle = /* @__PURE__ */ ((LineStyle2) => {
  LineStyle2["SINGLE"] = "SINGLE";
  LineStyle2["DOUBLE"] = "DOUBLE";
  LineStyle2["DASHED"] = "DASHED";
  LineStyle2["DOTTED"] = "DOTTED";
  return LineStyle2;
})(LineStyle || {});
var Width = /* @__PURE__ */ ((Width2) => {
  Width2["LARGE"] = "LARGE";
  Width2["MEDIUM"] = "MEDIUM";
  Width2["SMALL"] = "SMALL";
  return Width2;
})(Width || {});
var DividerDataAlignment = /* @__PURE__ */ ((DividerDataAlignment2) => {
  DividerDataAlignment2["CENTER"] = "CENTER";
  DividerDataAlignment2["LEFT"] = "LEFT";
  DividerDataAlignment2["RIGHT"] = "RIGHT";
  return DividerDataAlignment2;
})(DividerDataAlignment || {});
var ViewMode = /* @__PURE__ */ ((ViewMode2) => {
  ViewMode2["NONE"] = "NONE";
  ViewMode2["FULL"] = "FULL";
  ViewMode2["MINI"] = "MINI";
  return ViewMode2;
})(ViewMode || {});
var LayoutType = /* @__PURE__ */ ((LayoutType2) => {
  LayoutType2["COLLAGE"] = "COLLAGE";
  LayoutType2["MASONRY"] = "MASONRY";
  LayoutType2["GRID"] = "GRID";
  LayoutType2["THUMBNAIL"] = "THUMBNAIL";
  LayoutType2["SLIDER"] = "SLIDER";
  LayoutType2["SLIDESHOW"] = "SLIDESHOW";
  LayoutType2["PANORAMA"] = "PANORAMA";
  LayoutType2["COLUMN"] = "COLUMN";
  LayoutType2["MAGIC"] = "MAGIC";
  LayoutType2["FULLSIZE"] = "FULLSIZE";
  return LayoutType2;
})(LayoutType || {});
var Orientation = /* @__PURE__ */ ((Orientation2) => {
  Orientation2["ROWS"] = "ROWS";
  Orientation2["COLUMNS"] = "COLUMNS";
  return Orientation2;
})(Orientation || {});
var Crop = /* @__PURE__ */ ((Crop2) => {
  Crop2["FILL"] = "FILL";
  Crop2["FIT"] = "FIT";
  return Crop2;
})(Crop || {});
var ThumbnailsAlignment = /* @__PURE__ */ ((ThumbnailsAlignment2) => {
  ThumbnailsAlignment2["TOP"] = "TOP";
  ThumbnailsAlignment2["RIGHT"] = "RIGHT";
  ThumbnailsAlignment2["BOTTOM"] = "BOTTOM";
  ThumbnailsAlignment2["LEFT"] = "LEFT";
  ThumbnailsAlignment2["NONE"] = "NONE";
  return ThumbnailsAlignment2;
})(ThumbnailsAlignment || {});
var GIFType = /* @__PURE__ */ ((GIFType2) => {
  GIFType2["GIF"] = "GIF";
  GIFType2["STICKER"] = "STICKER";
  return GIFType2;
})(GIFType || {});
var Source = /* @__PURE__ */ ((Source2) => {
  Source2["HTML"] = "HTML";
  Source2["ADSENSE"] = "ADSENSE";
  return Source2;
})(Source || {});
var StylesPosition = /* @__PURE__ */ ((StylesPosition2) => {
  StylesPosition2["START"] = "START";
  StylesPosition2["END"] = "END";
  StylesPosition2["TOP"] = "TOP";
  StylesPosition2["HIDDEN"] = "HIDDEN";
  return StylesPosition2;
})(StylesPosition || {});
var MapType = /* @__PURE__ */ ((MapType2) => {
  MapType2["ROADMAP"] = "ROADMAP";
  MapType2["SATELITE"] = "SATELITE";
  MapType2["HYBRID"] = "HYBRID";
  MapType2["TERRAIN"] = "TERRAIN";
  return MapType2;
})(MapType || {});
var ViewRole = /* @__PURE__ */ ((ViewRole2) => {
  ViewRole2["CREATOR"] = "CREATOR";
  ViewRole2["VOTERS"] = "VOTERS";
  ViewRole2["EVERYONE"] = "EVERYONE";
  return ViewRole2;
})(ViewRole || {});
var VoteRole = /* @__PURE__ */ ((VoteRole2) => {
  VoteRole2["SITE_MEMBERS"] = "SITE_MEMBERS";
  VoteRole2["ALL"] = "ALL";
  return VoteRole2;
})(VoteRole || {});
var PollLayoutType = /* @__PURE__ */ ((PollLayoutType2) => {
  PollLayoutType2["LIST"] = "LIST";
  PollLayoutType2["GRID"] = "GRID";
  return PollLayoutType2;
})(PollLayoutType || {});
var PollLayoutDirection = /* @__PURE__ */ ((PollLayoutDirection2) => {
  PollLayoutDirection2["LTR"] = "LTR";
  PollLayoutDirection2["RTL"] = "RTL";
  return PollLayoutDirection2;
})(PollLayoutDirection || {});
var BackgroundType = /* @__PURE__ */ ((BackgroundType2) => {
  BackgroundType2["COLOR"] = "COLOR";
  BackgroundType2["IMAGE"] = "IMAGE";
  BackgroundType2["GRADIENT"] = "GRADIENT";
  return BackgroundType2;
})(BackgroundType || {});
var DecorationType = /* @__PURE__ */ ((DecorationType2) => {
  DecorationType2["BOLD"] = "BOLD";
  DecorationType2["ITALIC"] = "ITALIC";
  DecorationType2["UNDERLINE"] = "UNDERLINE";
  DecorationType2["SPOILER"] = "SPOILER";
  DecorationType2["ANCHOR"] = "ANCHOR";
  DecorationType2["MENTION"] = "MENTION";
  DecorationType2["LINK"] = "LINK";
  DecorationType2["COLOR"] = "COLOR";
  DecorationType2["FONT_SIZE"] = "FONT_SIZE";
  DecorationType2["EXTERNAL"] = "EXTERNAL";
  return DecorationType2;
})(DecorationType || {});
var FontType = /* @__PURE__ */ ((FontType2) => {
  FontType2["PX"] = "PX";
  FontType2["EM"] = "EM";
  return FontType2;
})(FontType || {});
var Position = /* @__PURE__ */ ((Position2) => {
  Position2["START"] = "START";
  Position2["END"] = "END";
  Position2["TOP"] = "TOP";
  return Position2;
})(Position || {});
var AspectRatio = /* @__PURE__ */ ((AspectRatio2) => {
  AspectRatio2["SQUARE"] = "SQUARE";
  AspectRatio2["RECTANGLE"] = "RECTANGLE";
  return AspectRatio2;
})(AspectRatio || {});
var Resizing = /* @__PURE__ */ ((Resizing2) => {
  Resizing2["FILL"] = "FILL";
  Resizing2["FIT"] = "FIT";
  return Resizing2;
})(Resizing || {});
var Placement = /* @__PURE__ */ ((Placement2) => {
  Placement2["IMAGE"] = "IMAGE";
  Placement2["PRODUCT_INFO"] = "PRODUCT_INFO";
  return Placement2;
})(Placement || {});
var Type = /* @__PURE__ */ ((Type2) => {
  Type2["CONTAINED"] = "CONTAINED";
  Type2["FRAMELESS"] = "FRAMELESS";
  return Type2;
})(Type || {});
var Alignment = /* @__PURE__ */ ((Alignment2) => {
  Alignment2["START"] = "START";
  Alignment2["CENTER"] = "CENTER";
  Alignment2["END"] = "END";
  return Alignment2;
})(Alignment || {});
var Layout = /* @__PURE__ */ ((Layout2) => {
  Layout2["STACKED"] = "STACKED";
  Layout2["SIDE_BY_SIDE"] = "SIDE_BY_SIDE";
  return Layout2;
})(Layout || {});
var AppType = /* @__PURE__ */ ((AppType2) => {
  AppType2["PRODUCT"] = "PRODUCT";
  AppType2["EVENT"] = "EVENT";
  AppType2["BOOKING"] = "BOOKING";
  return AppType2;
})(AppType || {});
var InitialExpandedItems = /* @__PURE__ */ ((InitialExpandedItems2) => {
  InitialExpandedItems2["FIRST"] = "FIRST";
  InitialExpandedItems2["ALL"] = "ALL";
  InitialExpandedItems2["NONE"] = "NONE";
  return InitialExpandedItems2;
})(InitialExpandedItems || {});
var Direction = /* @__PURE__ */ ((Direction2) => {
  Direction2["LTR"] = "LTR";
  Direction2["RTL"] = "RTL";
  return Direction2;
})(Direction || {});
var VerticalAlignment = /* @__PURE__ */ ((VerticalAlignment2) => {
  VerticalAlignment2["TOP"] = "TOP";
  VerticalAlignment2["MIDDLE"] = "MIDDLE";
  VerticalAlignment2["BOTTOM"] = "BOTTOM";
  return VerticalAlignment2;
})(VerticalAlignment || {});
var NullValue = /* @__PURE__ */ ((NullValue2) => {
  NullValue2["NULL_VALUE"] = "NULL_VALUE";
  return NullValue2;
})(NullValue || {});
var ModerationStatusStatus = /* @__PURE__ */ ((ModerationStatusStatus2) => {
  ModerationStatusStatus2["UNKNOWN"] = "UNKNOWN";
  ModerationStatusStatus2["APPROVED"] = "APPROVED";
  ModerationStatusStatus2["REJECTED"] = "REJECTED";
  return ModerationStatusStatus2;
})(ModerationStatusStatus || {});
var QueryPublicationsCountStatsRequestOrder = /* @__PURE__ */ ((QueryPublicationsCountStatsRequestOrder2) => {
  QueryPublicationsCountStatsRequestOrder2["UNKNOWN"] = "UNKNOWN";
  QueryPublicationsCountStatsRequestOrder2["OLDEST"] = "OLDEST";
  QueryPublicationsCountStatsRequestOrder2["NEWEST"] = "NEWEST";
  return QueryPublicationsCountStatsRequestOrder2;
})(QueryPublicationsCountStatsRequestOrder || {});
var Order = /* @__PURE__ */ ((Order2) => {
  Order2["UNKNOWN"] = "UNKNOWN";
  Order2["OLDEST"] = "OLDEST";
  Order2["NEWEST"] = "NEWEST";
  return Order2;
})(Order || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
var GetPostTemplatesSort = /* @__PURE__ */ ((GetPostTemplatesSort2) => {
  GetPostTemplatesSort2["PUBLISHED_DATE_ASC"] = "PUBLISHED_DATE_ASC";
  GetPostTemplatesSort2["PUBLISHED_DATE_DESC"] = "PUBLISHED_DATE_DESC";
  return GetPostTemplatesSort2;
})(GetPostTemplatesSort || {});
var Origin = /* @__PURE__ */ ((Origin2) => {
  Origin2["UNKNOWN"] = "UNKNOWN";
  Origin2["ADMIN"] = "ADMIN";
  Origin2["ADD_CATEGORIES"] = "ADD_CATEGORIES";
  Origin2["AUTO_SAVE"] = "AUTO_SAVE";
  Origin2["COPY_TEMPLATE"] = "COPY_TEMPLATE";
  Origin2["IMPORT"] = "IMPORT";
  Origin2["IMPORT_BULK"] = "IMPORT_BULK";
  Origin2["IMPORT_HTML"] = "IMPORT_HTML";
  Origin2["IMPORT_PATCH"] = "IMPORT_PATCH";
  Origin2["LANGUAGE_CHANGE"] = "LANGUAGE_CHANGE";
  Origin2["MANUAL_SAVE"] = "MANUAL_SAVE";
  Origin2["MIGRATION"] = "MIGRATION";
  Origin2["MODERATION"] = "MODERATION";
  Origin2["MOVE_TO_TRASH"] = "MOVE_TO_TRASH";
  Origin2["PRICING_PLANS_CHANGE"] = "PRICING_PLANS_CHANGE";
  Origin2["PROVISION"] = "PROVISION";
  Origin2["PUBLISH"] = "PUBLISH";
  Origin2["REASSIGN_OWNER"] = "REASSIGN_OWNER";
  Origin2["REBLOG"] = "REBLOG";
  Origin2["RESTORE"] = "RESTORE";
  Origin2["REVERT_TO_DRAFT"] = "REVERT_TO_DRAFT";
  Origin2["TRANSLATION"] = "TRANSLATION";
  Origin2["UNPUBLISH"] = "UNPUBLISH";
  Origin2["UNSCHEDULE"] = "UNSCHEDULE";
  Origin2["NEW_EDIT_SESSION"] = "NEW_EDIT_SESSION";
  Origin2["SCHEDULING_SERVICE_SCHEDULE"] = "SCHEDULING_SERVICE_SCHEDULE";
  Origin2["SCHEDULING_SERVICE_UNSCHEDULE"] = "SCHEDULING_SERVICE_UNSCHEDULE";
  Origin2["SCHEDULING_SERVICE_PUBLISH"] = "SCHEDULING_SERVICE_PUBLISH";
  Origin2["SCHEDULE"] = "SCHEDULE";
  Origin2["REMOVE_FROM_MODERATION"] = "REMOVE_FROM_MODERATION";
  Origin2["REJECT_FROM_MODERATION"] = "REJECT_FROM_MODERATION";
  Origin2["APPROVE_IN_MODERATION"] = "APPROVE_IN_MODERATION";
  Origin2["DELETE_TAG"] = "DELETE_TAG";
  Origin2["PIN"] = "PIN";
  Origin2["UNPIN"] = "UNPIN";
  Origin2["AI_AUTO_SAVE"] = "AI_AUTO_SAVE";
  return Origin2;
})(Origin || {});
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNKNOWN"] = "UNKNOWN";
  Status2["PUBLISHED"] = "PUBLISHED";
  Status2["UNPUBLISHED"] = "UNPUBLISHED";
  Status2["SCHEDULED"] = "SCHEDULED";
  Status2["DELETED"] = "DELETED";
  Status2["IN_REVIEW"] = "IN_REVIEW";
  return Status2;
})(Status || {});
var Field = /* @__PURE__ */ ((Field2) => {
  Field2["UNKNOWN"] = "UNKNOWN";
  Field2["TOTAL_COMMENTS"] = "TOTAL_COMMENTS";
  Field2["LIKE_COUNT"] = "LIKE_COUNT";
  Field2["VIEW_COUNT"] = "VIEW_COUNT";
  Field2["RATING_COUNT"] = "RATING_COUNT";
  return Field2;
})(Field || {});
var PostFieldField = /* @__PURE__ */ ((PostFieldField2) => {
  PostFieldField2["UNKNOWN"] = "UNKNOWN";
  PostFieldField2["URL"] = "URL";
  PostFieldField2["CONTENT_TEXT"] = "CONTENT_TEXT";
  PostFieldField2["METRICS"] = "METRICS";
  PostFieldField2["SEO"] = "SEO";
  PostFieldField2["CONTACT_ID"] = "CONTACT_ID";
  PostFieldField2["RICH_CONTENT"] = "RICH_CONTENT";
  PostFieldField2["REFERENCE_ID"] = "REFERENCE_ID";
  return PostFieldField2;
})(PostFieldField || {});
var GetPostsSort = /* @__PURE__ */ ((GetPostsSort2) => {
  GetPostsSort2["FEED"] = "FEED";
  GetPostsSort2["PUBLISHED_DATE_ASC"] = "PUBLISHED_DATE_ASC";
  GetPostsSort2["PUBLISHED_DATE_DESC"] = "PUBLISHED_DATE_DESC";
  GetPostsSort2["VIEW_COUNT"] = "VIEW_COUNT";
  GetPostsSort2["LIKE_COUNT"] = "LIKE_COUNT";
  GetPostsSort2["TITLE_ASC"] = "TITLE_ASC";
  GetPostsSort2["TITLE_DESC"] = "TITLE_DESC";
  return GetPostsSort2;
})(GetPostsSort || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
async function queryPostCountStats2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    {
      rangeStart: options?.rangeStart,
      order: options?.order,
      months: options?.months,
      language: options?.language,
      timeZone: options?.timeZone
    },
    []
  );
  const reqOpts = queryPostCountStats(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, []);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          rangeStart: "$[0].rangeStart",
          order: "$[0].order",
          months: "$[0].months",
          language: "$[0].language",
          timeZone: "$[0].timeZone"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getTotalPosts2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { language: options?.language },
    []
  );
  const reqOpts = getTotalPosts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, []);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { language: "$[0].language" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getPost2(postId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { postId, fieldsets: options?.fieldsets },
    []
  );
  const reqOpts = getPost(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLToSDKPageURL,
          paths: [{ path: "post.url" }, { path: "post.translations.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "post.heroImage" },
            { path: "post.coverMedia.image" },
            { path: "post.media.wixMedia.image" }
          ]
        },
        {
          transformFn: transformRESTVideoToSDKVideo,
          paths: [{ path: "post.coverMedia.video" }]
        },
        {
          transformFn: transformRESTVideoV2ToSDKVideoV2,
          paths: [{ path: "post.media.wixMedia.videoV2" }]
        }
      ]),
      ["post.richContent", "post.rich_content"]
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          postId: "$[0]",
          fieldsets: "$[1].fieldsets"
        },
        singleArgumentUnchanged: false
      },
      ["postId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getPostBySlug2(slug, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    { slug, fieldsets: options?.fieldsets },
    []
  );
  const reqOpts = getPostBySlug(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLToSDKPageURL,
          paths: [{ path: "post.url" }, { path: "post.translations.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "post.heroImage" },
            { path: "post.coverMedia.image" },
            { path: "post.media.wixMedia.image" }
          ]
        },
        {
          transformFn: transformRESTVideoToSDKVideo,
          paths: [{ path: "post.coverMedia.video" }]
        },
        {
          transformFn: transformRESTVideoV2ToSDKVideoV2,
          paths: [{ path: "post.media.wixMedia.videoV2" }]
        }
      ]),
      ["post.richContent", "post.rich_content"]
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { slug: "$[0]", fieldsets: "$[1].fieldsets" },
        singleArgumentUnchanged: false
      },
      ["slug", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listPosts2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest(
    {
      featured: options?.featured,
      hashtags: options?.hashtags,
      categoryIds: options?.categoryIds,
      tagIds: options?.tagIds,
      sort: options?.sort,
      paging: options?.paging,
      language: options?.language,
      memberId: options?.memberId,
      fieldsets: options?.fieldsets
    },
    []
  );
  const reqOpts = listPosts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTPageURLToSDKPageURL,
          paths: [{ path: "posts.url" }, { path: "posts.translations.url" }]
        },
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [
            { path: "posts.heroImage" },
            { path: "posts.coverMedia.image" },
            { path: "posts.media.wixMedia.image" }
          ]
        },
        {
          transformFn: transformRESTVideoToSDKVideo,
          paths: [{ path: "posts.coverMedia.video" }]
        },
        {
          transformFn: transformRESTVideoV2ToSDKVideoV2,
          paths: [{ path: "posts.media.wixMedia.videoV2" }]
        }
      ]),
      ["posts.richContent", "posts.rich_content"]
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          featured: "$[0].featured",
          hashtags: "$[0].hashtags",
          categoryIds: "$[0].categoryIds",
          tagIds: "$[0].tagIds",
          sort: "$[0].sort",
          paging: "$[0].paging",
          language: "$[0].language",
          memberId: "$[0].memberId",
          fieldsets: "$[0].fieldsets"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryPosts2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryPosts({
        ...payload,
        ...options ?? {}
      });
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return renameKeysFromSDKRequestToRESTRequest(
        { ...args?.[1], query: args?.[0] },
        []
      );
    },
    responseTransformer: ({ data }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(
        transformPaths2(data, [
          {
            transformFn: transformRESTPageURLToSDKPageURL,
            paths: [{ path: "posts.url" }, { path: "posts.translations.url" }]
          },
          {
            transformFn: transformRESTImageToSDKImage,
            paths: [
              { path: "posts.heroImage" },
              { path: "posts.coverMedia.image" },
              { path: "posts.media.wixMedia.image" }
            ]
          },
          {
            transformFn: transformRESTVideoToSDKVideo,
            paths: [{ path: "posts.coverMedia.video" }]
          },
          {
            transformFn: transformRESTVideoV2ToSDKVideoV2,
            paths: [{ path: "posts.media.wixMedia.videoV2" }]
          }
        ]),
        ["posts.richContent", "posts.rich_content"]
      );
      return {
        items: transformedData?.posts,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function getPostMetrics2(postId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ postId }, []);
  const reqOpts = getPostMetrics(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data, []);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { postId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["postId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
export {
  Alignment,
  AppType,
  AspectRatio,
  BackgroundType,
  ButtonDataType,
  Crop,
  DecorationType,
  Direction,
  DividerDataAlignment,
  Field,
  FontType,
  GIFType,
  GetPostTemplatesSort,
  GetPostsSort,
  InitialExpandedItems,
  Layout,
  LayoutType,
  LineStyle,
  MapType,
  ModerationStatusStatus,
  NodeType,
  NullValue,
  Order,
  Orientation,
  Origin,
  Placement,
  PluginContainerDataAlignment,
  PollLayoutDirection,
  PollLayoutType,
  Position,
  PostFieldField,
  QueryPublicationsCountStatsRequestOrder,
  Resizing,
  SortOrder,
  Source,
  Status,
  StylesPosition,
  Target,
  TextAlignment,
  ThumbnailsAlignment,
  Type,
  VerticalAlignment,
  ViewMode,
  ViewRole,
  VoteRole,
  WebhookIdentityType,
  Width,
  WidthType,
  getPost2 as getPost,
  getPostBySlug2 as getPostBySlug,
  getPostMetrics2 as getPostMetrics,
  getTotalPosts2 as getTotalPosts,
  listPosts2 as listPosts,
  queryPostCountStats2 as queryPostCountStats,
  queryPosts2 as queryPosts
};
//# sourceMappingURL=index.typings.mjs.map