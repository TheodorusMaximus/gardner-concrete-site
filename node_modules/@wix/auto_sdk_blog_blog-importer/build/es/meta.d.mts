import { StartImportRequest as StartImportRequest$1, StartImportResponse as StartImportResponse$1, SubmitUrlForImportRequest as SubmitUrlForImportRequest$1, SubmitUrlForImportResponse as SubmitUrlForImportResponse$1, ValidateUrlForImportRequest as ValidateUrlForImportRequest$1, ValidateUrlForImportResponse as ValidateUrlForImportResponse$1, DeleteNotImportedRequest as DeleteNotImportedRequest$1, DeleteNotImportedResponse as DeleteNotImportedResponse$1, GetImportStatusRequest as GetImportStatusRequest$1, GetImportStatusResponse as GetImportStatusResponse$1, GetNotImportedPostsRequest as GetNotImportedPostsRequest$1, GetNotImportedPostsResponse as GetNotImportedPostsResponse$1 } from './index.typings.mjs';
import '@wix/sdk-types';

interface ImportStatus {
    /** Import Id. */
    id?: string;
    /** File name of wordpress xml file that is being imported. */
    fileName?: string;
    /** Status of the latest import. */
    status?: StatusWithLiterals;
    /** Total amount of entities to be imported. */
    importAmount?: number;
    /** Amount of entities imported successfully. */
    alreadyImportedAmount?: number;
    /** Amount of entities processed. */
    processedAmount?: number;
    /**
     * Url for the page that is being imported.
     * @maxLength 100
     */
    url?: string | null;
}
declare enum Status {
    UNKNOWN = "UNKNOWN",
    READY_TO_IMPORT = "READY_TO_IMPORT",
    STARTED = "STARTED",
    FAILED = "FAILED",
    DONE = "DONE",
    PARSING_URL = "PARSING_URL",
    NOT_FOUND = "NOT_FOUND"
}
/** @enumType */
type StatusWithLiterals = Status | 'UNKNOWN' | 'READY_TO_IMPORT' | 'STARTED' | 'FAILED' | 'DONE' | 'PARSING_URL' | 'NOT_FOUND';
interface StartImportRequest {
    /** Should publish the posts after import. */
    shouldPublish?: boolean | null;
}
interface StartImportResponse {
}
interface SubmitUrlForImportRequest {
    /**
     * Url to wordpress xml file.
     * @maxLength 100
     */
    url: string;
    /**
     * Domain of the site without www or https://.
     * @maxLength 100
     */
    siteDomain?: string | null;
}
interface SubmitUrlForImportResponse {
}
interface ValidateUrlForImportRequest {
    /**
     * Url for wordpress site.
     * @maxLength 100
     */
    url: string | null;
}
interface ValidateUrlForImportResponse {
    /** Number of posts. */
    totalPosts?: number | null;
    /**
     * Blog title.
     * @maxLength 100
     */
    blogTitle?: string | null;
}
interface DeleteNotImportedRequest {
}
interface DeleteNotImportedResponse {
}
interface GetImportStatusRequest {
}
interface GetImportStatusResponse {
    /** Details of import progress. */
    importStatus?: ImportStatus;
}
interface GetNotImportedPostsRequest {
}
interface GetNotImportedPostsResponse {
    /** Failed entities. */
    notImportedPosts?: Post[];
}
interface Post {
    /** The id of the post. */
    id?: string;
    /** Title of the post. */
    title?: string;
    /** Url to posts in wordpress. */
    url?: string;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function startImport(): __PublicMethodMetaInfo<'POST', {}, StartImportRequest$1, StartImportRequest, StartImportResponse$1, StartImportResponse>;
declare function submitUrlForImport(): __PublicMethodMetaInfo<'POST', {}, SubmitUrlForImportRequest$1, SubmitUrlForImportRequest, SubmitUrlForImportResponse$1, SubmitUrlForImportResponse>;
declare function validateUrlForImport(): __PublicMethodMetaInfo<'POST', {}, ValidateUrlForImportRequest$1, ValidateUrlForImportRequest, ValidateUrlForImportResponse$1, ValidateUrlForImportResponse>;
declare function deleteNotImported(): __PublicMethodMetaInfo<'DELETE', {}, DeleteNotImportedRequest$1, DeleteNotImportedRequest, DeleteNotImportedResponse$1, DeleteNotImportedResponse>;
declare function getImportStatus(): __PublicMethodMetaInfo<'GET', {}, GetImportStatusRequest$1, GetImportStatusRequest, GetImportStatusResponse$1, GetImportStatusResponse>;
declare function getNotImportedPosts(): __PublicMethodMetaInfo<'GET', {}, GetNotImportedPostsRequest$1, GetNotImportedPostsRequest, GetNotImportedPostsResponse$1, GetNotImportedPostsResponse>;

export { type __PublicMethodMetaInfo, deleteNotImported, getImportStatus, getNotImportedPosts, startImport, submitUrlForImport, validateUrlForImport };
