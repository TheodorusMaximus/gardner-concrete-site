// src/blog-v1-wordpress-import-blog-importer.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/blog-v1-wordpress-import-blog-importer.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixBlogWordpressImportServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/xml-blog-importer",
        destPath: ""
      }
    ],
    _api_base_domain_: [
      {
        srcPath: "/_api/xml-blog-importer",
        destPath: ""
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_blog_blog-importer";
function startImport(payload) {
  function __startImport({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "POST",
      methodFqn: "com.wix.blog.WordpressImportService.StartImport",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/wordpress-import",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __startImport;
}
function submitUrlForImport(payload) {
  function __submitUrlForImport({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "POST",
      methodFqn: "com.wix.blog.WordpressImportService.SubmitUrlForImport",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/prepare-wordpress-url-import",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __submitUrlForImport;
}
function validateUrlForImport(payload) {
  function __validateUrlForImport({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "POST",
      methodFqn: "com.wix.blog.WordpressImportService.ValidateUrlForImport",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/validate-wordpress-url-import",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __validateUrlForImport;
}
function deleteNotImported(payload) {
  function __deleteNotImported({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "DELETE",
      methodFqn: "com.wix.blog.WordpressImportService.DeleteNotImported",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/wordpress-import",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteNotImported;
}
function getImportStatus(payload) {
  function __getImportStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "GET",
      methodFqn: "com.wix.blog.WordpressImportService.GetImportStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/wordpress-import",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getImportStatus;
}
function getNotImportedPosts(payload) {
  function __getNotImportedPosts({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "GET",
      methodFqn: "com.wix.blog.WordpressImportService.GetNotImportedPosts",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/wordpress-import/posts/not-imported",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getNotImportedPosts;
}

// src/blog-v1-wordpress-import-blog-importer.universal.ts
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNKNOWN"] = "UNKNOWN";
  Status2["READY_TO_IMPORT"] = "READY_TO_IMPORT";
  Status2["STARTED"] = "STARTED";
  Status2["FAILED"] = "FAILED";
  Status2["DONE"] = "DONE";
  Status2["PARSING_URL"] = "PARSING_URL";
  Status2["NOT_FOUND"] = "NOT_FOUND";
  return Status2;
})(Status || {});
async function startImport2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    shouldPublish: options?.shouldPublish
  });
  const reqOpts = startImport(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { shouldPublish: "$[0].shouldPublish" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function submitUrlForImport2(url, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    url,
    siteDomain: options?.siteDomain
  });
  const reqOpts = submitUrlForImport(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          url: "$[0]",
          siteDomain: "$[1].siteDomain"
        },
        singleArgumentUnchanged: false
      },
      ["url", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function validateUrlForImport2(url) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ url });
  const reqOpts = validateUrlForImport(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { url: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["url"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteNotImported2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = deleteNotImported(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getImportStatus2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = getImportStatus(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getNotImportedPosts2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = getNotImportedPosts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/blog-v1-wordpress-import-blog-importer.public.ts
function startImport3(httpClient) {
  return (options) => startImport2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function submitUrlForImport3(httpClient) {
  return (url, options) => submitUrlForImport2(
    url,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function validateUrlForImport3(httpClient) {
  return (url) => validateUrlForImport2(
    url,
    // @ts-ignore
    { httpClient }
  );
}
function deleteNotImported3(httpClient) {
  return () => deleteNotImported2(
    // @ts-ignore
    { httpClient }
  );
}
function getImportStatus3(httpClient) {
  return () => getImportStatus2(
    // @ts-ignore
    { httpClient }
  );
}
function getNotImportedPosts3(httpClient) {
  return () => getNotImportedPosts2(
    // @ts-ignore
    { httpClient }
  );
}

// src/blog-v1-wordpress-import-blog-importer.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var startImport4 = /* @__PURE__ */ createRESTModule(startImport3);
var submitUrlForImport4 = /* @__PURE__ */ createRESTModule(submitUrlForImport3);
var validateUrlForImport4 = /* @__PURE__ */ createRESTModule(validateUrlForImport3);
var deleteNotImported4 = /* @__PURE__ */ createRESTModule(deleteNotImported3);
var getImportStatus4 = /* @__PURE__ */ createRESTModule(getImportStatus3);
var getNotImportedPosts4 = /* @__PURE__ */ createRESTModule(getNotImportedPosts3);
export {
  Status,
  deleteNotImported4 as deleteNotImported,
  getImportStatus4 as getImportStatus,
  getNotImportedPosts4 as getNotImportedPosts,
  startImport4 as startImport,
  submitUrlForImport4 as submitUrlForImport,
  validateUrlForImport4 as validateUrlForImport
};
//# sourceMappingURL=index.mjs.map