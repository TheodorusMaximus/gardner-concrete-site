"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.typings.ts
var index_typings_exports = {};
__export(index_typings_exports, {
  Status: () => Status,
  deleteNotImported: () => deleteNotImported2,
  getImportStatus: () => getImportStatus2,
  getNotImportedPosts: () => getNotImportedPosts2,
  startImport: () => startImport2,
  submitUrlForImport: () => submitUrlForImport2,
  validateUrlForImport: () => validateUrlForImport2
});
module.exports = __toCommonJS(index_typings_exports);

// src/blog-v1-wordpress-import-blog-importer.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/blog-v1-wordpress-import-blog-importer.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixBlogWordpressImportServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/xml-blog-importer",
        destPath: ""
      }
    ],
    _api_base_domain_: [
      {
        srcPath: "/_api/xml-blog-importer",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_blog_blog-importer";
function startImport(payload) {
  function __startImport({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "POST",
      methodFqn: "com.wix.blog.WordpressImportService.StartImport",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/wordpress-import",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __startImport;
}
function submitUrlForImport(payload) {
  function __submitUrlForImport({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "POST",
      methodFqn: "com.wix.blog.WordpressImportService.SubmitUrlForImport",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/prepare-wordpress-url-import",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __submitUrlForImport;
}
function validateUrlForImport(payload) {
  function __validateUrlForImport({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "POST",
      methodFqn: "com.wix.blog.WordpressImportService.ValidateUrlForImport",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/validate-wordpress-url-import",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __validateUrlForImport;
}
function deleteNotImported(payload) {
  function __deleteNotImported({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "DELETE",
      methodFqn: "com.wix.blog.WordpressImportService.DeleteNotImported",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/wordpress-import",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteNotImported;
}
function getImportStatus(payload) {
  function __getImportStatus({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "GET",
      methodFqn: "com.wix.blog.WordpressImportService.GetImportStatus",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/wordpress-import",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getImportStatus;
}
function getNotImportedPosts(payload) {
  function __getNotImportedPosts({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v1.wordpress_import",
      method: "GET",
      methodFqn: "com.wix.blog.WordpressImportService.GetNotImportedPosts",
      packageName: PACKAGE_NAME,
      url: resolveComWixBlogWordpressImportServiceUrl({
        protoPath: "/v1/wordpress-import/posts/not-imported",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __getNotImportedPosts;
}

// src/blog-v1-wordpress-import-blog-importer.universal.ts
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNKNOWN"] = "UNKNOWN";
  Status2["READY_TO_IMPORT"] = "READY_TO_IMPORT";
  Status2["STARTED"] = "STARTED";
  Status2["FAILED"] = "FAILED";
  Status2["DONE"] = "DONE";
  Status2["PARSING_URL"] = "PARSING_URL";
  Status2["NOT_FOUND"] = "NOT_FOUND";
  return Status2;
})(Status || {});
async function startImport2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    shouldPublish: options?.shouldPublish
  });
  const reqOpts = startImport(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { shouldPublish: "$[0].shouldPublish" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function submitUrlForImport2(url, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    url,
    siteDomain: options?.siteDomain
  });
  const reqOpts = submitUrlForImport(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          url: "$[0]",
          siteDomain: "$[1].siteDomain"
        },
        singleArgumentUnchanged: false
      },
      ["url", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function validateUrlForImport2(url) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ url });
  const reqOpts = validateUrlForImport(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { url: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["url"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteNotImported2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = deleteNotImported(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getImportStatus2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = getImportStatus(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getNotImportedPosts2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = getNotImportedPosts(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Status,
  deleteNotImported,
  getImportStatus,
  getNotImportedPosts,
  startImport,
  submitUrlForImport,
  validateUrlForImport
});
//# sourceMappingURL=index.typings.js.map