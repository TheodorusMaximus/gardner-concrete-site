import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { StartImportOptions, SubmitUrlForImportOptions, ValidateUrlForImportResponse, GetImportStatusResponse, GetNotImportedPostsResponse } from './index.typings.js';
export { DeleteNotImportedRequest, DeleteNotImportedResponse, GetImportStatusRequest, GetNotImportedPostsRequest, ImportStatus, Post, StartImportRequest, StartImportResponse, Status, SubmitUrlForImportRequest, SubmitUrlForImportResponse, ValidateUrlForImportRequest } from './index.typings.js';

type WordpressImportNonNullablePaths = `_id` | `fileName` | `status` | `importAmount` | `alreadyImportedAmount` | `processedAmount`;
declare function startImport$1(httpClient: HttpClient): StartImportSignature;
interface StartImportSignature {
    /**
     * Starts wordpress import process.
     */
    (options?: StartImportOptions): Promise<void>;
}
declare function submitUrlForImport$1(httpClient: HttpClient): SubmitUrlForImportSignature;
interface SubmitUrlForImportSignature {
    /**
     * Submits wordpress import process from URL.
     * It will prepare wordpress data for import from the given URL.
     * Use "GetImportStatus" to get the status of the import process.
     * Once the import status becomes READY_TO_IMPORT, the import process can be started by invoking "StartImport".
     * @param - Url to wordpress xml file.
     */
    (url: string, options?: SubmitUrlForImportOptions): Promise<void>;
}
declare function validateUrlForImport$1(httpClient: HttpClient): ValidateUrlForImportSignature;
interface ValidateUrlForImportSignature {
    /** @param - Url for wordpress site. */
    (url: string): Promise<ValidateUrlForImportResponse>;
}
declare function deleteNotImported$1(httpClient: HttpClient): DeleteNotImportedSignature;
interface DeleteNotImportedSignature {
    /** */
    (): Promise<void>;
}
declare function getImportStatus$1(httpClient: HttpClient): GetImportStatusSignature;
interface GetImportStatusSignature {
    /**
     * Gets the status of the import process.
     */
    (): Promise<NonNullablePaths<GetImportStatusResponse, {
        [P in WordpressImportNonNullablePaths]: `importStatus.${P}`;
    }[WordpressImportNonNullablePaths]>>;
}
declare function getNotImportedPosts$1(httpClient: HttpClient): GetNotImportedPostsSignature;
interface GetNotImportedPostsSignature {
    /**
     * Gets the posts that were not yet imported either because of an error or because import is still in progress.
     */
    (): Promise<NonNullablePaths<GetNotImportedPostsResponse, `notImportedPosts` | `notImportedPosts.${number}._id` | `notImportedPosts.${number}.title` | `notImportedPosts.${number}.url`>>;
}

declare const startImport: MaybeContext<BuildRESTFunction<typeof startImport$1> & typeof startImport$1>;
declare const submitUrlForImport: MaybeContext<BuildRESTFunction<typeof submitUrlForImport$1> & typeof submitUrlForImport$1>;
declare const validateUrlForImport: MaybeContext<BuildRESTFunction<typeof validateUrlForImport$1> & typeof validateUrlForImport$1>;
declare const deleteNotImported: MaybeContext<BuildRESTFunction<typeof deleteNotImported$1> & typeof deleteNotImported$1>;
declare const getImportStatus: MaybeContext<BuildRESTFunction<typeof getImportStatus$1> & typeof getImportStatus$1>;
declare const getNotImportedPosts: MaybeContext<BuildRESTFunction<typeof getNotImportedPosts$1> & typeof getNotImportedPosts$1>;

export { GetImportStatusResponse, GetNotImportedPostsResponse, StartImportOptions, SubmitUrlForImportOptions, ValidateUrlForImportResponse, deleteNotImported, getImportStatus, getNotImportedPosts, startImport, submitUrlForImport, validateUrlForImport };
