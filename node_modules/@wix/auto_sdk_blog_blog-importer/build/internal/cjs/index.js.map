{"version":3,"sources":["../../../index.ts","../../../src/blog-v1-wordpress-import-blog-importer.universal.ts","../../../src/blog-v1-wordpress-import-blog-importer.http.ts","../../../src/blog-v1-wordpress-import-blog-importer.public.ts","../../../src/blog-v1-wordpress-import-blog-importer.context.ts"],"sourcesContent":["export * from './src/blog-v1-wordpress-import-blog-importer.context.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixBlogV1WordpressImport from './blog-v1-wordpress-import-blog-importer.http.js';\n\nexport interface ImportStatus {\n  /** Import Id. */\n  _id?: string;\n  /** File name of wordpress xml file that is being imported. */\n  fileName?: string;\n  /** Status of the latest import. */\n  status?: StatusWithLiterals;\n  /** Total amount of entities to be imported. */\n  importAmount?: number;\n  /** Amount of entities imported successfully. */\n  alreadyImportedAmount?: number;\n  /** Amount of entities processed. */\n  processedAmount?: number;\n  /**\n   * Url for the page that is being imported.\n   * @maxLength 100\n   */\n  url?: string | null;\n}\n\nexport enum Status {\n  UNKNOWN = 'UNKNOWN',\n  READY_TO_IMPORT = 'READY_TO_IMPORT',\n  STARTED = 'STARTED',\n  FAILED = 'FAILED',\n  DONE = 'DONE',\n  PARSING_URL = 'PARSING_URL',\n  NOT_FOUND = 'NOT_FOUND',\n}\n\n/** @enumType */\nexport type StatusWithLiterals =\n  | Status\n  | 'UNKNOWN'\n  | 'READY_TO_IMPORT'\n  | 'STARTED'\n  | 'FAILED'\n  | 'DONE'\n  | 'PARSING_URL'\n  | 'NOT_FOUND';\n\nexport interface StartImportRequest {\n  /** Should publish the posts after import. */\n  shouldPublish?: boolean | null;\n}\n\nexport interface StartImportResponse {}\n\nexport interface SubmitUrlForImportRequest {\n  /**\n   * Url to wordpress xml file.\n   * @maxLength 100\n   */\n  url: string;\n  /**\n   * Domain of the site without www or https://.\n   * @maxLength 100\n   */\n  siteDomain?: string | null;\n}\n\nexport interface SubmitUrlForImportResponse {}\n\nexport interface ValidateUrlForImportRequest {\n  /**\n   * Url for wordpress site.\n   * @maxLength 100\n   */\n  url: string | null;\n}\n\nexport interface ValidateUrlForImportResponse {\n  /** Number of posts. */\n  totalPosts?: number | null;\n  /**\n   * Blog title.\n   * @maxLength 100\n   */\n  blogTitle?: string | null;\n}\n\nexport interface DeleteNotImportedRequest {}\n\nexport interface DeleteNotImportedResponse {}\n\nexport interface GetImportStatusRequest {}\n\nexport interface GetImportStatusResponse {\n  /** Details of import progress. */\n  importStatus?: ImportStatus;\n}\n\nexport interface GetNotImportedPostsRequest {}\n\nexport interface GetNotImportedPostsResponse {\n  /** Failed entities. */\n  notImportedPosts?: Post[];\n}\n\nexport interface Post {\n  /** The id of the post. */\n  _id?: string;\n  /** Title of the post. */\n  title?: string;\n  /** Url to posts in wordpress. */\n  url?: string;\n}\n\ntype WordpressImportNonNullablePaths =\n  | `_id`\n  | `fileName`\n  | `status`\n  | `importAmount`\n  | `alreadyImportedAmount`\n  | `processedAmount`;\n\n/**\n * Starts wordpress import process.\n * @public\n * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES\n * @applicableIdentity APP\n * @fqn com.wix.blog.WordpressImportService.StartImport\n */\nexport async function startImport(options?: StartImportOptions): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    shouldPublish: options?.shouldPublish,\n  });\n\n  const reqOpts = ambassadorWixBlogV1WordpressImport.startImport(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { shouldPublish: '$[0].shouldPublish' },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface StartImportOptions {\n  /** Should publish the posts after import. */\n  shouldPublish?: boolean | null;\n}\n\n/**\n * Submits wordpress import process from URL.\n * It will prepare wordpress data for import from the given URL.\n * Use \"GetImportStatus\" to get the status of the import process.\n * Once the import status becomes READY_TO_IMPORT, the import process can be started by invoking \"StartImport\".\n * @param url - Url to wordpress xml file.\n * @public\n * @requiredField url\n * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES\n * @applicableIdentity APP\n * @fqn com.wix.blog.WordpressImportService.SubmitUrlForImport\n */\nexport async function submitUrlForImport(\n  url: string,\n  options?: SubmitUrlForImportOptions\n): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    url: url,\n    siteDomain: options?.siteDomain,\n  });\n\n  const reqOpts =\n    ambassadorWixBlogV1WordpressImport.submitUrlForImport(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          url: '$[0]',\n          siteDomain: '$[1].siteDomain',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['url', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface SubmitUrlForImportOptions {\n  /**\n   * Domain of the site without www or https://.\n   * @maxLength 100\n   */\n  siteDomain?: string | null;\n}\n\n/** @param url - Url for wordpress site.\n * @public\n * @requiredField url\n * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES\n * @applicableIdentity APP\n * @fqn com.wix.blog.WordpressImportService.ValidateUrlForImport\n */\nexport async function validateUrlForImport(\n  url: string\n): Promise<ValidateUrlForImportResponse> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ url: url });\n\n  const reqOpts =\n    ambassadorWixBlogV1WordpressImport.validateUrlForImport(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { url: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['url']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/** @public\n * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES\n * @applicableIdentity APP\n * @fqn com.wix.blog.WordpressImportService.DeleteNotImported\n */\nexport async function deleteNotImported(): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts = ambassadorWixBlogV1WordpressImport.deleteNotImported(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Gets the status of the import process.\n * @public\n * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES\n * @applicableIdentity APP\n * @fqn com.wix.blog.WordpressImportService.GetImportStatus\n */\nexport async function getImportStatus(): Promise<\n  NonNullablePaths<\n    GetImportStatusResponse,\n    {\n      [P in WordpressImportNonNullablePaths]: `importStatus.${P}`;\n    }[WordpressImportNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts = ambassadorWixBlogV1WordpressImport.getImportStatus(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Gets the posts that were not yet imported either because of an error or because import is still in progress.\n * @public\n * @permissionId BLOG.IMPORT_FROM_EXTERNAL_SITES\n * @applicableIdentity APP\n * @fqn com.wix.blog.WordpressImportService.GetNotImportedPosts\n */\nexport async function getNotImportedPosts(): Promise<\n  NonNullablePaths<\n    GetNotImportedPostsResponse,\n    | `notImportedPosts`\n    | `notImportedPosts.${number}._id`\n    | `notImportedPosts.${number}.title`\n    | `notImportedPosts.${number}.url`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts =\n    ambassadorWixBlogV1WordpressImport.getNotImportedPosts(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixBlogWordpressImportServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/xml-blog-importer',\n        destPath: '',\n      },\n    ],\n    _api_base_domain_: [\n      {\n        srcPath: '/_api/xml-blog-importer',\n        destPath: '',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_blog_blog-importer';\n\n/** Starts wordpress import process. */\nexport function startImport(payload: object): RequestOptionsFactory<any> {\n  function __startImport({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v1.wordpress_import',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.blog.WordpressImportService.StartImport',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixBlogWordpressImportServiceUrl({\n        protoPath: '/v1/wordpress-import',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __startImport;\n}\n\n/**\n * Submits wordpress import process from URL.\n * It will prepare wordpress data for import from the given URL.\n * Use \"GetImportStatus\" to get the status of the import process.\n * Once the import status becomes READY_TO_IMPORT, the import process can be started by invoking \"StartImport\".\n */\nexport function submitUrlForImport(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __submitUrlForImport({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v1.wordpress_import',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.blog.WordpressImportService.SubmitUrlForImport',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixBlogWordpressImportServiceUrl({\n        protoPath: '/v1/prepare-wordpress-url-import',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __submitUrlForImport;\n}\n\nexport function validateUrlForImport(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __validateUrlForImport({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v1.wordpress_import',\n      method: 'POST' as any,\n      methodFqn: 'com.wix.blog.WordpressImportService.ValidateUrlForImport',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixBlogWordpressImportServiceUrl({\n        protoPath: '/v1/validate-wordpress-url-import',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __validateUrlForImport;\n}\n\nexport function deleteNotImported(payload: object): RequestOptionsFactory<any> {\n  function __deleteNotImported({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v1.wordpress_import',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wix.blog.WordpressImportService.DeleteNotImported',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixBlogWordpressImportServiceUrl({\n        protoPath: '/v1/wordpress-import',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteNotImported;\n}\n\n/** Gets the status of the import process. */\nexport function getImportStatus(payload: object): RequestOptionsFactory<any> {\n  function __getImportStatus({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v1.wordpress_import',\n      method: 'GET' as any,\n      methodFqn: 'com.wix.blog.WordpressImportService.GetImportStatus',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixBlogWordpressImportServiceUrl({\n        protoPath: '/v1/wordpress-import',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __getImportStatus;\n}\n\n/** Gets the posts that were not yet imported either because of an error or because import is still in progress. */\nexport function getNotImportedPosts(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __getNotImportedPosts({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v1.wordpress_import',\n      method: 'GET' as any,\n      methodFqn: 'com.wix.blog.WordpressImportService.GetNotImportedPosts',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixBlogWordpressImportServiceUrl({\n        protoPath: '/v1/wordpress-import/posts/not-imported',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __getNotImportedPosts;\n}\n","import { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport {\n  GetImportStatusResponse,\n  GetNotImportedPostsResponse,\n  StartImportOptions,\n  SubmitUrlForImportOptions,\n  ValidateUrlForImportResponse,\n  deleteNotImported as universalDeleteNotImported,\n  getImportStatus as universalGetImportStatus,\n  getNotImportedPosts as universalGetNotImportedPosts,\n  startImport as universalStartImport,\n  submitUrlForImport as universalSubmitUrlForImport,\n  validateUrlForImport as universalValidateUrlForImport,\n} from './blog-v1-wordpress-import-blog-importer.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/blog' };\n\ntype WordpressImportNonNullablePaths =\n  | `_id`\n  | `fileName`\n  | `status`\n  | `importAmount`\n  | `alreadyImportedAmount`\n  | `processedAmount`;\n\nexport function startImport(httpClient: HttpClient): StartImportSignature {\n  return (options?: StartImportOptions) =>\n    universalStartImport(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface StartImportSignature {\n  /**\n   * Starts wordpress import process.\n   */\n  (options?: StartImportOptions): Promise<void>;\n}\n\nexport function submitUrlForImport(\n  httpClient: HttpClient\n): SubmitUrlForImportSignature {\n  return (url: string, options?: SubmitUrlForImportOptions) =>\n    universalSubmitUrlForImport(\n      url,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface SubmitUrlForImportSignature {\n  /**\n   * Submits wordpress import process from URL.\n   * It will prepare wordpress data for import from the given URL.\n   * Use \"GetImportStatus\" to get the status of the import process.\n   * Once the import status becomes READY_TO_IMPORT, the import process can be started by invoking \"StartImport\".\n   * @param - Url to wordpress xml file.\n   */\n  (url: string, options?: SubmitUrlForImportOptions): Promise<void>;\n}\n\nexport function validateUrlForImport(\n  httpClient: HttpClient\n): ValidateUrlForImportSignature {\n  return (url: string) =>\n    universalValidateUrlForImport(\n      url,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ValidateUrlForImportSignature {\n  /** @param - Url for wordpress site. */\n  (url: string): Promise<ValidateUrlForImportResponse>;\n}\n\nexport function deleteNotImported(\n  httpClient: HttpClient\n): DeleteNotImportedSignature {\n  return () =>\n    universalDeleteNotImported(\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteNotImportedSignature {\n  /** */\n  (): Promise<void>;\n}\n\nexport function getImportStatus(\n  httpClient: HttpClient\n): GetImportStatusSignature {\n  return () =>\n    universalGetImportStatus(\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetImportStatusSignature {\n  /**\n   * Gets the status of the import process.\n   */\n  (): Promise<\n    NonNullablePaths<\n      GetImportStatusResponse,\n      {\n        [P in WordpressImportNonNullablePaths]: `importStatus.${P}`;\n      }[WordpressImportNonNullablePaths]\n    >\n  >;\n}\n\nexport function getNotImportedPosts(\n  httpClient: HttpClient\n): GetNotImportedPostsSignature {\n  return () =>\n    universalGetNotImportedPosts(\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetNotImportedPostsSignature {\n  /**\n   * Gets the posts that were not yet imported either because of an error or because import is still in progress.\n   */\n  (): Promise<\n    NonNullablePaths<\n      GetNotImportedPostsResponse,\n      | `notImportedPosts`\n      | `notImportedPosts.${number}._id`\n      | `notImportedPosts.${number}.title`\n      | `notImportedPosts.${number}.url`\n    >\n  >;\n}\n\nexport {\n  DeleteNotImportedRequest,\n  DeleteNotImportedResponse,\n  GetImportStatusRequest,\n  GetImportStatusResponse,\n  GetNotImportedPostsRequest,\n  GetNotImportedPostsResponse,\n  ImportStatus,\n  Post,\n  StartImportOptions,\n  StartImportRequest,\n  StartImportResponse,\n  Status,\n  SubmitUrlForImportOptions,\n  SubmitUrlForImportRequest,\n  SubmitUrlForImportResponse,\n  ValidateUrlForImportRequest,\n  ValidateUrlForImportResponse,\n} from './blog-v1-wordpress-import-blog-importer.universal.js';\n","import {\n  startImport as publicStartImport,\n  submitUrlForImport as publicSubmitUrlForImport,\n  validateUrlForImport as publicValidateUrlForImport,\n  deleteNotImported as publicDeleteNotImported,\n  getImportStatus as publicGetImportStatus,\n  getNotImportedPosts as publicGetNotImportedPosts,\n} from './blog-v1-wordpress-import-blog-importer.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\n\nexport const startImport: MaybeContext<\n  BuildRESTFunction<typeof publicStartImport> & typeof publicStartImport\n> = /*#__PURE__*/ createRESTModule(publicStartImport);\nexport const submitUrlForImport: MaybeContext<\n  BuildRESTFunction<typeof publicSubmitUrlForImport> &\n    typeof publicSubmitUrlForImport\n> = /*#__PURE__*/ createRESTModule(publicSubmitUrlForImport);\nexport const validateUrlForImport: MaybeContext<\n  BuildRESTFunction<typeof publicValidateUrlForImport> &\n    typeof publicValidateUrlForImport\n> = /*#__PURE__*/ createRESTModule(publicValidateUrlForImport);\nexport const deleteNotImported: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteNotImported> &\n    typeof publicDeleteNotImported\n> = /*#__PURE__*/ createRESTModule(publicDeleteNotImported);\nexport const getImportStatus: MaybeContext<\n  BuildRESTFunction<typeof publicGetImportStatus> & typeof publicGetImportStatus\n> = /*#__PURE__*/ createRESTModule(publicGetImportStatus);\nexport const getNotImportedPosts: MaybeContext<\n  BuildRESTFunction<typeof publicGetNotImportedPosts> &\n    typeof publicGetNotImportedPosts\n> = /*#__PURE__*/ createRESTModule(publicGetNotImportedPosts);\n\nexport { Status } from './blog-v1-wordpress-import-blog-importer.universal.js';\nexport {\n  ImportStatus,\n  StartImportRequest,\n  StartImportResponse,\n  SubmitUrlForImportRequest,\n  SubmitUrlForImportResponse,\n  ValidateUrlForImportRequest,\n  ValidateUrlForImportResponse,\n  DeleteNotImportedRequest,\n  DeleteNotImportedResponse,\n  GetImportStatusRequest,\n  GetImportStatusResponse,\n  GetNotImportedPostsRequest,\n  GetNotImportedPostsResponse,\n  Post,\n  StartImportOptions,\n  SubmitUrlForImportOptions,\n} from './blog-v1-wordpress-import-blog-importer.universal.js';\n"],"mappings":"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","names":["deleteNotImported","getImportStatus","getNotImportedPosts","startImport","submitUrlForImport","validateUrlForImport","import_rest_modules","Status","startImport","sdkTransformError","submitUrlForImport","validateUrlForImport","deleteNotImported","getImportStatus","getNotImportedPosts","startImport","submitUrlForImport","validateUrlForImport","deleteNotImported","getImportStatus","getNotImportedPosts","import_rest_modules","startImport","submitUrlForImport","validateUrlForImport","deleteNotImported","getImportStatus","getNotImportedPosts"]}