import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { LoginId, RegisterV2Options, StateMachineResponse, RegisterV2ApplicationErrors, RegisterV2ValidationErrors, LoginV2Options, LoginV2ApplicationErrors, LoginV2ValidationErrors, SignOnOptions, SignOnResponse, LogoutOptions, RawHttpResponse, FactorTypeWithLiterals, VerifyOptions } from './index.typings.mjs';
export { Address, AddressTag, AddressWrapper, Authentication, AuthenticationExtensionInputs, AuthenticationExtensionInputsLargeBlobOperationOneOf, AuthenticatorConnection, CallVerifyData, CaptchaToken, CaptchaTokenTokenOneOf, ChangePasswordRequest, ChangePasswordResponse, Connection, ConnectionTypeOneOf, CustomField, CustomValue, CustomValueValueOneOf, Email, EmailTag, ExternalEmailVerifyData, Factor, FactorStatus, FactorType, HeadersEntry, Identity, IdentityProfile, IdpConnection, ListValue, LoginCallbackRequest, LoginIdTypeOneOf, LoginV2Request, LoginWithIdpConnectionRequest, LoginWithIdpConnectionTokenParamsRequest, LogoutRequest, MapValue, Metadata, MfaChallengeData, MfaReason, PathParametersEntry, Phone, PhoneTag, PrivacyStatus, PublicKeyCredentialDescriptor, PushChallengeData, PushVerifyData, QueryParametersEntry, RawHttpRequest, Reason, RegisterV2Request, RequireMfaData, SecondaryEmail, SignOnRequest, SmsVerifyData, StateMachineResponseStateDataOneOf, StateType, Status, StatusName, StatusV2, TenantType, TotpVerifyData, UserVerificationRequirement, V1CustomValue, V1CustomValueValueOneOf, V1Factor, V1ListValue, V1MapValue, VerificationChallenge, VerificationChallengeFactorChallengeDataOneOf, VerifyOptionsFactorDataOneOf, VerifyRequest, VerifyRequestFactorDataOneOf, WebAuthnChallengeData, WebAuthnVerifyData } from './index.typings.mjs';

declare function registerV2$1(httpClient: HttpClient): RegisterV2Signature;
interface RegisterV2Signature {
    /**
     * Registers a new member.
     *
     * Typically, after a successful registration, you generate and use member tokens for the
     * registered member so that subsequent API calls are called as part of a member session.
     * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
     *
     * If the email used to register the member already exists as a contact email, the registering
     * member need to verify the email address using a code that is sent to the address.
     * @param - Identifier of the registering member.
     */
    (loginId: LoginId, options?: RegisterV2Options): Promise<NonNullablePaths<StateMachineResponse, `state` | `identity.connections` | `identity.connections.${number}.idpConnection.idpConnectionId` | `identity.connections.${number}.idpConnection.idpUserId` | `identity.connections.${number}.authenticatorConnection.authenticatorConnectionId` | `identity.connections.${number}.authenticatorConnection.reEnrollmentRequired` | `identity.identityProfile.emails` | `identity.identityProfile.phones` | `identity.identityProfile.labels` | `identity.identityProfile.privacyStatus` | `identity.identityProfile.customFields` | `identity.identityProfile.customFields.${number}.name` | `identity.identityProfile.customFields.${number}.value.strValue` | `identity.identityProfile.customFields.${number}.value.numValue` | `identity.identityProfile.secondaryEmails` | `identity.identityProfile.secondaryEmails.${number}.email` | `identity.identityProfile.secondaryEmails.${number}.tag` | `identity.identityProfile.phonesV2` | `identity.identityProfile.phonesV2.${number}.phone` | `identity.identityProfile.phonesV2.${number}.tag` | `identity.identityProfile.addresses` | `identity.identityProfile.addresses.${number}.tag` | `identity.email.address` | `identity.email.isVerified` | `identity.status.name` | `identity.status.reasons` | `identity.factors` | `identity.factors.${number}.factorId` | `identity.factors.${number}.type` | `identity.factors.${number}.status`> & {
        __applicationErrorsType?: RegisterV2ApplicationErrors;
        __validationErrorsType?: RegisterV2ValidationErrors;
    }>;
}
declare function loginV2$1(httpClient: HttpClient): LoginV2Signature;
interface LoginV2Signature {
    /**
     * Logs in an existing member.
     *
     * Typically, after a successful login, you generate and use member tokens for the
     * logged-in member so that subsequent API calls are called as part of a member session.
     * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
     * @param - Identifier of identity logging in.
     */
    (loginId: LoginId, options?: LoginV2Options): Promise<NonNullablePaths<StateMachineResponse, `state` | `identity.connections` | `identity.connections.${number}.idpConnection.idpConnectionId` | `identity.connections.${number}.idpConnection.idpUserId` | `identity.connections.${number}.authenticatorConnection.authenticatorConnectionId` | `identity.connections.${number}.authenticatorConnection.reEnrollmentRequired` | `identity.identityProfile.emails` | `identity.identityProfile.phones` | `identity.identityProfile.labels` | `identity.identityProfile.privacyStatus` | `identity.identityProfile.customFields` | `identity.identityProfile.customFields.${number}.name` | `identity.identityProfile.customFields.${number}.value.strValue` | `identity.identityProfile.customFields.${number}.value.numValue` | `identity.identityProfile.secondaryEmails` | `identity.identityProfile.secondaryEmails.${number}.email` | `identity.identityProfile.secondaryEmails.${number}.tag` | `identity.identityProfile.phonesV2` | `identity.identityProfile.phonesV2.${number}.phone` | `identity.identityProfile.phonesV2.${number}.tag` | `identity.identityProfile.addresses` | `identity.identityProfile.addresses.${number}.tag` | `identity.email.address` | `identity.email.isVerified` | `identity.status.name` | `identity.status.reasons` | `identity.factors` | `identity.factors.${number}.factorId` | `identity.factors.${number}.type` | `identity.factors.${number}.status`> & {
        __applicationErrorsType?: LoginV2ApplicationErrors;
        __validationErrorsType?: LoginV2ValidationErrors;
    }>;
}
declare function changePassword$1(httpClient: HttpClient): ChangePasswordSignature;
interface ChangePasswordSignature {
    /**
     * Changes the password of a logged in user.
     * @param - The new password to set for the logged in user
     */
    (newPassword: string): Promise<void>;
}
declare function signOn$1(httpClient: HttpClient): SignOnSignature;
interface SignOnSignature {
    /** @param - the identifier of the identity */
    (loginId: LoginId, options?: SignOnOptions): Promise<NonNullablePaths<SignOnResponse, `sessionToken` | `identity.connections` | `identity.connections.${number}.idpConnection.idpConnectionId` | `identity.connections.${number}.idpConnection.idpUserId` | `identity.connections.${number}.authenticatorConnection.authenticatorConnectionId` | `identity.connections.${number}.authenticatorConnection.reEnrollmentRequired` | `identity.identityProfile.emails` | `identity.identityProfile.phones` | `identity.identityProfile.labels` | `identity.identityProfile.privacyStatus` | `identity.identityProfile.customFields` | `identity.identityProfile.customFields.${number}.name` | `identity.identityProfile.customFields.${number}.value.strValue` | `identity.identityProfile.customFields.${number}.value.numValue` | `identity.identityProfile.secondaryEmails` | `identity.identityProfile.secondaryEmails.${number}.email` | `identity.identityProfile.secondaryEmails.${number}.tag` | `identity.identityProfile.phonesV2` | `identity.identityProfile.phonesV2.${number}.phone` | `identity.identityProfile.phonesV2.${number}.tag` | `identity.identityProfile.addresses` | `identity.identityProfile.addresses.${number}.tag` | `identity.email.address` | `identity.email.isVerified` | `identity.status.name` | `identity.status.reasons` | `identity.factors` | `identity.factors.${number}.factorId` | `identity.factors.${number}.type` | `identity.factors.${number}.status`>>;
}
declare function logout$1(httpClient: HttpClient): LogoutSignature;
interface LogoutSignature {
    /**
     * Logs out a member.
     */
    (options?: LogoutOptions): Promise<NonNullablePaths<RawHttpResponse, `body` | `headers` | `headers.${number}.key` | `headers.${number}.value`>>;
}
declare function verify$1(httpClient: HttpClient): VerifySignature;
interface VerifySignature {
    /** */
    (factorType: FactorTypeWithLiterals, options?: VerifyOptions): Promise<NonNullablePaths<StateMachineResponse, `state` | `identity.connections` | `identity.connections.${number}.idpConnection.idpConnectionId` | `identity.connections.${number}.idpConnection.idpUserId` | `identity.connections.${number}.authenticatorConnection.authenticatorConnectionId` | `identity.connections.${number}.authenticatorConnection.reEnrollmentRequired` | `identity.identityProfile.emails` | `identity.identityProfile.phones` | `identity.identityProfile.labels` | `identity.identityProfile.privacyStatus` | `identity.identityProfile.customFields` | `identity.identityProfile.customFields.${number}.name` | `identity.identityProfile.customFields.${number}.value.strValue` | `identity.identityProfile.customFields.${number}.value.numValue` | `identity.identityProfile.secondaryEmails` | `identity.identityProfile.secondaryEmails.${number}.email` | `identity.identityProfile.secondaryEmails.${number}.tag` | `identity.identityProfile.phonesV2` | `identity.identityProfile.phonesV2.${number}.phone` | `identity.identityProfile.phonesV2.${number}.tag` | `identity.identityProfile.addresses` | `identity.identityProfile.addresses.${number}.tag` | `identity.email.address` | `identity.email.isVerified` | `identity.status.name` | `identity.status.reasons` | `identity.factors` | `identity.factors.${number}.factorId` | `identity.factors.${number}.type` | `identity.factors.${number}.status`>>;
}

declare const registerV2: MaybeContext<BuildRESTFunction<typeof registerV2$1> & typeof registerV2$1>;
declare const loginV2: MaybeContext<BuildRESTFunction<typeof loginV2$1> & typeof loginV2$1>;
declare const changePassword: MaybeContext<BuildRESTFunction<typeof changePassword$1> & typeof changePassword$1>;
declare const signOn: MaybeContext<BuildRESTFunction<typeof signOn$1> & typeof signOn$1>;
declare const logout: MaybeContext<BuildRESTFunction<typeof logout$1> & typeof logout$1>;
declare const verify: MaybeContext<BuildRESTFunction<typeof verify$1> & typeof verify$1>;

export { LoginId, LoginV2Options, LogoutOptions, RawHttpResponse, RegisterV2Options, SignOnOptions, SignOnResponse, StateMachineResponse, VerifyOptions, changePassword, loginV2, logout, registerV2, signOn, verify };
