import { HttpClient, NonNullablePaths, EventDefinition, MaybeContext, BuildRESTFunction, BuildEventDefinition } from '@wix/sdk-types';
import { DraftPost, CreateDraftPostOptions, CreateDraftPostResponse, BulkCreateDraftPostsOptions, BulkCreateDraftPostsResponse, BulkUpdateDraftPostsOptions, BulkUpdateDraftPostsResponse, ListDeletedDraftPostsOptions, ListDeletedDraftPostsResponse, GetDraftPostOptions, GetDraftPostResponse, UpdateDraftPost, UpdateDraftPostOptions, UpdateDraftPostResponse, DeleteDraftPostOptions, BulkDeleteDraftPostsOptions, BulkDeleteDraftPostsResponse, ListDraftPostsOptions, ListDraftPostsResponse, GetDeletedDraftPostResponse, RestoreFromTrashBinResponse, QueryDraftPostsOptions, DraftPostsQueryBuilder, PublishDraftPostResponse, DraftCreatedEnvelope, DraftDeletedEnvelope, DraftUpdatedEnvelope } from './index.typings.js';
export { Action, ActionEvent, Alignment, AnchorData, AppEmbedData, AppEmbedDataAppDataOneOf, AppType, ApplicationError, ApproveDraftPostRequest, ApproveDraftPostResponse, AspectRatio, AudioData, Background, BackgroundBackgroundOneOf, BackgroundType, BaseEventMetadata, BlockquoteData, BlogPaging, BookingData, Border, BorderColors, BulkActionMetadata, BulkCreateDraftPostsRequest, BulkDeleteDraftPostsRequest, BulkDraftPostResult, BulkRejectDraftPostRequest, BulkRejectDraftPostResponse, BulkRevertToUnpublishedRequest, BulkRevertToUnpublishedResponse, BulkUpdateDraftPostLanguageRequest, BulkUpdateDraftPostLanguageResponse, BulkUpdateDraftPostsRequest, BulletedListData, ButtonData, ButtonDataType, ButtonStyles, CaptionData, CardStyles, CardStylesType, Category, CategoryTranslation, CellStyle, CodeBlockData, CollapsibleListData, ColorData, Colors, CoverMedia, CoverMediaMediaOneOf, CreateDraftPostRequest, Crop, CursorPaging, Cursors, Decoration, DecorationDataOneOf, DecorationType, DeleteDraftPostRequest, DeleteDraftPostResponse, Design, Dimensions, Direction, DividerData, DividerDataAlignment, DocumentStyle, DomainEvent, DomainEventBodyOneOf, DraftCategoriesUpdated, DraftPostOwnerChanged, DraftPostTranslation, DraftPostsQueryResult, DraftTagsUpdated, EmbedData, EmbedMedia, EmbedThumbnail, EmbedVideo, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventData, EventMetadata, Field, FileData, FileSource, FileSourceDataOneOf, FocalPoint, FontSizeData, FontType, GIF, GIFData, GIFType, GalleryData, GalleryOptions, GalleryOptionsLayout, GetDeletedDraftPostRequest, GetDraftPostRequest, GetDraftPostTotalsRequest, GetDraftPostTotalsResponse, GetDraftPostsSort, GetPostAmountsByLanguageRequest, GetPostAmountsByLanguageResponse, Gradient, HTMLData, HTMLDataDataOneOf, HeadingData, Height, IdentificationData, IdentificationDataIdOneOf, Image, ImageData, ImageDataStyles, ImageStyles, InitialDraftPostsCopied, InitialExpandedItems, IsDraftPostAutoTranslatableRequest, IsDraftPostAutoTranslatableResponse, Item, ItemDataOneOf, ItemMetadata, ItemStyle, Keyword, Layout, LayoutCellData, LayoutType, LineStyle, Link, LinkData, LinkDataOneOf, LinkPreviewData, LinkPreviewDataStyles, ListDeletedDraftPostsRequest, ListDraftPostsRequest, ListValue, MapData, MapSettings, MapType, MarkPostAsInModerationRequest, MarkPostAsInModerationResponse, MaskedDraftPosts, Media, MediaMediaOneOf, MentionData, MessageEnvelope, MetaData, Metadata, ModerationDetails, ModerationStatusStatus, Node, NodeDataOneOf, NodeStyle, NodeType, NullValue, Oembed, Option, OptionDesign, OptionLayout, OrderedListData, Orientation, Origin, PDFSettings, Paging, PagingMetadataV2, ParagraphData, Permissions, Placement, PlatformQuery, PlatformQueryPagingMethodOneOf, PlaybackOptions, PluginContainerData, PluginContainerDataAlignment, PluginContainerDataWidth, PluginContainerDataWidthDataOneOf, Poll, PollData, PollDataLayout, PollDesign, PollLayout, PollLayoutDirection, PollLayoutType, PollSettings, Position, PostAmountByLanguage, PricingData, PublishDraftPostRequest, QueryDraftPostsRequest, QueryDraftPostsResponse, RejectDraftPostRequest, RejectDraftPostResponse, Rel, RemoveFromTrashBinRequest, RemoveFromTrashBinResponse, Resizing, RestoreFromTrashBinRequest, RestoreInfo, RevertToUnpublishedRequest, RevertToUnpublishedResponse, RibbonStyles, RichContent, SeoSchema, Settings, SortOrder, Sorting, Source, Spoiler, SpoilerData, Status, Styles, StylesBorder, StylesPosition, TableCellData, TableData, Tag, Target, TextAlignment, TextData, TextNodeStyle, TextStyle, Thumbnails, ThumbnailsAlignment, TotalDraftPosts, TotalDraftPostsGroupingField, TranslateCategoryRequest, TranslateCategoryResponse, TranslateDraftRequest, TranslateDraftResponse, Type, UnpublishPostRequest, UnpublishPostResponse, UpdateDraftPostContentRequest, UpdateDraftPostContentResponse, UpdateDraftPostLanguageRequest, UpdateDraftPostLanguageResponse, UpdateDraftPostRequest, V1Media, VerticalAlignment, Video, VideoData, VideoResolution, ViewMode, ViewRole, VoteRole, WebhookIdentityType, Width, WidthType, WixMedia } from './index.typings.js';

type DraftNonNullablePaths = `_id` | `title` | `categoryIds` | `hashtags` | `minutesToRead` | `tagIds` | `relatedPostIds` | `pricingPlanIds` | `status` | `moderationDetails.submittedBy` | `moderationDetails.status` | `hasUnpublishedChanges` | `seoData.tags` | `seoData.tags.${number}.type` | `seoData.tags.${number}.children` | `seoData.tags.${number}.custom` | `seoData.tags.${number}.disabled` | `seoData.settings.preventAutoRedirect` | `seoData.settings.keywords` | `seoData.settings.keywords.${number}.term` | `seoData.settings.keywords.${number}.isMain` | `media.embedMedia.thumbnail.url` | `media.embedMedia.thumbnail.width` | `media.embedMedia.thumbnail.height` | `media.embedMedia.video.url` | `media.embedMedia.video.width` | `media.embedMedia.video.height` | `media.displayed` | `media.custom`;
declare function createDraftPost$1(httpClient: HttpClient): CreateDraftPostSignature;
interface CreateDraftPostSignature {
    /**
     * Creates a draft post.
     *
     * For 3rd-party apps, `memberId` is a required field.
     *
     * In `categoryIds`, only categories that already exist will be added to the draft post. Including
     * `categoryIds` that do not exist will not return an error, but they will not be added to the `categoryIds` array.
     * If some of the categories exist, those will be added while those that do not exist will not be added to `categoryIds`.
     * You can check which categories are available with
     * List Categories ([SDK](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/list-categories) | [REST](https://dev.wix.com/docs/rest/business-solutions/blog/category/list-categories)).
     * @param - Draft post to create.
     * @param - Options for creating a draft post.
     */
    (draftPost: NonNullablePaths<DraftPost, `title`>, options?: CreateDraftPostOptions): Promise<NonNullablePaths<CreateDraftPostResponse, {
        [P in DraftNonNullablePaths]: `draftPost.${P}`;
    }[DraftNonNullablePaths]>>;
}
declare function bulkCreateDraftPosts$1(httpClient: HttpClient): BulkCreateDraftPostsSignature;
interface BulkCreateDraftPostsSignature {
    /**
     * Creates multiple draft posts.
     * @param - Draft posts to create.
     * @param - Options for creating multiple draft posts.
     */
    (draftPosts: NonNullablePaths<DraftPost, `title`>[], options?: BulkCreateDraftPostsOptions): Promise<NonNullablePaths<BulkCreateDraftPostsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | {
        [P in DraftNonNullablePaths]: `results.${number}.item.${P}`;
    }[DraftNonNullablePaths] | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`>>;
}
declare function bulkUpdateDraftPosts$1(httpClient: HttpClient): BulkUpdateDraftPostsSignature;
interface BulkUpdateDraftPostsSignature {
    /**
     * Updates multiple draft posts.
     * @param - Options for updating multiple draft posts.
     */
    (options?: NonNullablePaths<BulkUpdateDraftPostsOptions, `draftPosts.${number}.draftPost` | `draftPosts.${number}.draftPost._id`>): Promise<NonNullablePaths<BulkUpdateDraftPostsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | {
        [P in DraftNonNullablePaths]: `results.${number}.item.${P}`;
    }[DraftNonNullablePaths] | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`>>;
}
declare function listDeletedDraftPosts$1(httpClient: HttpClient): ListDeletedDraftPostsSignature;
interface ListDeletedDraftPostsSignature {
    /**
     * Retrieves a list of up to 100 deleted draft posts.
     *
     * List Draft Posts runs with these defaults, which you can override:
     * - `editedDate` is sorted in descending order. In this case,`editedDate` implies the date the post was deleted.
     * - `paging.limit` is `50`.
     * - `paging.offset` is `0`.
     * @param - Options for listing deleted draft posts.
     */
    (options?: ListDeletedDraftPostsOptions): Promise<NonNullablePaths<ListDeletedDraftPostsResponse, {
        [P in DraftNonNullablePaths]: `draftPosts.${number}.${P}`;
    }[DraftNonNullablePaths]>>;
}
declare function getDraftPost$1(httpClient: HttpClient): GetDraftPostSignature;
interface GetDraftPostSignature {
    /**
     * Retrieves a draft post by the provided ID.
     * @param - Draft post ID.
     * @param - Options for getting a draft post.
     */
    (draftPostId: string, options?: GetDraftPostOptions): Promise<NonNullablePaths<GetDraftPostResponse, {
        [P in DraftNonNullablePaths]: `draftPost.${P}`;
    }[DraftNonNullablePaths]>>;
}
declare function updateDraftPost$1(httpClient: HttpClient): UpdateDraftPostSignature;
interface UpdateDraftPostSignature {
    /**
     * Updates a draft post.
     * @param - Draft post ID.
     * @param - Options for updating a draft post.
     * @param - Draft Post info.
     */
    (_id: string, draftPost: UpdateDraftPost, options?: UpdateDraftPostOptions): Promise<NonNullablePaths<UpdateDraftPostResponse, {
        [P in DraftNonNullablePaths]: `draftPost.${P}`;
    }[DraftNonNullablePaths]>>;
}
declare function deleteDraftPost$1(httpClient: HttpClient): DeleteDraftPostSignature;
interface DeleteDraftPostSignature {
    /**
     * Moves a draft post to the trash bin.
     * A published post can also be deleted by the `post.id`. See the Posts API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/blog/posts/) | [REST](https://dev.wix.com/docs/rest/business-solutions/blog/posts-stats/post-object)) for more information about posts.
     *
     * To permanently delete a post bypassing the trash bin, set the `permanent` field value to `true`. The post can't be restored after this.
     * @param - Draft post ID.
     * @param - Options for deleting a draft post.
     */
    (draftPostId: string, options?: DeleteDraftPostOptions): Promise<void>;
}
declare function removeFromTrashBin$1(httpClient: HttpClient): RemoveFromTrashBinSignature;
interface RemoveFromTrashBinSignature {
    /**
     * Permanently deletes a draft post that is currently in the trash bin.
     *
     * This action is permanent and can't be reversed.
     * @param - Draft post ID.
     */
    (draftPostId: string): Promise<void>;
}
declare function bulkDeleteDraftPosts$1(httpClient: HttpClient): BulkDeleteDraftPostsSignature;
interface BulkDeleteDraftPostsSignature {
    /**
     * Deletes multiple draft posts.
     * @param - Post IDs.
     * @param - Options for deleting multiple draft posts.
     */
    (postIds: string[], options?: BulkDeleteDraftPostsOptions): Promise<NonNullablePaths<BulkDeleteDraftPostsResponse, `results` | `results.${number}.itemMetadata.originalIndex` | `results.${number}.itemMetadata.success` | `results.${number}.itemMetadata.error.code` | `results.${number}.itemMetadata.error.description` | {
        [P in DraftNonNullablePaths]: `results.${number}.item.${P}`;
    }[DraftNonNullablePaths] | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`>>;
}
declare function listDraftPosts$1(httpClient: HttpClient): ListDraftPostsSignature;
interface ListDraftPostsSignature {
    /**
     * Retrieves a list of up to 100 draft posts per request.
     *
     * List Draft Posts runs with these defaults, which you can override:
     * - `editedDate` is sorted in descending order.
     * - `paging.limit` is `50`.
     * - `paging.offset` is `0`.
     * @param - Options for listing multiple draft posts.
     */
    (options?: ListDraftPostsOptions): Promise<NonNullablePaths<ListDraftPostsResponse, {
        [P in DraftNonNullablePaths]: `draftPosts.${number}.${P}`;
    }[DraftNonNullablePaths] | `metaData.count` | `metaData.offset` | `metaData.total`>>;
}
declare function getDeletedDraftPost$1(httpClient: HttpClient): GetDeletedDraftPostSignature;
interface GetDeletedDraftPostSignature {
    /**
     * Retrieves a deleted draft post from the trash bin by the provided ID.
     * @param - Draft post ID.
     */
    (draftPostId: string): Promise<NonNullablePaths<GetDeletedDraftPostResponse, {
        [P in DraftNonNullablePaths]: `draftPost.${P}`;
    }[DraftNonNullablePaths]>>;
}
declare function restoreFromTrashBin$1(httpClient: HttpClient): RestoreFromTrashBinSignature;
interface RestoreFromTrashBinSignature {
    /**
     * Restores a deleted draft post from the trash bin by the provided ID.
     * @param - Draft post ID.
     */
    (draftPostId: string): Promise<NonNullablePaths<RestoreFromTrashBinResponse, {
        [P in DraftNonNullablePaths]: `draftPost.${P}`;
    }[DraftNonNullablePaths]>>;
}
declare function queryDraftPosts$1(httpClient: HttpClient): QueryDraftPostsSignature;
interface QueryDraftPostsSignature {
    /**
     * Creates a query to retrieve a list of up to 100 draft posts.
     *
     *
     * The `queryDraftPosts()` function builds a query to retrieve a list of up to 100 draft posts, and returns a `DraftPostsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `DraftPostsQueryBuilder` functions onto the query. `DraftPostsQueryBuilder` functions enable you to sort, filter, and control the results that `queryDraftPosts()` returns.
     *
     * `queryDraftPosts()` runs with these `DraftPostsQueryBuilder` defaults that can be overridden:
     * - `limit(50)`
     * - `ascending('_id')`
     *
     * The following `DraftPostsQueryBuilder` functions are supported for `queryDraftPosts()`. For a full description of the Draft Posts object, see the object returned for the `items` property in `DraftPostsQueryResult`.
     * @param - Options for querying draft posts.
     */
    (options?: QueryDraftPostsOptions): DraftPostsQueryBuilder;
}
declare function publishDraftPost$1(httpClient: HttpClient): PublishDraftPostSignature;
interface PublishDraftPostSignature {
    /**
     * Publishes a draft post by ID. This creates a new post ([SDK](https://dev.wix.com/docs/sdk/backend-modules/blog/posts/) | [REST](https://dev.wix.com/docs/rest/business-solutions/blog/posts-stats/post-object))
     * with the data from the draft post.
     *
     * If the draft post was already published, the published post will be updated with the latest values
     * from the draft post.
     * @param - Draft post ID.
     */
    (draftPostId: string): Promise<NonNullablePaths<PublishDraftPostResponse, `postId`>>;
}
declare const onDraftCreated$1: EventDefinition<DraftCreatedEnvelope, "wix.blog.v3.draft_created">;
declare const onDraftDeleted$1: EventDefinition<DraftDeletedEnvelope, "wix.blog.v3.draft_deleted">;
declare const onDraftUpdated$1: EventDefinition<DraftUpdatedEnvelope, "wix.blog.v3.draft_updated">;

declare const createDraftPost: MaybeContext<BuildRESTFunction<typeof createDraftPost$1> & typeof createDraftPost$1>;
declare const bulkCreateDraftPosts: MaybeContext<BuildRESTFunction<typeof bulkCreateDraftPosts$1> & typeof bulkCreateDraftPosts$1>;
declare const bulkUpdateDraftPosts: MaybeContext<BuildRESTFunction<typeof bulkUpdateDraftPosts$1> & typeof bulkUpdateDraftPosts$1>;
declare const listDeletedDraftPosts: MaybeContext<BuildRESTFunction<typeof listDeletedDraftPosts$1> & typeof listDeletedDraftPosts$1>;
declare const getDraftPost: MaybeContext<BuildRESTFunction<typeof getDraftPost$1> & typeof getDraftPost$1>;
declare const updateDraftPost: MaybeContext<BuildRESTFunction<typeof updateDraftPost$1> & typeof updateDraftPost$1>;
declare const deleteDraftPost: MaybeContext<BuildRESTFunction<typeof deleteDraftPost$1> & typeof deleteDraftPost$1>;
declare const removeFromTrashBin: MaybeContext<BuildRESTFunction<typeof removeFromTrashBin$1> & typeof removeFromTrashBin$1>;
declare const bulkDeleteDraftPosts: MaybeContext<BuildRESTFunction<typeof bulkDeleteDraftPosts$1> & typeof bulkDeleteDraftPosts$1>;
declare const listDraftPosts: MaybeContext<BuildRESTFunction<typeof listDraftPosts$1> & typeof listDraftPosts$1>;
declare const getDeletedDraftPost: MaybeContext<BuildRESTFunction<typeof getDeletedDraftPost$1> & typeof getDeletedDraftPost$1>;
declare const restoreFromTrashBin: MaybeContext<BuildRESTFunction<typeof restoreFromTrashBin$1> & typeof restoreFromTrashBin$1>;
declare const queryDraftPosts: MaybeContext<BuildRESTFunction<typeof queryDraftPosts$1> & typeof queryDraftPosts$1>;
declare const publishDraftPost: MaybeContext<BuildRESTFunction<typeof publishDraftPost$1> & typeof publishDraftPost$1>;
/**
 * Triggered when a draft post is created.
 */
declare const onDraftCreated: BuildEventDefinition<typeof onDraftCreated$1>;
/**
 * Triggered when a draft post is deleted.
 */
declare const onDraftDeleted: BuildEventDefinition<typeof onDraftDeleted$1>;
/**
 * Triggered when a draft post is updated.
 */
declare const onDraftUpdated: BuildEventDefinition<typeof onDraftUpdated$1>;

export { BulkCreateDraftPostsOptions, BulkCreateDraftPostsResponse, BulkDeleteDraftPostsOptions, BulkDeleteDraftPostsResponse, BulkUpdateDraftPostsOptions, BulkUpdateDraftPostsResponse, CreateDraftPostOptions, CreateDraftPostResponse, DeleteDraftPostOptions, DraftCreatedEnvelope, DraftDeletedEnvelope, DraftPost, DraftPostsQueryBuilder, DraftUpdatedEnvelope, GetDeletedDraftPostResponse, GetDraftPostOptions, GetDraftPostResponse, ListDeletedDraftPostsOptions, ListDeletedDraftPostsResponse, ListDraftPostsOptions, ListDraftPostsResponse, PublishDraftPostResponse, QueryDraftPostsOptions, RestoreFromTrashBinResponse, UpdateDraftPost, UpdateDraftPostOptions, UpdateDraftPostResponse, bulkCreateDraftPosts, bulkDeleteDraftPosts, bulkUpdateDraftPosts, createDraftPost, deleteDraftPost, getDeletedDraftPost, getDraftPost, listDeletedDraftPosts, listDraftPosts, onDraftCreated, onDraftDeleted, onDraftUpdated, publishDraftPost, queryDraftPosts, removeFromTrashBin, restoreFromTrashBin, updateDraftPost };
