{"version":3,"sources":["../../index.ts","../../src/blog-v3-category-categories.public.ts","../../src/blog-v3-category-categories.universal.ts","../../src/blog-v3-category-categories.http.ts","../../src/blog-v3-category-categories.context.ts"],"sourcesContent":["export * from './src/blog-v3-category-categories.context.js';\n","import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';\nimport { transformRESTPageURLToSDKPageURL } from '@wix/sdk-runtime/transformations/page-url';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { EventDefinition, HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport {\n  CategoriesQueryBuilder,\n  Category,\n  CategoryCreatedEnvelope,\n  CategoryDeletedEnvelope,\n  CategoryUpdatedEnvelope,\n  CreateCategoryOptions,\n  GetCategoryBySlugOptions,\n  GetCategoryBySlugResponse,\n  GetCategoryOptions,\n  GetCategoryResponse,\n  ListCategoriesOptions,\n  ListCategoriesResponse,\n  QueryCategoriesOptions,\n  UpdateCategory,\n  UpdateCategoryOptions,\n  createCategory as universalCreateCategory,\n  deleteCategory as universalDeleteCategory,\n  getCategory as universalGetCategory,\n  getCategoryBySlug as universalGetCategoryBySlug,\n  listCategories as universalListCategories,\n  queryCategories as universalQueryCategories,\n  updateCategory as universalUpdateCategory,\n} from './blog-v3-category-categories.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/blog' };\n\ntype CategoryNonNullablePaths =\n  | `_id`\n  | `label`\n  | `postCount`\n  | `title`\n  | `slug`\n  | `seoData.tags`\n  | `seoData.tags.${number}.type`\n  | `seoData.tags.${number}.children`\n  | `seoData.tags.${number}.custom`\n  | `seoData.tags.${number}.disabled`\n  | `seoData.settings.preventAutoRedirect`\n  | `seoData.settings.keywords`\n  | `seoData.settings.keywords.${number}.term`\n  | `seoData.settings.keywords.${number}.isMain`;\n\nexport function createCategory(\n  httpClient: HttpClient\n): CreateCategorySignature {\n  return (\n    category: NonNullablePaths<Category, `label`>,\n    options?: CreateCategoryOptions\n  ) =>\n    universalCreateCategory(\n      category,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface CreateCategorySignature {\n  /**\n   * Creates a category.\n   * @param - Category info.\n   * @returns Category info.\n   */\n  (\n    category: NonNullablePaths<Category, `label`>,\n    options?: CreateCategoryOptions\n  ): Promise<NonNullablePaths<Category, CategoryNonNullablePaths>>;\n}\n\nexport function updateCategory(\n  httpClient: HttpClient\n): UpdateCategorySignature {\n  return (\n    _id: string,\n    category: UpdateCategory,\n    options?: UpdateCategoryOptions\n  ) =>\n    universalUpdateCategory(\n      _id,\n      category,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateCategorySignature {\n  /**\n   * Updates a category.\n   * @param - Category ID.\n   * @returns Category info.\n   */\n  (\n    _id: string,\n    category: UpdateCategory,\n    options?: UpdateCategoryOptions\n  ): Promise<NonNullablePaths<Category, CategoryNonNullablePaths>>;\n}\n\nexport function getCategory(httpClient: HttpClient): GetCategorySignature {\n  return (categoryId: string, options?: GetCategoryOptions) =>\n    universalGetCategory(\n      categoryId,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetCategorySignature {\n  /**\n   * Gets a category with the specified ID.\n   * @param - Category ID.\n   * @param - Options specifying which fields to return.\n   */\n  (categoryId: string, options?: GetCategoryOptions): Promise<\n    NonNullablePaths<\n      GetCategoryResponse,\n      {\n        [P in CategoryNonNullablePaths]: `category.${P}`;\n      }[CategoryNonNullablePaths]\n    >\n  >;\n}\n\nexport function getCategoryBySlug(\n  httpClient: HttpClient\n): GetCategoryBySlugSignature {\n  return (slug: string, options?: GetCategoryBySlugOptions) =>\n    universalGetCategoryBySlug(\n      slug,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetCategoryBySlugSignature {\n  /**\n   * Gets a category with the specified slug.\n   *\n   * The slug is at the end of the URL of a specific category.\n   * For example, if a category's URL is `https://example.com/blog/categories/famous-cats`, the slug is `famous-cats`.\n   * The slug is a case-sensitive string that is derived from the category's label, unless specified otherwise.\n   * @param - Slug of the category to retrieve.\n   *\n   * The end of a category's URL. For example, `'https:/example.com/blog/category/{my-category-slug}'`. Case sensitive and generally based on the category `label` if not specified.\n   * @param - Options specifying which fields to return.\n   */\n  (slug: string, options?: GetCategoryBySlugOptions): Promise<\n    NonNullablePaths<\n      GetCategoryBySlugResponse,\n      {\n        [P in CategoryNonNullablePaths]: `category.${P}`;\n      }[CategoryNonNullablePaths]\n    >\n  >;\n}\n\nexport function listCategories(\n  httpClient: HttpClient\n): ListCategoriesSignature {\n  return (options?: ListCategoriesOptions) =>\n    universalListCategories(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ListCategoriesSignature {\n  /**\n   * Retrieves a list of up to 100 categories per request.\n   *\n   * If you pass a language filter to the method, it returns a list of up to 100 categories in the requested language.\n   *\n   * The categoies are displayed in order of their `displayPosition`, starting with `0`. The `displayPosition` is the position in which the categories\n   * are displayed in the Category Menu page. By default, categories get added to the bottom of the Category Menu page with a `displayPosition` of `-1`.\n   *\n   * List Categories runs with these defaults, which you can override:\n   * - `paging.limit` is `50`.\n   * - `paging.offset` is `0`.\n   *\n   * List Categories is sorted by `displayPosition` in descending order. This cannot be overridden.\n   * @param - Filter and paging options.\n   */\n  (options?: ListCategoriesOptions): Promise<\n    NonNullablePaths<\n      ListCategoriesResponse,\n      | {\n          [P in CategoryNonNullablePaths]: `categories.${number}.${P}`;\n        }[CategoryNonNullablePaths]\n      | `metaData.count`\n      | `metaData.offset`\n      | `metaData.total`\n    >\n  >;\n}\n\nexport function queryCategories(\n  httpClient: HttpClient\n): QueryCategoriesSignature {\n  return (options?: QueryCategoriesOptions) =>\n    universalQueryCategories(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface QueryCategoriesSignature {\n  /**\n   * Creates a query to retrieve a list of categories.\n   *\n   *\n   * The Query Categories method builds a query to retrieve a list of up to 100 categories per language, and returns a [`CategoriesQueryBuilder`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending) object.\n   *\n   * The response contains the query definition, which is typically used to run the query using the [`find()`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/find) method.\n   *\n   * You can refine the query by chaining `CategoriesQueryBuilder` methods to the query. `CategoriesQueryBuilder` methods enable you to sort, filter, and control the results that Query Categories returns. Any methods chained to the Query Categories method are applied in the order that they are called.\n   *\n   * Query Categories runs with these `CategoriesQueryBuilder` defaults, which you can override.\n   * - [`limit(100)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/limit)\n   * - [`ascending(displayPosition)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending)\n   *\n   * The following `CategoriesQueryBuilder` methods are supported for Query Categories. For a full description of the `Categories` object, see the response for the [`items`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-result/items) property in [`CategoriesQueryResult`](https://www.wix.com/velo/reference/wix-blog-backend/categories/categoriesqueryresult).\n   * @param - Options specifying which fields to return.\n   */\n  (options?: QueryCategoriesOptions): CategoriesQueryBuilder;\n}\n\nexport function deleteCategory(\n  httpClient: HttpClient\n): DeleteCategorySignature {\n  return (categoryId: string) =>\n    universalDeleteCategory(\n      categoryId,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteCategorySignature {\n  /**\n   * Deletes a category.\n   * @param - Category ID.\n   */\n  (categoryId: string): Promise<void>;\n}\n\nexport const onCategoryCreated = EventDefinition(\n  'wix.blog.v3.category_created',\n  true,\n  (event: CategoryCreatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'entity.url' }, { path: 'entity.translations.url' }],\n        },\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'entity.coverImage' }],\n        },\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<CategoryCreatedEnvelope>();\nexport const onCategoryDeleted = EventDefinition(\n  'wix.blog.v3.category_deleted',\n  true,\n  (event: CategoryDeletedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [\n            { path: 'undefined.url' },\n            { path: 'undefined.translations.url' },\n          ],\n        },\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'undefined.coverImage' }],\n        },\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'undefined.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<CategoryDeletedEnvelope>();\nexport const onCategoryUpdated = EventDefinition(\n  'wix.blog.v3.category_updated',\n  true,\n  (event: CategoryUpdatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [{ path: 'entity.url' }, { path: 'entity.translations.url' }],\n        },\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'entity.coverImage' }],\n        },\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<CategoryUpdatedEnvelope>();\n\nexport {\n  ActionEvent,\n  ApplicationError,\n  BaseEventMetadata,\n  BlogPaging,\n  BulkActionMetadata,\n  BulkCategoryResult,\n  BulkCreateCategoriesRequest,\n  BulkCreateCategoriesResponse,\n  BulkDeleteCategoryRequest,\n  BulkDeleteCategoryResponse,\n  BulkUpdateCategoriesRequest,\n  BulkUpdateCategoriesResponse,\n  CategoriesQueryBuilder,\n  CategoriesQueryResult,\n  Category,\n  CategoryCreatedEnvelope,\n  CategoryDeletedEnvelope,\n  CategoryLanguageCount,\n  CategoryTranslation,\n  CategoryUpdatedEnvelope,\n  CreateCategoryOptions,\n  CreateCategoryRequest,\n  CreateCategoryResponse,\n  CursorPaging,\n  Cursors,\n  DeleteCategoryRequest,\n  DeleteCategoryResponse,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  EntityDeletedEvent,\n  EntityUpdatedEvent,\n  EventMetadata,\n  Field,\n  FocalPoint,\n  GetCategoriesCountByLanguageRequest,\n  GetCategoriesCountByLanguageResponse,\n  GetCategoryBySlugOptions,\n  GetCategoryBySlugRequest,\n  GetCategoryBySlugResponse,\n  GetCategoryOptions,\n  GetCategoryRequest,\n  GetCategoryResponse,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  InitialCategoriesCopied,\n  ItemMetadata,\n  Keyword,\n  ListCategoriesOptions,\n  ListCategoriesRequest,\n  ListCategoriesResponse,\n  MaskedCategory,\n  MessageEnvelope,\n  MetaData,\n  Paging,\n  PagingMetadataV2,\n  PlatformQuery,\n  PlatformQueryPagingMethodOneOf,\n  QueryCategoriesOptions,\n  QueryCategoriesRequest,\n  QueryCategoriesResponse,\n  RestoreInfo,\n  SeoSchema,\n  Settings,\n  SortOrder,\n  Sorting,\n  Tag,\n  UpdateCategory,\n  UpdateCategoryOptions,\n  UpdateCategoryRequest,\n  UpdateCategoryResponse,\n  WebhookIdentityType,\n} from './blog-v3-category-categories.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport { queryBuilder } from '@wix/sdk-runtime/query-builder';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, HttpResponse, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixBlogV3Category from './blog-v3-category-categories.http.js';\n// @ts-ignore\nimport { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';\nimport { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';\nimport { transformSDKPageURLToRESTPageURL } from '@wix/sdk-runtime/transformations/page-url';\nimport { transformRESTPageURLToSDKPageURL } from '@wix/sdk-runtime/transformations/page-url';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\n\nexport interface Category {\n  /**\n   * Category ID.\n   * @immutable\n   * @maxLength 38\n   */\n  _id?: string;\n  /**\n   * Category label. Displayed in the Category Menu.\n   * @maxLength 35\n   */\n  label?: string;\n  /**\n   * Number of posts in the category.\n   * @readonly\n   */\n  postCount?: number;\n  /**\n   * The `url` of the page that lists every post with the specified category.\n   * @readonly\n   */\n  url?: string;\n  /**\n   * Category description.\n   * @maxLength 500\n   */\n  description?: string | null;\n  /**\n   * Category title.\n   * @maxLength 200\n   * @deprecated Category title.\n   * @targetRemovalDate 2025-07-16\n   */\n  title?: string;\n  /**\n   * Position of the category in the [Category Menu](https://support.wix.com/en/article/wix-blog-adding-and-customizing-a-category-menu).\n   * Categories are displayed in ascending order. Categories with a position of `-1` appear at the end of the sequence.\n   *\n   * Default: `-1`\n   */\n  displayPosition?: number | null;\n  /**\n   * ID of the category's translations. All translations of a single category share the same `translationId`.\n   * @format GUID\n   */\n  translationId?: string | null;\n  /**\n   * Category language.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * @immutable\n   */\n  language?: string | null;\n  /**\n   * Part of a category's URL that refers to a specific category. For example, the slug of `https:/example.com/blog/category/famous-cats` is `famous-cats`.\n   * @maxLength 100\n   */\n  slug?: string;\n  /** SEO data. */\n  seoData?: SeoSchema;\n  /** Category cover image. */\n  coverImage?: string;\n  /**\n   * Date and time the Category was last updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n}\n\n/**\n * The SEO schema object contains data about different types of meta tags. It makes sure that the information about your page is presented properly to search engines.\n * The search engines use this information for ranking purposes, or to display snippets in the search results.\n * This data will override other sources of tags (for example patterns) and will be included in the <head> section of the HTML document, while not being displayed on the page itself.\n */\nexport interface SeoSchema {\n  /** SEO tag information. */\n  tags?: Tag[];\n  /** SEO general settings. */\n  settings?: Settings;\n}\n\nexport interface Keyword {\n  /** Keyword value. */\n  term?: string;\n  /** Whether the keyword is the main focus keyword. */\n  isMain?: boolean;\n  /**\n   * The source that added the keyword terms to the SEO settings.\n   * @maxLength 1000\n   */\n  origin?: string | null;\n}\n\nexport interface Tag {\n  /**\n   * SEO tag type.\n   *\n   *\n   * Supported values: `title`, `meta`, `script`, `link`.\n   */\n  type?: string;\n  /**\n   * A `{\"key\": \"value\"}` pair object where each SEO tag property (`\"name\"`, `\"content\"`, `\"rel\"`, `\"href\"`) contains a value.\n   * For example: `{\"name\": \"description\", \"content\": \"the description itself\"}`.\n   */\n  props?: Record<string, any> | null;\n  /** SEO tag meta data. For example, `{\"height\": 300, \"width\": 240}`. */\n  meta?: Record<string, any> | null;\n  /** SEO tag inner content. For example, `<title> inner content </title>`. */\n  children?: string;\n  /** Whether the tag is a custom tag. */\n  custom?: boolean;\n  /** Whether the tag is disabled. */\n  disabled?: boolean;\n}\n\nexport interface Settings {\n  /**\n   * Whether the Auto Redirect feature, which creates `301 redirects` on a slug change, is enabled.\n   *\n   *\n   * Default: `false` (Auto Redirect is enabled.)\n   */\n  preventAutoRedirect?: boolean;\n  /**\n   * User-selected keyword terms for a specific page.\n   * @maxSize 5\n   */\n  keywords?: Keyword[];\n}\n\nexport interface FocalPoint {\n  /** X-coordinate of the focal point. */\n  x?: number;\n  /** Y-coordinate of the focal point. */\n  y?: number;\n  /** crop by height */\n  height?: number | null;\n  /** crop by width */\n  width?: number | null;\n}\n\nexport interface CategoryTranslation {\n  /**\n   * Category ID.\n   * @format GUID\n   */\n  _id?: string;\n  /**\n   * Label displayed in the categories menu on the site.\n   * @maxLength 100\n   */\n  label?: string | null;\n  /**\n   * Language of the category.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n  /** URL of this category page. */\n  url?: string;\n}\n\nexport interface InitialCategoriesCopied {\n  /** Number of categories copied. */\n  count?: number;\n}\n\nexport interface CreateCategoryRequest {\n  /** Category info. */\n  category: Category;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport enum Field {\n  UNKNOWN = 'UNKNOWN',\n  /** Includes category URL. */\n  URL = 'URL',\n  /** Includes SEO data. */\n  SEO = 'SEO',\n}\n\n/** @enumType */\nexport type FieldWithLiterals = Field | 'UNKNOWN' | 'URL' | 'SEO';\n\nexport interface CreateCategoryResponse {\n  /** Category info. */\n  category?: Category;\n}\n\nexport interface BulkCreateCategoriesRequest {\n  /**\n   * Categories to create.\n   * @minSize 1\n   * @maxSize 50\n   */\n  categories?: Category[];\n  /** Whether to return the full created category entities in the response. */\n  returnFullEntity?: boolean;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface BulkCreateCategoriesResponse {\n  /** Categories created by bulk action. */\n  results?: BulkCategoryResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface BulkCategoryResult {\n  /** Bulk actions metadata for category. */\n  itemMetadata?: ItemMetadata;\n  /** Optional created category. */\n  item?: Category;\n}\n\nexport interface ItemMetadata {\n  /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */\n  _id?: string | null;\n  /** Index of the item within the request array. Allows for correlation between request and response items. */\n  originalIndex?: number;\n  /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */\n  success?: boolean;\n  /** Details about the error in case of failure. */\n  error?: ApplicationError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\nexport interface BulkActionMetadata {\n  /** Number of items that were successfully processed. */\n  totalSuccesses?: number;\n  /** Number of items that couldn't be processed. */\n  totalFailures?: number;\n  /** Number of failures without details because detailed failure threshold was exceeded. */\n  undetailedFailures?: number;\n}\n\nexport interface BulkUpdateCategoriesRequest {\n  /**\n   * Categories to update.\n   * @minSize 1\n   * @maxSize 100\n   */\n  categories?: MaskedCategory[];\n  /** Whether to return the full created category entities in the response. */\n  returnFullEntity?: boolean;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface MaskedCategory {\n  /** Category */\n  category?: Category;\n  /** Field mask of fields to update. */\n  fieldMask?: string[];\n}\n\nexport interface BulkUpdateCategoriesResponse {\n  /** Categories updated by bulk action. */\n  results?: BulkCategoryResult[];\n  /** Bulk action metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface UpdateCategoryRequest {\n  /** Category info. */\n  category: Category;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface UpdateCategoryResponse {\n  /** Category info. */\n  category?: Category;\n}\n\nexport interface GetCategoriesCountByLanguageRequest {}\n\nexport interface GetCategoriesCountByLanguageResponse {\n  /** The language and it's count. */\n  categoriesLanguageCount?: CategoryLanguageCount[];\n}\n\nexport interface CategoryLanguageCount {\n  /**\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * @format LANGUAGE_TAG\n   */\n  languageCode?: string | null;\n  /** The count of Categories for the language. */\n  categoryCount?: number | null;\n}\n\nexport interface GetCategoryRequest {\n  /**\n   * Category ID.\n   * @minLength 1\n   * @maxLength 38\n   */\n  categoryId: string;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface GetCategoryResponse {\n  /** Category info. */\n  category?: Category;\n}\n\nexport interface GetCategoryBySlugRequest {\n  /**\n   * Slug of the category to retrieve.\n   * @minLength 1\n   * @maxLength 100\n   */\n  slug: string;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n  /**\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * Language of the category to retrieve.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n}\n\nexport interface GetCategoryBySlugResponse {\n  /** Category info. */\n  category?: Category;\n}\n\nexport interface ListCategoriesRequest {\n  /** Pagination options. */\n  paging?: BlogPaging;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n  /**\n   * Language filter.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * Pass a language to only receive categories that are in that language.\n   * If omitted, categories in all languages are returned.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n}\n\nexport interface BlogPaging {\n  /**\n   * Number of items to skip in the current sort order.\n   *\n   *\n   * Default: `0`\n   */\n  offset?: number;\n  /**\n   * Number of items to return.\n   *\n   * Default: `50`\n   *\n   * Max: `100`\n   * @min 1\n   * @max 100\n   */\n  limit?: number;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   * @maxLength 2000\n   */\n  cursor?: string | null;\n}\n\nexport interface ListCategoriesResponse {\n  /** List of categories. */\n  categories?: Category[];\n  /** Details on the paged set of results returned. */\n  metaData?: MetaData;\n}\n\nexport interface MetaData {\n  /** Number of items returned in this response. */\n  count?: number;\n  /** Requested offset. */\n  offset?: number;\n  /** Total number of items that match the query. */\n  total?: number;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   * @maxLength 2000\n   */\n  cursor?: string | null;\n}\n\nexport interface QueryCategoriesRequest {\n  /** Query options. */\n  query?: PlatformQuery;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\nexport interface PlatformQuery extends PlatformQueryPagingMethodOneOf {\n  /** Paging options to limit and skip the number of items. */\n  paging?: Paging;\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n  /**\n   * Filter object in the following format:\n   * `\"filter\" : {\n   * \"fieldName1\": \"value1\",\n   * \"fieldName2\":{\"$operator\":\"value2\"}\n   * }`\n   * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`\n   */\n  filter?: Record<string, any> | null;\n  /**\n   * Sort object in the following format:\n   * `[{\"fieldName\":\"sortField1\",\"order\":\"ASC\"},{\"fieldName\":\"sortField2\",\"order\":\"DESC\"}]`\n   * @maxSize 3\n   */\n  sort?: Sorting[];\n}\n\n/** @oneof */\nexport interface PlatformQueryPagingMethodOneOf {\n  /** Paging options to limit and skip the number of items. */\n  paging?: Paging;\n  /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface Sorting {\n  /**\n   * Name of the field to sort by.\n   * @maxLength 512\n   */\n  fieldName?: string;\n  /** Sort order. */\n  order?: SortOrderWithLiterals;\n}\n\nexport enum SortOrder {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\n/** @enumType */\nexport type SortOrderWithLiterals = SortOrder | 'ASC' | 'DESC';\n\nexport interface Paging {\n  /**\n   * Number of items to load.\n   * @max 100\n   */\n  limit?: number | null;\n  /** Number of items to skip in the current sort order. */\n  offset?: number | null;\n}\n\nexport interface CursorPaging {\n  /**\n   * Number of items to load.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * You can get the relevant cursor token\n   * from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 2000\n   */\n  cursor?: string | null;\n}\n\nexport interface QueryCategoriesResponse {\n  /** List of categories. */\n  categories?: Category[];\n  /** Details on the paged set of results returned. */\n  pagingMetadata?: PagingMetadataV2;\n}\n\nexport interface PagingMetadataV2 {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Offset that was requested. */\n  offset?: number | null;\n  /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */\n  total?: number | null;\n  /** Flag that indicates the server failed to calculate the `total` field. */\n  tooManyToCount?: boolean | null;\n  /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */\n  cursors?: Cursors;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor pointing to next page in the list of results.\n   * @maxLength 2000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to previous page in the list of results.\n   * @maxLength 2000\n   */\n  prev?: string | null;\n}\n\nexport interface BulkDeleteCategoryRequest {\n  /**\n   * Category IDs.\n   * @minSize 1\n   * @maxSize 100\n   * @maxLength 38\n   */\n  categoryIds?: string[];\n  /** Should delete bypassing the trash-bin. */\n  permanent?: boolean;\n}\n\nexport interface BulkDeleteCategoryResponse {}\n\nexport interface DeleteCategoryRequest {\n  /**\n   * Category ID.\n   * @minLength 1\n   * @maxLength 38\n   */\n  categoryId: string;\n}\n\nexport interface DeleteCategoryResponse {}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted. */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityTypeWithLiterals;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/** @enumType */\nexport type WebhookIdentityTypeWithLiterals =\n  | WebhookIdentityType\n  | 'UNKNOWN'\n  | 'ANONYMOUS_VISITOR'\n  | 'MEMBER'\n  | 'WIX_USER'\n  | 'APP';\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /** Event ID. With this ID you can easily spot duplicated events and ignore them. */\n  _id?: string;\n  /**\n   * Fully Qualified Domain Name of an entity. This is a unique identifier assigned to the API main business entities.\n   * For example, `wix.stores.catalog.product`, `wix.bookings.session`, `wix.payments.transaction`.\n   */\n  entityFqdn?: string;\n  /**\n   * Event action name, placed at the top level to make it easier for users to dispatch messages.\n   * For example: `created`/`updated`/`deleted`/`started`/`completed`/`email_opened`.\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example, `2020-04-26T13:57:50.699Z`. */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number that indicates the order of updates to an entity. For example, if an entity was updated at 16:00 and then again at 16:01, the second update will always have a higher sequence number.\n   * You can use this number to make sure you're handling updates in the right order. Just save the latest sequence number on your end and compare it to the one in each new message. If the new message has an older (lower) number, you can safely ignore it.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface CategoryCreatedEnvelope {\n  entity: Category;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a category is created.\n * @permissionScope Read Blog\n * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG\n * @permissionScope Read Draft Blog Posts\n * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS\n * @permissionId BLOG.READ-CATEGORY\n * @webhook\n * @eventType wix.blog.v3.category_created\n * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.v3.CategoryService\n * @slug created\n */\nexport declare function onCategoryCreated(\n  handler: (event: CategoryCreatedEnvelope) => void | Promise<void>\n): void;\n\nexport interface CategoryDeletedEnvelope {\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a category is deleted.\n * @permissionScope Read Blog\n * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG\n * @permissionScope Read Draft Blog Posts\n * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS\n * @permissionId BLOG.READ-CATEGORY\n * @webhook\n * @eventType wix.blog.v3.category_deleted\n * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.v3.CategoryService\n * @slug deleted\n */\nexport declare function onCategoryDeleted(\n  handler: (event: CategoryDeletedEnvelope) => void | Promise<void>\n): void;\n\nexport interface CategoryUpdatedEnvelope {\n  entity: Category;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a category is updated.\n * @permissionScope Read Blog\n * @permissionScopeId SCOPE.DC-BLOG.READ-BLOGS\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.DC-BLOG.MANAGE-BLOG\n * @permissionScope Manage Blog\n * @permissionScopeId SCOPE.BLOG.MANAGE-BLOG\n * @permissionScope Read Draft Blog Posts\n * @permissionScopeId SCOPE.DC-BLOG.READ-DRAFT-POSTS\n * @permissionId BLOG.READ-CATEGORY\n * @webhook\n * @eventType wix.blog.v3.category_updated\n * @serviceIdentifier com.wixpress.npm.communities.platformized.blog.v3.CategoryService\n * @slug updated\n */\nexport declare function onCategoryUpdated(\n  handler: (event: CategoryUpdatedEnvelope) => void | Promise<void>\n): void;\n\ntype CategoryNonNullablePaths =\n  | `_id`\n  | `label`\n  | `postCount`\n  | `title`\n  | `slug`\n  | `seoData.tags`\n  | `seoData.tags.${number}.type`\n  | `seoData.tags.${number}.children`\n  | `seoData.tags.${number}.custom`\n  | `seoData.tags.${number}.disabled`\n  | `seoData.settings.preventAutoRedirect`\n  | `seoData.settings.keywords`\n  | `seoData.settings.keywords.${number}.term`\n  | `seoData.settings.keywords.${number}.isMain`;\n\n/**\n * Creates a category.\n * @param category - Category info.\n * @public\n * @requiredField category\n * @requiredField category.label\n * @permissionId BLOG.CREATE-CATEGORY\n * @applicableIdentity APP\n * @returns Category info.\n * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.CreateCategory\n */\nexport async function createCategory(\n  category: NonNullablePaths<Category, `label`>,\n  options?: CreateCategoryOptions\n): Promise<NonNullablePaths<Category, CategoryNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = transformPaths(\n    renameKeysFromSDKRequestToRESTRequest({\n      category: category,\n      fieldsets: options?.fieldsets,\n    }),\n    [\n      {\n        transformFn: transformSDKPageURLToRESTPageURL,\n        paths: [\n          { path: 'category.url' },\n          { path: 'category.translations.url' },\n        ],\n      },\n      {\n        transformFn: transformSDKImageToRESTImage,\n        paths: [{ path: 'category.coverImage' }],\n      },\n    ]\n  );\n\n  const reqOpts = ambassadorWixBlogV3Category.createCategory(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [\n            { path: 'category.url' },\n            { path: 'category.translations.url' },\n          ],\n        },\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'category.coverImage' }],\n        },\n      ])\n    )?.category!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          category: '$[0]',\n          fieldsets: '$[1].fieldsets',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['category', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface CreateCategoryOptions {\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\n/**\n * Updates a category.\n * @param _id - Category ID.\n * @public\n * @requiredField _id\n * @requiredField category\n * @permissionId BLOG.EDIT-CATEGORY\n * @applicableIdentity APP\n * @returns Category info.\n * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.UpdateCategory\n */\nexport async function updateCategory(\n  _id: string,\n  category: UpdateCategory,\n  options?: UpdateCategoryOptions\n): Promise<NonNullablePaths<Category, CategoryNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = transformPaths(\n    renameKeysFromSDKRequestToRESTRequest({\n      category: { ...category, id: _id },\n      fieldsets: options?.fieldsets,\n    }),\n    [\n      {\n        transformFn: transformSDKPageURLToRESTPageURL,\n        paths: [\n          { path: 'category.url' },\n          { path: 'category.translations.url' },\n        ],\n      },\n      {\n        transformFn: transformSDKImageToRESTImage,\n        paths: [{ path: 'category.coverImage' }],\n      },\n    ]\n  );\n\n  const reqOpts = ambassadorWixBlogV3Category.updateCategory(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [\n            { path: 'category.url' },\n            { path: 'category.translations.url' },\n          ],\n        },\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'category.coverImage' }],\n        },\n      ])\n    )?.category!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { category: '$[1]' },\n        explicitPathsToArguments: {\n          'category.id': '$[0]',\n          fieldsets: '$[2].fieldsets',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'category', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateCategory {\n  /**\n   * Category ID.\n   * @immutable\n   * @maxLength 38\n   */\n  _id?: string;\n  /**\n   * Category label. Displayed in the Category Menu.\n   * @maxLength 35\n   */\n  label?: string;\n  /**\n   * Number of posts in the category.\n   * @readonly\n   */\n  postCount?: number;\n  /**\n   * The `url` of the page that lists every post with the specified category.\n   * @readonly\n   */\n  url?: string;\n  /**\n   * Category description.\n   * @maxLength 500\n   */\n  description?: string | null;\n  /**\n   * Category title.\n   * @maxLength 200\n   * @deprecated Category title.\n   * @targetRemovalDate 2025-07-16\n   */\n  title?: string;\n  /**\n   * Position of the category in the [Category Menu](https://support.wix.com/en/article/wix-blog-adding-and-customizing-a-category-menu).\n   * Categories are displayed in ascending order. Categories with a position of `-1` appear at the end of the sequence.\n   *\n   * Default: `-1`\n   */\n  displayPosition?: number | null;\n  /**\n   * ID of the category's translations. All translations of a single category share the same `translationId`.\n   * @format GUID\n   */\n  translationId?: string | null;\n  /**\n   * Category language.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * @immutable\n   */\n  language?: string | null;\n  /**\n   * Part of a category's URL that refers to a specific category. For example, the slug of `https:/example.com/blog/category/famous-cats` is `famous-cats`.\n   * @maxLength 100\n   */\n  slug?: string;\n  /** SEO data. */\n  seoData?: SeoSchema;\n  /** Category cover image. */\n  coverImage?: string;\n  /**\n   * Date and time the Category was last updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n}\n\nexport interface UpdateCategoryOptions {\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\n/**\n * Gets a category with the specified ID.\n * @param categoryId - Category ID.\n * @public\n * @requiredField categoryId\n * @param options - Options specifying which fields to return.\n * @permissionId BLOG.READ-CATEGORY\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.GetCategory\n */\nexport async function getCategory(\n  categoryId: string,\n  options?: GetCategoryOptions\n): Promise<\n  NonNullablePaths<\n    GetCategoryResponse,\n    {\n      [P in CategoryNonNullablePaths]: `category.${P}`;\n    }[CategoryNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    categoryId: categoryId,\n    fieldsets: options?.fieldsets,\n  });\n\n  const reqOpts = ambassadorWixBlogV3Category.getCategory(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [\n            { path: 'category.url' },\n            { path: 'category.translations.url' },\n          ],\n        },\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'category.coverImage' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          categoryId: '$[0]',\n          fieldsets: '$[1].fieldsets',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['categoryId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetCategoryOptions {\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n}\n\n/**\n * Gets a category with the specified slug.\n *\n * The slug is at the end of the URL of a specific category.\n * For example, if a category's URL is `https://example.com/blog/categories/famous-cats`, the slug is `famous-cats`.\n * The slug is a case-sensitive string that is derived from the category's label, unless specified otherwise.\n * @public\n * @requiredField slug\n * @param slug - Slug of the category to retrieve.\n *\n * The end of a category's URL. For example, `'https:/example.com/blog/category/{my-category-slug}'`. Case sensitive and generally based on the category `label` if not specified.\n * @param options - Options specifying which fields to return.\n * @permissionId BLOG.READ-CATEGORY\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.GetCategoryBySlug\n */\nexport async function getCategoryBySlug(\n  slug: string,\n  options?: GetCategoryBySlugOptions\n): Promise<\n  NonNullablePaths<\n    GetCategoryBySlugResponse,\n    {\n      [P in CategoryNonNullablePaths]: `category.${P}`;\n    }[CategoryNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    slug: slug,\n    fieldsets: options?.fieldsets,\n    language: options?.language,\n  });\n\n  const reqOpts = ambassadorWixBlogV3Category.getCategoryBySlug(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [\n            { path: 'category.url' },\n            { path: 'category.translations.url' },\n          ],\n        },\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'category.coverImage' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          slug: '$[0]',\n          fieldsets: '$[1].fieldsets',\n          language: '$[1].language',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['slug', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetCategoryBySlugOptions {\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n  /**\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * Language of the category to retrieve.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n}\n\n/**\n * Retrieves a list of up to 100 categories per request.\n *\n * If you pass a language filter to the method, it returns a list of up to 100 categories in the requested language.\n *\n * The categoies are displayed in order of their `displayPosition`, starting with `0`. The `displayPosition` is the position in which the categories\n * are displayed in the Category Menu page. By default, categories get added to the bottom of the Category Menu page with a `displayPosition` of `-1`.\n *\n * List Categories runs with these defaults, which you can override:\n * - `paging.limit` is `50`.\n * - `paging.offset` is `0`.\n *\n * List Categories is sorted by `displayPosition` in descending order. This cannot be overridden.\n * @public\n * @param options - Filter and paging options.\n * @permissionId BLOG.READ-CATEGORY\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.ListCategories\n */\nexport async function listCategories(\n  options?: ListCategoriesOptions\n): Promise<\n  NonNullablePaths<\n    ListCategoriesResponse,\n    | {\n        [P in CategoryNonNullablePaths]: `categories.${number}.${P}`;\n      }[CategoryNonNullablePaths]\n    | `metaData.count`\n    | `metaData.offset`\n    | `metaData.total`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    paging: options?.paging,\n    fieldsets: options?.fieldsets,\n    language: options?.language,\n  });\n\n  const reqOpts = ambassadorWixBlogV3Category.listCategories(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTPageURLToSDKPageURL,\n          paths: [\n            { path: 'categories.url' },\n            { path: 'categories.translations.url' },\n          ],\n        },\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'categories.coverImage' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          paging: '$[0].paging',\n          fieldsets: '$[0].fieldsets',\n          language: '$[0].language',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ListCategoriesOptions {\n  /** Pagination options. */\n  paging?: BlogPaging;\n  /**\n   * List of additional category fields to include in the response. By default\n   * only the category’s base fields are returned. Base fields are all category fields that don't appear in the fieldset enum.\n   *\n   * To retrieve a field, pass the relevant fieldset in the enum in the `fieldsets` array. For example, add the `URL` fieldset to `fieldsets` to\n   * retrieve the url field in the response in addition to the category’s base fields.\n   * @maxSize 10\n   */\n  fieldsets?: FieldWithLiterals[];\n  /**\n   * Language filter.\n   *\n   * 2-or-4-letter language code in [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.\n   * Pass a language to only receive categories that are in that language.\n   * If omitted, categories in all languages are returned.\n   * @format LANGUAGE_TAG\n   */\n  language?: string | null;\n}\n\n/**\n * Creates a query to retrieve a list of categories.\n *\n *\n * The Query Categories method builds a query to retrieve a list of up to 100 categories per language, and returns a [`CategoriesQueryBuilder`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending) object.\n *\n * The response contains the query definition, which is typically used to run the query using the [`find()`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/find) method.\n *\n * You can refine the query by chaining `CategoriesQueryBuilder` methods to the query. `CategoriesQueryBuilder` methods enable you to sort, filter, and control the results that Query Categories returns. Any methods chained to the Query Categories method are applied in the order that they are called.\n *\n * Query Categories runs with these `CategoriesQueryBuilder` defaults, which you can override.\n * - [`limit(100)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/limit)\n * - [`ascending(displayPosition)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending)\n *\n * The following `CategoriesQueryBuilder` methods are supported for Query Categories. For a full description of the `Categories` object, see the response for the [`items`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-result/items) property in [`CategoriesQueryResult`](https://www.wix.com/velo/reference/wix-blog-backend/categories/categoriesqueryresult).\n * @public\n * @param options - Options specifying which fields to return.\n * @permissionId BLOG.READ-CATEGORY\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.QueryCategories\n */\nexport function queryCategories(\n  options?: QueryCategoriesOptions\n): CategoriesQueryBuilder {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  return queryBuilder<\n    Category,\n    'OFFSET',\n    QueryCategoriesRequest,\n    QueryCategoriesResponse\n  >({\n    func: async (payload: QueryCategoriesRequest) => {\n      const reqOpts = ambassadorWixBlogV3Category.queryCategories({\n        ...payload,\n        ...(options ?? {}),\n      });\n\n      sideEffects?.onSiteCall?.();\n      try {\n        const result = await httpClient.request(reqOpts);\n        sideEffects?.onSuccess?.(result);\n        return result;\n      } catch (err) {\n        sideEffects?.onError?.(err);\n        throw err;\n      }\n    },\n    requestTransformer: (query: QueryCategoriesRequest['query']) => {\n      const args = [query, options] as [\n        QueryCategoriesRequest['query'],\n        QueryCategoriesOptions\n      ];\n      return renameKeysFromSDKRequestToRESTRequest({\n        ...args?.[1],\n        query: args?.[0],\n      });\n    },\n    responseTransformer: ({ data }: HttpResponse<QueryCategoriesResponse>) => {\n      const transformedData = renameKeysFromRESTResponseToSDKResponse(\n        transformPaths(data, [\n          {\n            transformFn: transformRESTPageURLToSDKPageURL,\n            paths: [\n              { path: 'categories.url' },\n              { path: 'categories.translations.url' },\n            ],\n          },\n          {\n            transformFn: transformRESTImageToSDKImage,\n            paths: [{ path: 'categories.coverImage' }],\n          },\n        ])\n      );\n\n      return {\n        items: transformedData?.categories,\n        pagingMetadata: transformedData?.pagingMetadata,\n      };\n    },\n    errorTransformer: (err: unknown) => {\n      const transformedError = sdkTransformError(err, {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { query: '$[0]' },\n        singleArgumentUnchanged: false,\n      });\n\n      throw transformedError;\n    },\n    pagingMethod: 'OFFSET',\n    transformationPaths: {},\n  });\n}\n\nexport interface QueryCategoriesOptions {\n  /**\n\n   * @maxSize 10\n     */\n  fieldsets?: FieldWithLiterals[] | undefined;\n}\n\ninterface QueryOffsetResult {\n  currentPage: number | undefined;\n  totalPages: number | undefined;\n  totalCount: number | undefined;\n  hasNext: () => boolean;\n  hasPrev: () => boolean;\n  length: number;\n  pageSize: number;\n}\n\nexport interface CategoriesQueryResult extends QueryOffsetResult {\n  items: Category[];\n  query: CategoriesQueryBuilder;\n  next: () => Promise<CategoriesQueryResult>;\n  prev: () => Promise<CategoriesQueryResult>;\n}\n\nexport interface CategoriesQueryBuilder {\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  eq: (\n    propertyName:\n      | '_id'\n      | 'label'\n      | 'postCount'\n      | 'title'\n      | 'displayPosition'\n      | 'translationId'\n      | 'language'\n      | 'slug',\n    value: any\n  ) => CategoriesQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  ne: (\n    propertyName:\n      | '_id'\n      | 'label'\n      | 'postCount'\n      | 'title'\n      | 'displayPosition'\n      | 'translationId'\n      | 'language'\n      | 'slug',\n    value: any\n  ) => CategoriesQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  ge: (\n    propertyName: 'label' | 'postCount' | 'title' | 'displayPosition',\n    value: any\n  ) => CategoriesQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  gt: (\n    propertyName: 'label' | 'postCount' | 'title' | 'displayPosition',\n    value: any\n  ) => CategoriesQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  le: (\n    propertyName: 'label' | 'postCount' | 'title' | 'displayPosition',\n    value: any\n  ) => CategoriesQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  lt: (\n    propertyName: 'label' | 'postCount' | 'title' | 'displayPosition',\n    value: any\n  ) => CategoriesQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `string`.\n   * @param string - String to compare against. Case-insensitive.\n   */\n  startsWith: (\n    propertyName: 'label' | 'title',\n    value: string\n  ) => CategoriesQueryBuilder;\n  in: (\n    propertyName:\n      | '_id'\n      | 'label'\n      | 'postCount'\n      | 'title'\n      | 'displayPosition'\n      | 'translationId'\n      | 'language'\n      | 'slug',\n    value: any\n  ) => CategoriesQueryBuilder;\n  exists: (\n    propertyName: 'label' | 'title' | 'translationId' | 'language' | 'slug',\n    value: boolean\n  ) => CategoriesQueryBuilder;\n  /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */\n  ascending: (\n    ...propertyNames: Array<\n      | '_id'\n      | 'label'\n      | 'postCount'\n      | 'title'\n      | 'displayPosition'\n      | 'language'\n      | 'slug'\n    >\n  ) => CategoriesQueryBuilder;\n  /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */\n  descending: (\n    ...propertyNames: Array<\n      | '_id'\n      | 'label'\n      | 'postCount'\n      | 'title'\n      | 'displayPosition'\n      | 'language'\n      | 'slug'\n    >\n  ) => CategoriesQueryBuilder;\n  /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */\n  limit: (limit: number) => CategoriesQueryBuilder;\n  /** @param skip - Number of items to skip in the query results before returning the results. */\n  skip: (skip: number) => CategoriesQueryBuilder;\n  find: () => Promise<CategoriesQueryResult>;\n}\n\n/**\n * Deletes a category.\n * @param categoryId - Category ID.\n * @public\n * @requiredField categoryId\n * @permissionId BLOG.DELETE-CATEGORY\n * @applicableIdentity APP\n * @fqn com.wixpress.npm.communities.platformized.blog.v3.CategoryService.DeleteCategory\n */\nexport async function deleteCategory(categoryId: string): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    categoryId: categoryId,\n  });\n\n  const reqOpts = ambassadorWixBlogV3Category.deleteCategory(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { categoryId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['categoryId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/bulk/category',\n        destPath: '/v3/bulk/category',\n      },\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/bulk/categories',\n        destPath: '/v3/bulk/categories',\n      },\n    ],\n    '*.pub.wix-code.com': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'bo._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'wixbo.ai': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'wix-bo.com': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'editor.wixapps.net': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'editor._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'blocks._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'create.editorx': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'social-blog._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'apps._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/blog/v3/categories',\n        destPath: '/v3/categories',\n      },\n      {\n        srcPath: '/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/_api/communities-blog-node-api/v3/categories',\n        destPath: '/v3/categories',\n      },\n    ],\n    'api._api_base_domain_': [\n      {\n        srcPath: '/category-service-api-proxy',\n        destPath: '',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_blog_categories';\n\n/** Creates a category. */\nexport function createCategory(payload: object): RequestOptionsFactory<any> {\n  function __createCategory({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'category.updatedDate' },\n          { path: 'category.coverImage.urlExpirationDate' },\n        ],\n      },\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [\n          { path: 'category.coverImage.focalPoint.x' },\n          { path: 'category.coverImage.focalPoint.y' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.category',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.v3.CategoryService.CreateCategory',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(\n        { protoPath: '/v3/categories', data: serializedData, host }\n      ),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'category.updatedDate' },\n              { path: 'category.coverImage.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'category.coverImage.focalPoint.x' },\n              { path: 'category.coverImage.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createCategory;\n}\n\n/** Updates a category. */\nexport function updateCategory(payload: object): RequestOptionsFactory<any> {\n  function __updateCategory({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFieldMaskToRESTFieldMask,\n        paths: [{ path: 'fieldMask' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'category.updatedDate' },\n          { path: 'category.coverImage.urlExpirationDate' },\n        ],\n      },\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [\n          { path: 'category.coverImage.focalPoint.x' },\n          { path: 'category.coverImage.focalPoint.y' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.category',\n      method: 'PATCH' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.v3.CategoryService.UpdateCategory',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(\n        {\n          protoPath: '/v3/categories/{category.id}',\n          data: serializedData,\n          host,\n        }\n      ),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'category.updatedDate' },\n              { path: 'category.coverImage.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'category.coverImage.focalPoint.x' },\n              { path: 'category.coverImage.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateCategory;\n}\n\n/** Gets a category with the specified ID. */\nexport function getCategory(payload: object): RequestOptionsFactory<any> {\n  function __getCategory({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.category',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.v3.CategoryService.GetCategory',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(\n        { protoPath: '/v3/categories/{categoryId}', data: payload, host }\n      ),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'category.updatedDate' },\n              { path: 'category.coverImage.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'category.coverImage.focalPoint.x' },\n              { path: 'category.coverImage.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getCategory;\n}\n\n/**\n * Gets a category with the specified slug.\n *\n * The slug is at the end of the URL of a specific category.\n * For example, if a category's URL is `https://example.com/blog/categories/famous-cats`, the slug is `famous-cats`.\n * The slug is a case-sensitive string that is derived from the category's label, unless specified otherwise.\n */\nexport function getCategoryBySlug(payload: object): RequestOptionsFactory<any> {\n  function __getCategoryBySlug({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.category',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.v3.CategoryService.GetCategoryBySlug',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(\n        { protoPath: '/v3/categories/slugs/{slug}', data: payload, host }\n      ),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'category.updatedDate' },\n              { path: 'category.coverImage.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'category.coverImage.focalPoint.x' },\n              { path: 'category.coverImage.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getCategoryBySlug;\n}\n\n/**\n * Retrieves a list of up to 100 categories per request.\n *\n * If you pass a language filter to the method, it returns a list of up to 100 categories in the requested language.\n *\n * The categoies are displayed in order of their `displayPosition`, starting with `0`. The `displayPosition` is the position in which the categories\n * are displayed in the Category Menu page. By default, categories get added to the bottom of the Category Menu page with a `displayPosition` of `-1`.\n *\n * List Categories runs with these defaults, which you can override:\n * - `paging.limit` is `50`.\n * - `paging.offset` is `0`.\n *\n * List Categories is sorted by `displayPosition` in descending order. This cannot be overridden.\n */\nexport function listCategories(payload: object): RequestOptionsFactory<any> {\n  function __listCategories({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.category',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.v3.CategoryService.ListCategories',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(\n        { protoPath: '/v3/categories', data: payload, host }\n      ),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'categories.updatedDate' },\n              { path: 'categories.coverImage.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'categories.coverImage.focalPoint.x' },\n              { path: 'categories.coverImage.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listCategories;\n}\n\n/**\n * Creates a query to retrieve a list of categories.\n *\n *\n * The Query Categories method builds a query to retrieve a list of up to 100 categories per language, and returns a [`CategoriesQueryBuilder`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending) object.\n *\n * The response contains the query definition, which is typically used to run the query using the [`find()`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/find) method.\n *\n * You can refine the query by chaining `CategoriesQueryBuilder` methods to the query. `CategoriesQueryBuilder` methods enable you to sort, filter, and control the results that Query Categories returns. Any methods chained to the Query Categories method are applied in the order that they are called.\n *\n * Query Categories runs with these `CategoriesQueryBuilder` defaults, which you can override.\n * - [`limit(100)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/limit)\n * - [`ascending(displayPosition)`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-builder/ascending)\n *\n * The following `CategoriesQueryBuilder` methods are supported for Query Categories. For a full description of the `Categories` object, see the response for the [`items`](https://dev.wix.com/docs/sdk/backend-modules/blog/categories/categories-query-result/items) property in [`CategoriesQueryResult`](https://www.wix.com/velo/reference/wix-blog-backend/categories/categoriesqueryresult).\n */\nexport function queryCategories(payload: object): RequestOptionsFactory<any> {\n  function __queryCategories({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.category',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.v3.CategoryService.QueryCategories',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(\n        { protoPath: '/v3/categories/query', data: payload, host }\n      ),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'categories.updatedDate' },\n              { path: 'categories.coverImage.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'categories.coverImage.focalPoint.x' },\n              { path: 'categories.coverImage.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __queryCategories;\n}\n\n/** Deletes a category. */\nexport function deleteCategory(payload: object): RequestOptionsFactory<any> {\n  function __deleteCategory({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.blog.v3.category',\n      method: 'DELETE' as any,\n      methodFqn:\n        'com.wixpress.npm.communities.platformized.blog.v3.CategoryService.DeleteCategory',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(\n        { protoPath: '/v3/categories/{categoryId}', data: payload, host }\n      ),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteCategory;\n}\n","import {\n  createCategory as publicCreateCategory,\n  updateCategory as publicUpdateCategory,\n  getCategory as publicGetCategory,\n  getCategoryBySlug as publicGetCategoryBySlug,\n  listCategories as publicListCategories,\n  queryCategories as publicQueryCategories,\n  deleteCategory as publicDeleteCategory,\n} from './blog-v3-category-categories.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { createEventModule } from '@wix/sdk-runtime/event-definition-modules';\nimport {\n  BuildRESTFunction,\n  MaybeContext,\n  BuildEventDefinition,\n} from '@wix/sdk-types';\nimport { onCategoryCreated as publicOnCategoryCreated } from './blog-v3-category-categories.public.js';\nimport { onCategoryDeleted as publicOnCategoryDeleted } from './blog-v3-category-categories.public.js';\nimport { onCategoryUpdated as publicOnCategoryUpdated } from './blog-v3-category-categories.public.js';\n\nexport const createCategory: MaybeContext<\n  BuildRESTFunction<typeof publicCreateCategory> & typeof publicCreateCategory\n> = /*#__PURE__*/ createRESTModule(publicCreateCategory);\nexport const updateCategory: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateCategory> & typeof publicUpdateCategory\n> = /*#__PURE__*/ createRESTModule(publicUpdateCategory);\nexport const getCategory: MaybeContext<\n  BuildRESTFunction<typeof publicGetCategory> & typeof publicGetCategory\n> = /*#__PURE__*/ createRESTModule(publicGetCategory);\nexport const getCategoryBySlug: MaybeContext<\n  BuildRESTFunction<typeof publicGetCategoryBySlug> &\n    typeof publicGetCategoryBySlug\n> = /*#__PURE__*/ createRESTModule(publicGetCategoryBySlug);\nexport const listCategories: MaybeContext<\n  BuildRESTFunction<typeof publicListCategories> & typeof publicListCategories\n> = /*#__PURE__*/ createRESTModule(publicListCategories);\nexport const queryCategories: MaybeContext<\n  BuildRESTFunction<typeof publicQueryCategories> & typeof publicQueryCategories\n> = /*#__PURE__*/ createRESTModule(publicQueryCategories);\nexport const deleteCategory: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteCategory> & typeof publicDeleteCategory\n> = /*#__PURE__*/ createRESTModule(publicDeleteCategory);\n/**\n * Triggered when a category is created.\n */\nexport const onCategoryCreated: BuildEventDefinition<\n  typeof publicOnCategoryCreated\n> = createEventModule(publicOnCategoryCreated);\n/**\n * Triggered when a category is deleted.\n */\nexport const onCategoryDeleted: BuildEventDefinition<\n  typeof publicOnCategoryDeleted\n> = createEventModule(publicOnCategoryDeleted);\n/**\n * Triggered when a category is updated.\n */\nexport const onCategoryUpdated: BuildEventDefinition<\n  typeof publicOnCategoryUpdated\n> = createEventModule(publicOnCategoryUpdated);\n\nexport {\n  Field,\n  SortOrder,\n  WebhookIdentityType,\n} from './blog-v3-category-categories.universal.js';\nexport {\n  Category,\n  SeoSchema,\n  Keyword,\n  Tag,\n  Settings,\n  FocalPoint,\n  CategoryTranslation,\n  InitialCategoriesCopied,\n  CreateCategoryRequest,\n  CreateCategoryResponse,\n  BulkCreateCategoriesRequest,\n  BulkCreateCategoriesResponse,\n  BulkCategoryResult,\n  ItemMetadata,\n  ApplicationError,\n  BulkActionMetadata,\n  BulkUpdateCategoriesRequest,\n  MaskedCategory,\n  BulkUpdateCategoriesResponse,\n  UpdateCategoryRequest,\n  UpdateCategoryResponse,\n  GetCategoriesCountByLanguageRequest,\n  GetCategoriesCountByLanguageResponse,\n  CategoryLanguageCount,\n  GetCategoryRequest,\n  GetCategoryResponse,\n  GetCategoryBySlugRequest,\n  GetCategoryBySlugResponse,\n  ListCategoriesRequest,\n  BlogPaging,\n  ListCategoriesResponse,\n  MetaData,\n  QueryCategoriesRequest,\n  PlatformQuery,\n  PlatformQueryPagingMethodOneOf,\n  Sorting,\n  Paging,\n  CursorPaging,\n  QueryCategoriesResponse,\n  PagingMetadataV2,\n  Cursors,\n  BulkDeleteCategoryRequest,\n  BulkDeleteCategoryResponse,\n  DeleteCategoryRequest,\n  DeleteCategoryResponse,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  RestoreInfo,\n  EntityUpdatedEvent,\n  EntityDeletedEvent,\n  ActionEvent,\n  MessageEnvelope,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  BaseEventMetadata,\n  EventMetadata,\n  CategoryCreatedEnvelope,\n  CategoryDeletedEnvelope,\n  CategoryUpdatedEnvelope,\n  CreateCategoryOptions,\n  UpdateCategory,\n  UpdateCategoryOptions,\n  GetCategoryOptions,\n  GetCategoryBySlugOptions,\n  ListCategoriesOptions,\n  QueryCategoriesOptions,\n  CategoriesQueryResult,\n  CategoriesQueryBuilder,\n} from './blog-v3-category-categories.universal.js';\n"],"mappings":"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","names":["createCategory","deleteCategory","getCategory","getCategoryBySlug","listCategories","onCategoryCreated","onCategoryDeleted","onCategoryUpdated","queryCategories","updateCategory","import_rename_all_nested_keys","import_image","import_page_url","import_timestamp","import_transform_paths","import_float","import_timestamp","import_rest_modules","payload","import_image","import_page_url","import_transform_paths","Field","SortOrder","WebhookIdentityType","createCategory","sdkTransformError","updateCategory","getCategory","getCategoryBySlug","listCategories","queryCategories","deleteCategory","createCategory","updateCategory","getCategory","getCategoryBySlug","listCategories","queryCategories","deleteCategory","import_rest_modules","createCategory","updateCategory","getCategory","getCategoryBySlug","listCategories","queryCategories","deleteCategory","onCategoryCreated","onCategoryDeleted","onCategoryUpdated"]}