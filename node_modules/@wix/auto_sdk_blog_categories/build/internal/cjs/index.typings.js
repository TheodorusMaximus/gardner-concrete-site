"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.typings.ts
var index_typings_exports = {};
__export(index_typings_exports, {
  Field: () => Field,
  SortOrder: () => SortOrder,
  WebhookIdentityType: () => WebhookIdentityType,
  createCategory: () => createCategory2,
  deleteCategory: () => deleteCategory2,
  getCategory: () => getCategory2,
  getCategoryBySlug: () => getCategoryBySlug2,
  listCategories: () => listCategories2,
  queryCategories: () => queryCategories2,
  updateCategory: () => updateCategory2
});
module.exports = __toCommonJS(index_typings_exports);

// src/blog-v3-category-categories.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/blog-v3-category-categories.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_float = require("@wix/sdk-runtime/transformations/float");
var import_float2 = require("@wix/sdk-runtime/transformations/float");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_field_mask = require("@wix/sdk-runtime/transformations/field-mask");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(opts) {
  const domainToMappings = {
    "manage._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/bulk/category",
        destPath: "/v3/bulk/category"
      },
      {
        srcPath: "/_api/communities-blog-node-api/v3/bulk/categories",
        destPath: "/v3/bulk/categories"
      }
    ],
    "*.pub.wix-code.com": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "social-blog._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    _: [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "apps._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/blog/v3/categories",
        destPath: "/v3/categories"
      },
      {
        srcPath: "/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/communities-blog-node-api/v3/categories",
        destPath: "/v3/categories"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/category-service-api-proxy",
        destPath: ""
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_blog_categories";
function createCategory(payload) {
  function __createCategory({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "category.updatedDate" },
          { path: "category.coverImage.urlExpirationDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "category.coverImage.focalPoint.x" },
          { path: "category.coverImage.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.blog.v3.category",
      method: "POST",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.CategoryService.CreateCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(
        { protoPath: "/v3/categories", data: serializedData, host }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "category.updatedDate" },
            { path: "category.coverImage.urlExpirationDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "category.coverImage.focalPoint.x" },
            { path: "category.coverImage.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createCategory;
}
function updateCategory(payload) {
  function __updateCategory({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_field_mask.transformSDKFieldMaskToRESTFieldMask,
        paths: [{ path: "fieldMask" }]
      },
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "category.updatedDate" },
          { path: "category.coverImage.urlExpirationDate" }
        ]
      },
      {
        transformFn: import_float.transformSDKFloatToRESTFloat,
        paths: [
          { path: "category.coverImage.focalPoint.x" },
          { path: "category.coverImage.focalPoint.y" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.blog.v3.category",
      method: "PATCH",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.CategoryService.UpdateCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(
        {
          protoPath: "/v3/categories/{category.id}",
          data: serializedData,
          host
        }
      ),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "category.updatedDate" },
            { path: "category.coverImage.urlExpirationDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "category.coverImage.focalPoint.x" },
            { path: "category.coverImage.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateCategory;
}
function getCategory(payload) {
  function __getCategory({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.category",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.CategoryService.GetCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(
        { protoPath: "/v3/categories/{categoryId}", data: payload, host }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "category.updatedDate" },
            { path: "category.coverImage.urlExpirationDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "category.coverImage.focalPoint.x" },
            { path: "category.coverImage.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCategory;
}
function getCategoryBySlug(payload) {
  function __getCategoryBySlug({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.category",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.CategoryService.GetCategoryBySlug",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(
        { protoPath: "/v3/categories/slugs/{slug}", data: payload, host }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "category.updatedDate" },
            { path: "category.coverImage.urlExpirationDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "category.coverImage.focalPoint.x" },
            { path: "category.coverImage.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getCategoryBySlug;
}
function listCategories(payload) {
  function __listCategories({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.category",
      method: "GET",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.CategoryService.ListCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(
        { protoPath: "/v3/categories", data: payload, host }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "categories.updatedDate" },
            { path: "categories.coverImage.urlExpirationDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "categories.coverImage.focalPoint.x" },
            { path: "categories.coverImage.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listCategories;
}
function queryCategories(payload) {
  function __queryCategories({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.category",
      method: "POST",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.CategoryService.QueryCategories",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(
        { protoPath: "/v3/categories/query", data: payload, host }
      ),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "categories.updatedDate" },
            { path: "categories.coverImage.urlExpirationDate" }
          ]
        },
        {
          transformFn: import_float2.transformRESTFloatToSDKFloat,
          paths: [
            { path: "categories.coverImage.focalPoint.x" },
            { path: "categories.coverImage.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryCategories;
}
function deleteCategory(payload) {
  function __deleteCategory({ host }) {
    const metadata = {
      entityFqdn: "wix.blog.v3.category",
      method: "DELETE",
      methodFqn: "com.wixpress.npm.communities.platformized.blog.v3.CategoryService.DeleteCategory",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressNpmCommunitiesPlatformizedBlogV3CategoryServiceUrl(
        { protoPath: "/v3/categories/{categoryId}", data: payload, host }
      ),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteCategory;
}

// src/blog-v3-category-categories.universal.ts
var import_image = require("@wix/sdk-runtime/transformations/image");
var import_image2 = require("@wix/sdk-runtime/transformations/image");
var import_page_url = require("@wix/sdk-runtime/transformations/page-url");
var import_page_url2 = require("@wix/sdk-runtime/transformations/page-url");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var Field = /* @__PURE__ */ ((Field2) => {
  Field2["UNKNOWN"] = "UNKNOWN";
  Field2["URL"] = "URL";
  Field2["SEO"] = "SEO";
  return Field2;
})(Field || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createCategory2(category, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      category,
      fieldsets: options?.fieldsets
    }),
    [
      {
        transformFn: import_page_url.transformSDKPageURLToRESTPageURL,
        paths: [
          { path: "category.url" },
          { path: "category.translations.url" }
        ]
      },
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "category.coverImage" }]
      }
    ]
  );
  const reqOpts = createCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
          paths: [
            { path: "category.url" },
            { path: "category.translations.url" }
          ]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "category.coverImage" }]
        }
      ])
    )?.category;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          category: "$[0]",
          fieldsets: "$[1].fieldsets"
        },
        singleArgumentUnchanged: false
      },
      ["category", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateCategory2(_id, category, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = (0, import_transform_paths2.transformPaths)(
    (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
      category: { ...category, id: _id },
      fieldsets: options?.fieldsets
    }),
    [
      {
        transformFn: import_page_url.transformSDKPageURLToRESTPageURL,
        paths: [
          { path: "category.url" },
          { path: "category.translations.url" }
        ]
      },
      {
        transformFn: import_image.transformSDKImageToRESTImage,
        paths: [{ path: "category.coverImage" }]
      }
    ]
  );
  const reqOpts = updateCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
          paths: [
            { path: "category.url" },
            { path: "category.translations.url" }
          ]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "category.coverImage" }]
        }
      ])
    )?.category;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { category: "$[1]" },
        explicitPathsToArguments: {
          "category.id": "$[0]",
          fieldsets: "$[2].fieldsets"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "category", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCategory2(categoryId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    categoryId,
    fieldsets: options?.fieldsets
  });
  const reqOpts = getCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
          paths: [
            { path: "category.url" },
            { path: "category.translations.url" }
          ]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "category.coverImage" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          categoryId: "$[0]",
          fieldsets: "$[1].fieldsets"
        },
        singleArgumentUnchanged: false
      },
      ["categoryId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCategoryBySlug2(slug, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    slug,
    fieldsets: options?.fieldsets,
    language: options?.language
  });
  const reqOpts = getCategoryBySlug(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
          paths: [
            { path: "category.url" },
            { path: "category.translations.url" }
          ]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "category.coverImage" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          slug: "$[0]",
          fieldsets: "$[1].fieldsets",
          language: "$[1].language"
        },
        singleArgumentUnchanged: false
      },
      ["slug", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listCategories2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    paging: options?.paging,
    fieldsets: options?.fieldsets,
    language: options?.language
  });
  const reqOpts = listCategories(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
      (0, import_transform_paths2.transformPaths)(result.data, [
        {
          transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
          paths: [
            { path: "categories.url" },
            { path: "categories.translations.url" }
          ]
        },
        {
          transformFn: import_image2.transformRESTImageToSDKImage,
          paths: [{ path: "categories.coverImage" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          paging: "$[0].paging",
          fieldsets: "$[0].fieldsets",
          language: "$[0].language"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryCategories2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryCategories({
        ...payload,
        ...options ?? {}
      });
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(
        (0, import_transform_paths2.transformPaths)(data, [
          {
            transformFn: import_page_url2.transformRESTPageURLToSDKPageURL,
            paths: [
              { path: "categories.url" },
              { path: "categories.translations.url" }
            ]
          },
          {
            transformFn: import_image2.transformRESTImageToSDKImage,
            paths: [{ path: "categories.coverImage" }]
          }
        ])
      );
      return {
        items: transformedData?.categories,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "OFFSET",
    transformationPaths: {}
  });
}
async function deleteCategory2(categoryId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    categoryId
  });
  const reqOpts = deleteCategory(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { categoryId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["categoryId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Field,
  SortOrder,
  WebhookIdentityType,
  createCategory,
  deleteCategory,
  getCategory,
  getCategoryBySlug,
  listCategories,
  queryCategories,
  updateCategory
});
//# sourceMappingURL=index.typings.js.map