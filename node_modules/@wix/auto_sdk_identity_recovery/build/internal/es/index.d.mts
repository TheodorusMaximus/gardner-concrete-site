import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { SendRecoveryEmailOptions, SendActivationEmailOptions, RecoverOptions, StateMachineResponse } from './index.typings.mjs';
export { Address, AddressTag, AddressWrapper, AuthenticationExtensionInputs, AuthenticationExtensionInputsLargeBlobOperationOneOf, AuthenticatorConnection, Connection, ConnectionTypeOneOf, CreateRecoveryTokenRequest, CreateRecoveryTokenResponse, CustomField, CustomValue, CustomValueValueOneOf, Email, EmailOptions, EmailTag, Factor, FactorStatus, FactorType, Identity, IdentityProfile, IdpConnection, ListValue, MapValue, Metadata, MfaChallengeData, MfaReason, Phone, PhoneTag, PrivacyStatus, PublicKeyCredentialDescriptor, PushChallengeData, Reason, RecoverRequest, RecoveryToken, Redirect, RequireMfaData, SecondaryEmail, SendActivationEmailRequest, SendActivationEmailResponse, SendRecoveryEmailRequest, SendRecoveryEmailResponse, StateMachineResponseStateDataOneOf, StateType, Status, StatusName, StatusV2, TenantType, UserVerificationRequirement, V1CustomValue, V1CustomValueValueOneOf, V1Factor, V1ListValue, V1MapValue, VerificationChallenge, VerificationChallengeFactorChallengeDataOneOf, WebAuthnChallengeData } from './index.typings.mjs';

declare function sendRecoveryEmail$1(httpClient: HttpClient): SendRecoveryEmailSignature;
interface SendRecoveryEmailSignature {
    /**
     * Sends an email to a member with a unique link to a Wix-managed password reset page.
     * The member can use this page to reset their site password.
     * If the site owner uses this page, it resets their Wix account password instead.
     *
     * > **Note:** You must publish the Wix site connected to your Headless project.
     * > Wix uses the published site to display the password reset page. To do this, open your project dashboard,
     * > select **Design Site** from the left panel, and then select **Publish**.
     * @param - Email address associated with the account to recover.
     */
    (email: string, options?: SendRecoveryEmailOptions): Promise<void>;
}
declare function sendActivationEmail$1(httpClient: HttpClient): SendActivationEmailSignature;
interface SendActivationEmailSignature {
    /**
     * Sends an activation email with an activation token
     * making the transition from initial contact to a site member
     * @param - Id of the activating user
     */
    (identityId: string, options?: SendActivationEmailOptions): Promise<void>;
}
declare function recover$1(httpClient: HttpClient): RecoverSignature;
interface RecoverSignature {
    /** @param - recovery token */
    (recoveryToken: string, options?: RecoverOptions): Promise<NonNullablePaths<StateMachineResponse, `state` | `identity.connections` | `identity.connections.${number}.idpConnection.idpConnectionId` | `identity.connections.${number}.idpConnection.idpUserId` | `identity.connections.${number}.authenticatorConnection.authenticatorConnectionId` | `identity.connections.${number}.authenticatorConnection.reEnrollmentRequired` | `identity.identityProfile.emails` | `identity.identityProfile.phones` | `identity.identityProfile.labels` | `identity.identityProfile.privacyStatus` | `identity.identityProfile.customFields` | `identity.identityProfile.customFields.${number}.name` | `identity.identityProfile.customFields.${number}.value.strValue` | `identity.identityProfile.customFields.${number}.value.numValue` | `identity.identityProfile.secondaryEmails` | `identity.identityProfile.secondaryEmails.${number}.email` | `identity.identityProfile.secondaryEmails.${number}.tag` | `identity.identityProfile.phonesV2` | `identity.identityProfile.phonesV2.${number}.phone` | `identity.identityProfile.phonesV2.${number}.tag` | `identity.identityProfile.addresses` | `identity.identityProfile.addresses.${number}.tag` | `identity.email.address` | `identity.email.isVerified` | `identity.status.name` | `identity.status.reasons` | `identity.factors` | `identity.factors.${number}.factorId` | `identity.factors.${number}.type` | `identity.factors.${number}.status`>>;
}

declare const sendRecoveryEmail: MaybeContext<BuildRESTFunction<typeof sendRecoveryEmail$1> & typeof sendRecoveryEmail$1>;
declare const sendActivationEmail: MaybeContext<BuildRESTFunction<typeof sendActivationEmail$1> & typeof sendActivationEmail$1>;
declare const recover: MaybeContext<BuildRESTFunction<typeof recover$1> & typeof recover$1>;

export { RecoverOptions, SendActivationEmailOptions, SendRecoveryEmailOptions, StateMachineResponse, recover, sendActivationEmail, sendRecoveryEmail };
